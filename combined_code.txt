## File: app.R 
 # Source other elements
source("module_line_chart.R")
source("module_area_chart.R")
source("module_data_table.R")
source("options.R")
source("module_summary.R")
source("module_employees.R")
source("module_legal_responsibility.R")
source("module_fertiliser_usage.R")
source("module_farm_types.R")
source("module_occupiers.R")
source("module_land_use_summary.R")
source("module_owned_land.R")
source("module_cattle.R")  # Added new module

# Source the UI and server components
source("ui.R")
source("server.R")

# Run the app
shinyApp(ui = ui, server = server)


## File: data.R 
 ## data.R

library(readxl)
library(openxlsx)
library(dplyr)
library(tidyr)



# Load  data from the Excel file
file_path <- "ghg_data.xlsx"
agri_gas <- read_excel(file_path, sheet = "agri_gas")
national_total <- read_excel(file_path, sheet = "national_total")
subsector_total <- read_excel(file_path, sheet = "subsector_total")
subsector_source <- read_excel(file_path, sheet = "subsector_source")

agri_gas <- agri_gas %>% 
  rename(Gas = ...1)

# Reshape the data to long format
agri_gas <- agri_gas %>% pivot_longer(cols = -Gas, names_to = "Year", values_to = "Value")
national_total <- national_total %>% pivot_longer(cols = -Industry, names_to = "Year", values_to = "Value")
subsector_total <- subsector_total %>% pivot_longer(cols = -Subsector, names_to = "Year", values_to = "Value")

# Convert Year to numeric
agri_gas$Year <- as.numeric(agri_gas$Year)
national_total$Year <- as.numeric(national_total$Year)
subsector_total$Year <- as.numeric(subsector_total$Year)


save(subsector_total, agri_gas, national_total, subsector_source, file = "ghg_data.RData")

# load data
load("ghg_data.RData")



# File: load_tables.R

library(readxl)
library(dplyr)
library(stringr)

# Define file path
file_path <- "June+Agricultural+Census+2023+Tables.xlsx"

# Define the simplified table names and corresponding sheet names
table_names <- c(
  "agricultural_area_hectares" = "Table_1",
  "vegetables_bulbs_fruit_area" = "Table_2",
  "number_of_cattle" = "Table_3 ",
  "number_of_sheep" = "Table_4 ",
  "number_of_pigs" = "Table_5",
  "number_of_poultry" = "Table_6",
  "number_of_other_livestock" = "Table_7",
  "occupiers_employees" = "Table_8",
  "occupiers_age_gender" = "Table_9",
  "legal_responsibility" = "Table_10",
  "owned_rented_land" = "Table_11",
  "farm_type" = "Table_12",
  "agricultural_area_lfa" = "Table_13",
  "holdings_crops_grass_subregion" = "Table_14",
  "crops_grass_area_subregion" = "Table_15",
  "holdings_livestock_region_subregion" = "Table_16",
  "livestock_subregion" = "Table_17",
  "holdings_occupiers_employees_subregion" = "Table_18",
  "occupiers_employees_subregion" = "Table_19",
  "arable_rotation" = "Table_20",
  "manure_fertiliser" = "Table_21"
)

# Function to remove columns and rows that are all NAs
clean_data <- function(data) {
  data <- data[, colSums(is.na(data)) < nrow(data)]  # Remove columns with all NAs
  data <- data[rowSums(is.na(data)) < ncol(data), ]  # Remove rows with all NAs
  return(data)
}

# Function to clean header names by removing text within brackets, any '\r\n', extra spaces, and specific region names
clean_headers <- function(headers) {
  headers <- str_replace_all(headers, "\\s*\\([^\\)]+\\)", "")  # Remove text within brackets
  headers <- str_replace_all(headers, "\r\n", " ")  # Remove \r\n
  headers <- str_replace_all(headers, "\\s+", " ")  # Replace multiple spaces with a single space
  headers <- str_replace_all(headers, "\\b(North West|North East|South East|South West)\\b", "")  # Remove specific region names
  headers <- str_trim(headers)  # Trim again to remove any resulting leading or trailing spaces
  return(headers)
}

# Function to clean cell values by replacing multiple spaces with a single space
clean_cells <- function(data) {
  data <- data %>% mutate(across(where(is.character), ~str_replace_all(.x, "\\s+", " ")))
  return(data)
}

# Read each table, clean it, and assign to a variable
for (table in names(table_names)) {
  sheet_name <- table_names[table]
  data <- read_excel(file_path, sheet = sheet_name)
  
  # Clean headers
  headers <- names(data)
  cleaned_headers <- clean_headers(headers)
  
  # Remove columns with '5 year' in the header (case insensitive)
  columns_to_remove <- grep("5 year", cleaned_headers, ignore.case = TRUE)
  if (length(columns_to_remove) > 0) {
    data <- data[, -columns_to_remove]
    cleaned_headers <- cleaned_headers[-columns_to_remove]
  }
  
  # Assign cleaned headers to the data
  names(data) <- cleaned_headers
  
  # Convert all columns except the first to numeric, setting non-numeric values to NA
  data <- data %>% mutate(across(-1, ~ as.numeric(as.character(.))))
  
  # Remove '\r\n' from all character columns and clean multiple spaces in the first column
  data[[1]] <- str_replace_all(data[[1]], "\r\n", " ")
  data <- clean_cells(data)
  
  # Clean data
  cleaned_data <- clean_data(data)
  
  assign(table, cleaned_data)
}


# Save all tables to an RData file
save(list = names(table_names), file = "census_data.RData")

load("census_data.RData")


library(sf)
library(dplyr)
library(highcharter)
library(geojsonio)
library(rmapshaper)

# Load the shapefile
local_authorities <- st_read("pub_las.shp")

mapping_data <- data.frame(
  region = c("North West", "North West", "North West", "North West", 
             "North East", "North East", "North East", 
             "South East", "South East", "South East", "South East", "South East", 
             "South East", "South East", "South East", "South East",
             "South West", "South West", "South West", "South West", "South West", 
             "South West", "South West", "South West", "South West", "South West", 
             "South West", "South West", "South West", "South West", "South West", "South West"
             ),
  sub_region = c("Shetland", "Orkney", "Na h-Eileanan Siar", "Highland", 
                 "Grampian", "Grampian", "Grampian", 
                 "Tayside", "Tayside", "Tayside", "Fife", "Lothian", "Lothian", "Lothian", "Lothian", 
                 "Scottish Borders", "East Central", "East Central", "East Central", 
                 "Argyll & Bute", "Clyde Valley", "Clyde Valley", "Clyde Valley", "Clyde Valley", 
                 "Clyde Valley", "Clyde Valley", "Clyde Valley", "Clyde Valley", "Ayrshire", "Ayrshire", "Ayrshire", 
                 "Dumfries & Galloway"),
  local_authority = c("Shetland Islands", "Orkney Islands", "Na h-Eileanan an Iar", "Highland", 
                      "Aberdeen City", "Aberdeenshire", "Moray", 
                      "Angus", "Dundee City", "Perth and Kinross", "Fife", "East Lothian", "City of Edinburgh", 
                      "Midlothian", "West Lothian", "Scottish Borders", 
                      "Clackmannanshire", "Falkirk", "Stirling", 
                      "Argyll and Bute", "East Dunbartonshire", "East Renfrewshire", "Glasgow City", 
                      "Inverclyde", "North Lanarkshire", "Renfrewshire", "South Lanarkshire", 
                      "West Dunbartonshire", "East Ayrshire", "North Ayrshire", "South Ayrshire", 
                      "Dumfries and Galloway")
)

# Merge the shapefile with the mapping data
local_authorities <- local_authorities %>%
  left_join(mapping_data, by = c("local_auth" = "local_authority"))

# Ensure geometries are valid
local_authorities <- st_make_valid(local_authorities)

sub_regions <- local_authorities %>%
  group_by(sub_region) %>%
  summarise(geometry = st_union(geometry))

st_write(sub_regions, "sub_regions.geojson", driver = "GeoJSON")

# Load the GeoJSON file
geojson_data <- geojson_read("sub_regions.geojson", what = "sp")

geojson_data <- ms_simplify(geojson_data, keep = 0.001)

geojson_write(geojson_data, file = "subregions_simplified.geojson")



#crops / fruit/veg
# Print unique values 

unique(agricultural_area_hectares$`Crop/Land use`)

unique(vegetables_bulbs_fruit_area$`Vegetables and fruits for human consumption`)

unique(crops_grass_area_subregion$`Land use by category`)


names(agricultural_area_hectares) <- names(agricultural_area_hectares) %>%
  str_replace_all("Area", "") %>%
  str_trim

names(vegetables_bulbs_fruit_area) <- names(vegetables_bulbs_fruit_area) %>%
  str_replace_all("Area", "") %>%
  str_trim

#summary crops data
crops_summary_data <- agricultural_area_hectares %>%
  filter(`Crop/Land use` %in% c("Total combine harvested crops", "Total crops for stockfeeding",
                                "Vegetables for human consumption", "Soft fruit"))

land_use_data <- agricultural_area_hectares %>% 
  filter(`Crop/Land use` %in% c("Total crops, fallow, and set-aside", "Total grass", 
                                "Rough grazing", "Total sole right agricultural area", "Common grazings"))


land_use_subregion <- crops_grass_area_subregion %>%
  filter(`Land use by category` %in% c("Total agricultural area", "Total grass and rough grazing", 
                                "Sole right grazing", "Total crops and fallow", "Common grazing", "Woodland"))


# Subset for cereals data
cereals_data <- agricultural_area_hectares %>%
  filter(`Crop/Land use` %in% c("Wheat", "Triticale", "Winter barley", "Spring barley", "Barley Total", 
                                "Winter oats", "Spring oats", "Oats Total", "Rye", "Mixed grain", 
                                "Total cereals"))

# Subset for oilseeds data
oilseed_data <- agricultural_area_hectares %>%
  filter(`Crop/Land use` %in% c("Winter oilseed rape", "Spring oilseed rape", "Linseed", "Total oilseeds"))

# Subset for potatoes data
potatoes_data <- agricultural_area_hectares %>%
  filter(`Crop/Land use` %in% c("Seed potatoes", "Ware potatoes", "Total potatoes"))

# Subset for beans data
beans_data <- agricultural_area_hectares %>%
  filter(`Crop/Land use` %in% c("Protein peas", "Field beans"))

# Subset for animal feed data
stockfeeding_data <- agricultural_area_hectares %>%
  filter(`Crop/Land use` %in% c("Turnips/swedes", "Kale/cabbage", "Maize", "Rape", "Fodder beet", 
                                "Lupins", "Other crops for stockfeeding", "Total crops for stockfeeding"))

# Subset for human vegetables data
human_vegetables_data <- vegetables_bulbs_fruit_area %>%
  filter(`Vegetables and fruits for human consumption` %in% c(
    "Peas for canning, freezing or drying",
    "Beans for canning, freezing or drying",
    "Turnips/swedes",
    "Calabrese",
    "Cauliflower",
    "Carrots",
    "Other vegetables",
    "Total vegetables"
  ))

# Subset for soft fruit data
fruit_data <- vegetables_bulbs_fruit_area %>%
  filter(`Vegetables and fruits for human consumption` %in% c(
    "Strawberries grown in the open",
    "Raspberries grown in the open",
    "Blueberries grown in the open",
    "Blackcurrants and other fruit grown in the open",
    "Total soft fruit grown in the open",
    "Tomatoes grown under cover",
    "Strawberries grown under cover",
    "Raspberries grown under cover",
    "Blueberries grown under cover",
    "Other fruit grown under cover",
    "Vegetables grown under cover",
    "Strawberries grown in open/under cover",
    "Raspberries grown in open/under cover",
    "Blackcurrants grown in open/under cover",
    "Blueberries grown in open/under cover",
    "Tomatoes grown in open/under cover",
    "Other fruit grown in open/under cover",
    "Total soft fruit"
  ))
# Subset for cereals_subregion
cereals_subregion <- crops_grass_area_subregion %>%
  filter(`Land use by category` %in% c(
    "Wheat",
    "Winter Barley",
    "Spring Barley",
    "Barley Total",
    "Oats, triticale and mixed grain"
  ))

# Subset for oilseed_subregion
oilseed_subregion <- crops_grass_area_subregion %>%
  filter(`Land use by category` %in% c(
    "Rape for oilseed and linseed"
  ))

# Subset for potato_subregion
potatoes_subregion <- crops_grass_area_subregion %>%
  filter(`Land use by category` %in% c(
    "Potatoes"
  ))

# Subset for beans_subregion
beans_subregion <- crops_grass_area_subregion %>%
  filter(`Land use by category` %in% c(
    "Peas and beans for combining"
  ))

# Subset for stockfeeding_subregion
stockfeeding_subregion <- crops_grass_area_subregion %>%
  filter(`Land use by category` %in% c(
    "Stockfeeding crops"
  ))

# Subset for human_veg_subregion
human_vegetables_subregion <- crops_grass_area_subregion %>%
  filter(`Land use by category` %in% c(
    "Vegetables for human consumption"
  ))

# Subset for fruit_subregion
fruit_subregion <- crops_grass_area_subregion %>%
  filter(`Land use by category` %in% c(
    "Orchard and soft fruit"
  ))

# Saving all the subsets to an RData file
save(
  crops_summary_data,
  land_use_data,
  land_use_subregion,
  cereals_data,
  oilseed_data,
  potatoes_data,
  beans_data,
  stockfeeding_data,
  human_vegetables_data,
  fruit_data,
  cereals_subregion,
  oilseed_subregion,
  potatoes_subregion,
  beans_subregion,
  stockfeeding_subregion,
  human_vegetables_subregion,
  fruit_subregion,
  file = "crops_data.RData"
)




# Convert the wide format data into long format using pivot_longer
number_of_pigs_long <- number_of_pigs %>%
  pivot_longer(cols = -`Pigs by category`, names_to = "Year", values_to = "Total") %>%
  filter(`Pigs by category` == "Total pigs") %>%
  select(Year, `Total pigs` = Total)

number_of_poultry_long <- number_of_poultry %>%
  pivot_longer(cols = -`Poultry by category`, names_to = "Year", values_to = "Total") %>%
  filter(`Poultry by category` == "Total poultry") %>%
  select(Year, `Total poultry` = Total)

number_of_sheep_long <- number_of_sheep %>%
  pivot_longer(cols = -`Sheep by category`, names_to = "Year", values_to = "Total") %>%
  filter(`Sheep by category` == "Total sheep") %>%
  select(Year, `Total sheep` = Total)

number_of_cattle_long <- number_of_cattle %>%
  pivot_longer(cols = -`Cattle by category`, names_to = "Year", values_to = "Total") %>%
  filter(`Cattle by category` == "Total Cattle") %>%
  select(Year, `Total cattle` = Total)

# Merge the dataframes on the 'Year' column
total_animals <- number_of_pigs_long %>%
  inner_join(number_of_poultry_long, by = "Year") %>%
  inner_join(number_of_sheep_long, by = "Year") %>%
  inner_join(number_of_cattle_long, by = "Year")

# Convert Year column to numeric
total_animals$Year <- as.numeric(total_animals$Year)

# save total animals 
save(total_animals, file = "total_animals.RData")

# module 2023 data
# Load necessary libraries
library(readxl)
library(stringr)
library(dplyr)

# Define the file path
file_path <- "June+Agricultural+Census+2023+-+Module+Report+-+Production+methods+and+nutrient+application+-+Tables.xlsx"

# Define the sheet names to read
sheets_to_read <- c("Table_4", "Table_5", "Table_7", "Table_8", "Table_9", "Table_12")

# Define shortened names for the dataframes
short_names <- c("soil_nutrient_mgmt", "grass_crop_nutrient_mgmt", "nitrogen_250", 
                 "nitrogen_400", "manure_qty", "fertiliser_use")

# Function to clean header names by removing text within brackets, any '\r\n', extra spaces, and specific region names
clean_headers <- function(headers) {
  headers <- str_replace_all(headers, "\\s*\\([^\\)]+\\)", "")  # Remove text within brackets
  headers <- str_replace_all(headers, "\r\n", " ")  # Remove \r\n
  headers <- str_replace_all(headers, "\\s+", " ")  # Replace multiple spaces with a single space
  headers <- str_replace_all(headers, "\\b(North West|North East|South East|South West)\\b", "")  # Remove specific region names
  headers <- str_trim(headers)  # Trim again to remove any resulting leading or trailing spaces
  return(headers)
}

# Function to read and process each sheet
read_and_process_sheet <- function(sheet) {
  df <- read_excel(file_path, sheet = sheet, skip = 5)  # Skip the first 5 rows
  colnames(df) <- clean_headers(colnames(df))  # Clean the headers
  return(df)
}

# Function to round all numeric columns to 2 decimal places
round_df <- function(df) {
  df[] <- lapply(df, function(x) if(is.numeric(x)) round(x, 2) else x)
  return(df)
}

# Read and process the specified sheets into a list of dataframes
data_frames <- lapply(sheets_to_read, read_and_process_sheet)

# Name the list elements with shortened names
names(data_frames) <- short_names

# Remove the 'Area' column from 'grass_crop_nutrient_mgmt' if it exists
if("Area" %in% colnames(data_frames$grass_crop_nutrient_mgmt)) {
  data_frames$grass_crop_nutrient_mgmt <- select(data_frames$grass_crop_nutrient_mgmt, -Area)
}

# Ensure 'Percentage of holdings' and 'Average holding area' are numeric in both dataframes
data_frames$soil_nutrient_mgmt$`Percentage of holdings` <- as.numeric(as.character(data_frames$soil_nutrient_mgmt$`Percentage of holdings`))
data_frames$grass_crop_nutrient_mgmt$`Percentage of holdings` <- as.numeric(as.character(data_frames$grass_crop_nutrient_mgmt$`Percentage of holdings`))

data_frames$soil_nutrient_mgmt$`Average holding area` <- as.numeric(as.character(data_frames$soil_nutrient_mgmt$`Average holding area`))
data_frames$grass_crop_nutrient_mgmt$`Average holding area` <- as.numeric(as.character(data_frames$grass_crop_nutrient_mgmt$`Average holding area`))

# Round all numeric columns to 2 decimal places in each dataframe
data_frames <- lapply(data_frames, round_df)

# Join 'soil_nutrient_mgmt' and 'grass_crop_nutrient_mgmt' data frames
combined_nutrient_mgmt <- bind_rows(data_frames$soil_nutrient_mgmt, data_frames$grass_crop_nutrient_mgmt)

# Remove specified rows from the 'Soil nutrient management' column in the combined data frame
remove_entries <- c("Holdings with grassland", "Cropland holdings", "Holdings with grass or crops", 
                    "Soil testing resulted in change of crop nutrient application (those that performed soil testing)", 
                    "Uses protected urea")

combined_nutrient_mgmt <- combined_nutrient_mgmt %>% 
  filter(!`Soil nutrient management` %in% remove_entries)

# Assign the combined data frame back to the list
data_frames$combined_nutrient_mgmt <- combined_nutrient_mgmt

# Remove the original separate data frames
data_frames$soil_nutrient_mgmt <- NULL
data_frames$grass_crop_nutrient_mgmt <- NULL

# Save the data frames as a .RData file
save(list = names(data_frames), file = "module_2023.RData", envir = list2env(data_frames))

## File: hc_theme.R 
 # hc_theme.R

library(highcharter)

# Define the Highcharts theme
thm <- hc_theme(
  chart = list(
    style = list(
      fontFamily = "Arial, sans-serif",
      fontSize = "16px",
      color = "black"
    )
  ),
  title = list(
    style = list(
      fontFamily = "Arial, sans-serif",
      fontSize = "16px",
      color = "black"
    )
  ),
  subtitle = list(
    style = list(
      fontFamily = "Arial, sans-serif",
      fontSize = "16px",
      color = "black"
    )
  ),
  xAxis = list(
    labels = list(
      style = list(
        fontFamily = "Arial, sans-serif",
        fontSize = "16px",
        color = "black"
      )
    ),
    title = list(
      style = list(
        fontFamily = "Arial, sans-serif",
        fontSize = "16px",
        color = "black"
      )
    )
  ),
  yAxis = list(
    labels = list(
      style = list(
        fontFamily = "Arial, sans-serif",
        fontSize = "16px",
        color = "black"
      )
    ),
    title = list(
      style = list(
        fontFamily = "Arial, sans-serif",
        fontSize = "16px",
        color = "black"
      )
    )
  ),
 tooltip = list(
   style = list(
      fontFamily = "Arial, sans-serif",
      fontSize = "16px",
      color = "black"
    ),
    headerFormat = "<b>{point.key}</b><br/>"  
#    pointFormatter = JS("function() {
#    var value = this.y;
#    var formattedValue;
#    if (value >= 1000) {
#      formattedValue = value.toLocaleString(undefined, {minimumFractionDigits: 0, maximumFractionDigits: 0});
#    } else {
#      formattedValue = value.toLocaleString(undefined, {minimumFractionDigits: 1, maximumFractionDigits: 2});
#    }
#    return this.series.name + ': ' + formattedValue;
#  }")
  ),
  
  legend = list(
    itemStyle = list(
      fontFamily = "Arial, sans-serif",
      fontSize = "16px",
      color = "black"
    )
  ),
  plotOptions = list(
    series = list(
      stickyTracking = FALSE,
      itemStyle = list(
        fontFamily = "Arial, sans-serif",
        fontSize = "16px",
        color = "black"
      ),
      dataLabels = list(
        style = list(
          fontFamily = "Arial, sans-serif",
          fontSize = "16px",  # Increase the font size for data labels
          color = "black"
        )
      ),
      marker = list(
        enabled = TRUE,
        states = list(
          hover = list(
            enabled = TRUE
          )
        )
      )
    )
  ),
  colors = c("#002d54", "#2b9c93", "#6a2063", "#e5682a", "#0b4c0b", "#5d9f3c", "#592c20", "#ca72a2")
)

# Apply the Highcharts theme globally
options(highcharter.theme = thm)

## File: module_area_chart.R 
 # File: module_area_chart.R

areaChartUI <- function(id) {
  ns <- NS(id)
  tagList(
    htmlOutput(ns("title")),
    highchartOutput(ns("area_chart")),
    htmlOutput(ns("footer")),
    div(
      class = "note",
      style = "margin-top: 20px; padding: 10px; border-top: 1px solid #ddd;",
      HTML(
        "<strong>Note:</strong><ul>
          <li>To remove a series from the chart, deselect the variable from the sidebar menu.</li>
          <li>Select a year range by adjusting the slider on the sidebar or by zooming into the graph by clicking and dragging over an area you wish to see.</li>
          <li>You can see data values for a specific year by hovering your mouse over the area.</li>
        </ul>"
      )
    )
  )
}

areaChartServer <- function(id, chart_data, title, yAxisTitle, xAxisTitle, unit = "", footer, x_col, y_col) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    reactive_colors <- reactive({ assign_colors(chart_data(), preset_colors) })
    
    output$title <- renderUI({
      year_min <- min(as.numeric(chart_data()[[x_col]]), na.rm = TRUE)
      year_max <- max(as.numeric(chart_data()[[x_col]]), na.rm = TRUE)
      HTML(paste0("<div style='font-size: 20px; font-weight: bold;'>", title, ", ", year_min, " to ", year_max, "</div>"))
    })
    
    output$footer <- renderUI({
      HTML(footer)
    })
    
    output$area_chart <- renderHighchart({
      data <- chart_data()
      colors <- reactive_colors()
      group_column <- setdiff(names(data), c(x_col, y_col))[1] # Assuming only one group column
      
      hc <- highchart() %>%
        hc_chart(type = "area", zoomType = "xy") %>%
        hc_yAxis(title = list(text = yAxisTitle)) %>%
        hc_xAxis(title = list(text = xAxisTitle), type = "category", tickInterval = 5) %>%
        hc_plotOptions(area = list(stacking = "normal")) %>%
        hc_legend(align = "left", alignColumns = FALSE, layout = "horizontal") %>%
        hc_plotOptions(area = list(stickyTracking = TRUE)) %>%
        hc_add_theme(thm)
      
      unique_groups <- unique(data[[group_column]])
      lapply(unique_groups, function(g) {
        series_data <- data[data[[group_column]] == g, ]
        hc <<- hc %>%
          hc_add_series(name = g, data = list_parse2(series_data %>% transmute(x = as.numeric(!!sym(x_col)), y = !!sym(y_col))), color = colors[[g]])
      })
      
      hc %>%
        hc_tooltip(
          useHTML = TRUE,
          headerFormat = "<b>{point.key}</b><br/>",
          pointFormatter = JS(sprintf("function() {
            var value = this.y;
            var formattedValue;
            if (value >= 1000) {
              formattedValue = value.toLocaleString(undefined, {minimumFractionDigits: 0, maximumFractionDigits: 0});
            } else {
              formattedValue = value.toLocaleString(undefined, {minimumFractionDigits: 1, maximumFractionDigits: 2});
            }
            return this.series.name + ': ' + formattedValue + ' %s';
          }", unit))
        )
    })
  })
}

## File: module_bar_chart.R 
 # File: module_bar_chart_combined.R

barChartUI <- function(id) {
  ns <- NS(id)
  tagList(
    htmlOutput(ns("title")),
    highchartOutput(ns("bar_chart")),
    htmlOutput(ns("footer")),
    div(
      class = "note",
      style = "margin-top: 20px; padding: 10px; border-top: 1px solid #ddd;",
      HTML(
        "<strong>Note:</strong><ul>
          <li>You can see data values for a specific variable by hovering your mouse over the bars.</li>
        </ul>"
      )
    )
  )
}

# File: module_bar_chart.R

barChartServer <- function(id, chart_data, title, yAxisTitle, xAxisTitle, footer, x_col, y_col, unit = "", tooltip_format = "", maintain_order = FALSE) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    reactive_colors <- reactive({ assign_colors(chart_data(), preset_colors) })
    
    output$title <- renderUI({
      HTML(paste0("<div style='font-size: 20px; font-weight: bold;'>", title, "</div>"))
    })
    
    output$footer <- renderUI({
      HTML(footer)
    })
    
    output$bar_chart <- renderHighchart({
      data <- chart_data()
      if (nrow(data) == 0) return(NULL)
      colors <- reactive_colors()
      group_column <- setdiff(names(data), c(x_col, if (is.reactive(y_col)) y_col() else y_col))[1]
      
      if (is.reactive(y_col)) {
        y_col_value <- y_col()
      } else {
        y_col_value <- y_col
      }
      
      if (!maintain_order) {
        data <- data %>%
          arrange(desc(!!sym(y_col_value)))  # Sort data by value in descending order
      }
      
      highchart() %>%
        hc_chart(type = "bar", inverted = TRUE, zoomType = "xy") %>%
        hc_xAxis(categories = data[[x_col]], title = list(text = xAxisTitle)) %>%
        hc_yAxis(title = list(text = if (is.reactive(yAxisTitle)) yAxisTitle() else yAxisTitle), allowDecimals = FALSE) %>%
        hc_plotOptions(bar = list(
          dataLabels = list(enabled = FALSE),
          colorByPoint = TRUE,
          groupPadding = 0,
          pointPadding = 0.1,
          borderWidth = 0
        )) %>%
        hc_add_series(
          name = "",
          data = data %>% mutate(y = !!sym(y_col_value), color = colors[!!sym(x_col)]) %>% 
            select(name = !!sym(x_col), y, color),
          colorByPoint = TRUE,
          showInLegend = FALSE
        ) %>%
        hc_tooltip(
          useHTML = TRUE,
          headerFormat = "<b>{point.key}</b><br/>",
          pointFormatter = JS(sprintf("function() {
            var value = this.y;
            var formattedValue;
            if (value >= 1000) {
              formattedValue = value.toLocaleString(undefined, {minimumFractionDigits: 0, maximumFractionDigits: 0});
            } else {
              formattedValue = value.toLocaleString(undefined, {minimumFractionDigits: 1, maximumFractionDigits: 2});
            }
            return this.series.name + ': ' + formattedValue + ' %s';
          }", unit))
        ) %>%
        hc_add_theme(thm)
    })
  })
}

## File: module_timelapse_bar_chart.R 
 # File: module_timelapse_bar_chart.R

timelapseBarChartUI <- function(id) {
  ns <- NS(id)
  tagList(
    tags$style(HTML("
      .chart-container {
        position: relative;
      }
      .chart-controls {
        display: flex;
        align-items: center;
      }
      .chart-controls .form-group {
        margin-bottom: 0;
        margin-left: 10px;
      }
      .chart-controls .btn {
        margin-left: 10px;
      }
      .year-label {
        margin-right: 10px;
        font-weight: bold;
      }
    ")),
    div(class = "chart-container",
        fluidRow(
          column(8, htmlOutput(ns("title"))),
          column(4, div(class = "chart-controls",
                        div(class = "year-label", "Year:"),
                        sliderInput(ns("year"), NULL, min = 1998, max = 2022, value = 1998, step = 1, sep = "", ticks = TRUE, animate = animationOptions(interval = 1000, loop = FALSE), width = '200px'),
                        actionButton(ns("playPause"), "", icon = icon("play"), class = "btn btn-primary")
          ))
        ),
        highchartOutput(ns("chart"), height = "500px")
    ),
    htmlOutput(ns("footer")),
    div(
      class = "note",
      style = "margin-top: 20px; padding: 10px; border-top: 1px solid #ddd;",
      HTML(
        "<strong>Note:</strong><ul>
          <li>Press the play button at the top right of the screen to see the timelapse of the data. You can manually adjust the year by adjusting the slider.</li>
          <li>To remove a series from the chart, deselect the variable from the sidebar menu.</li>
          <li>You can see data values for a specific year by hovering your mouse over the line.</li>
        </ul>"
      )
    )
  )
}

timelapseBarChartServer <- function(id, chart_data, title, yAxisTitle, xAxisTitle, footer, x_col, y_col, unit = "") {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    
    max_value <- reactive({
      all_data <- chart_data()
      if (is.null(all_data) || nrow(all_data) == 0) return(0)
      max_val <- max(all_data[[y_col]], na.rm = TRUE)
      return(max_val)
    })
    
    getData <- function(year, nbr) {
      data <- chart_data()
      if (is.null(data) || nrow(data) == 0) return(data.frame())
      data %>%
        filter(!!sym(x_col) == year) %>%
        arrange(desc(!!sym(y_col))) %>%
        slice(1:nbr) %>%
        mutate(!!sym(y_col) := as.numeric(!!sym(y_col)))
    }
    
    getSubtitle <- function(year, data) {
      if (nrow(data) == 0) return("")
      total_value <- sum(data[[y_col]], na.rm = TRUE)
      paste0("<span style='font-size: 80px'>", year, "</span><br><span style='font-size: 22px'>Total: <b>", round(total_value, 2), "</b> ", unit, "</span>")
    }
    
    getDataList <- function(data, colors) {
      if (nrow(data) == 0) return(list())
      first_col_name <- names(data)[1]
      lapply(1:nrow(data), function(i) {
        list(
          name = data[[first_col_name]][i],
          y = data[[y_col]][i],
          color = colors[[data[[first_col_name]][i]]]
        )
      })
    }
    
    current_year <- reactiveVal(1998)
    nbr <- 20
    
    current_data <- reactive({
      getData(current_year(), nbr)
    })
    
    current_subtitle <- reactive({
      getSubtitle(current_year(), current_data())
    })
    
    current_colors <- reactive({
      assign_colors(chart_data(), preset_colors)
    })
    
    current_data_list <- reactive({
      getDataList(current_data(), current_colors())
    })
    
    updateYear <- function() {
      year <- current_year()
      if (year < 2022) {
        current_year(year + 1)
      } else {
        current_year(1998)
        session$sendCustomMessage(type = 'resetPlayButton', message = NULL)
      }
    }
    
    observe({
      if (!is.null(input$playPause) && input$playPause %% 2 == 1) {
        isolate({
          updateYear()
        })
        invalidateLater(1000, session)
      }
    })
    
    observe({
      updateSliderInput(session, "year", value = current_year())
    })
    
    output$title <- renderUI({
      HTML(paste0("<div style='font-size: 20px; font-weight: bold;'>", title, "</div>"))
    })
    
    output$footer <- renderUI({
      HTML(footer)
    })
    
    output$chart <- renderHighchart({
      data <- current_data()
      if (nrow(data) == 0) return(NULL)
      first_col_name <- names(data)[1]
      highchart() %>%
        hc_chart(type = "bar", zoomType = "xy", animation = list(duration = 1000)) %>%
        hc_xAxis(type = "category", categories = data[[first_col_name]]) %>%
        hc_yAxis(opposite = TRUE, tickPixelInterval = 150, title = list(text = yAxisTitle), max = max_value() + 1) %>%
        hc_plotOptions(series = list(
          animation = FALSE,
          groupPadding = 0,
          pointPadding = 0.1,
          borderWidth = 0,
          colorByPoint = FALSE,
          dataSorting = list(enabled = TRUE, matchByName = TRUE),
          dataLabels = list(enabled = TRUE, format = '{point.y:.2f}')
        )) %>%
        hc_series(list(
          name = as.character(current_year()),
          data = current_data_list()
        )) %>%
        hc_tooltip(
          useHTML = TRUE,
          headerFormat = "<b>{point.key}</b><br/>",
          pointFormatter = JS(sprintf("function() {
            var value = this.y;
            var formattedValue;
            if (value >= 1000) {
              formattedValue = value.toLocaleString(undefined, {minimumFractionDigits: 0, maximumFractionDigits: 0});
            } else {
              formattedValue = value.toLocaleString(undefined, {minimumFractionDigits: 1, maximumFractionDigits: 2});
            }
            return this.series.name + ': ' + formattedValue + ' %s';
          }", unit))
        ) %>%
        hc_legend(enabled = FALSE) %>%
        hc_responsive(rules = list(
          list(
            condition = list(maxWidth = 550),
            chartOptions = list(
              xAxis = list(visible = FALSE),
              plotOptions = list(
                series = list(
                  dataLabels = list(
                    list(enabled = TRUE, y = 8),
                    list(enabled = TRUE, format = '{point.name}', y = -8, style = list(fontWeight = 'normal', opacity = 0.7))
                  )
                )
              )
            )
          )
        ))
    })
    
    observeEvent(input$year, {
      current_year(input$year)
    })
  })
}

## File: module_data_table.R 
 library(DT)
library(dplyr)
library(tidyr)

# Function to render data tables using DT::renderDT
render_data_table <- function(table_id, chart_data, output) {
  output[[table_id]] <- DT::renderDT({
    data <- chart_data()
    if ("Year" %in% colnames(data)) {
      data$Year <- as.character(data$Year)
      first_column_name <- names(data)[1]
      data <- pivot_wider(data, names_from = !!sym(first_column_name), values_from = Value)
    }
    data <- data %>% mutate(across(where(is.numeric), ~ formatC(.x, format = "f", digits = 2)))
    datatable(as_tibble(data), options = list(paging = FALSE, scrollX = TRUE, dom = 'Bfrtip', buttons = c('copy', 'csv', 'excel', 'pdf', 'print')), rownames = FALSE)
  })
}

# Function to handle data download
handle_data_download <- function(download_id, chart_type, chart_data, input, output, year_input = NULL) {
  output[[download_id]] <- downloadHandler(
    filename = function() {
      if (!is.null(year_input)) {
        paste("Agricultural Emissions Data -", chart_type, min(input[[year_input]]), "to", max(input[[year_input]]), ".csv")
      } else {
        paste("Agricultural Emissions Data -", chart_type, ".csv")
      }
    },
    content = function(file) { 
      data <- chart_data()
      if ("Year" %in% colnames(data)) {
        first_column_name <- names(data)[1]
        data <- pivot_wider(data, names_from = !!sym(first_column_name), values_from = Value)
      }
      data <- data %>% mutate(across(where(is.numeric), ~ formatC(.x, format = "f", digits = 5)))
      write.csv(data, file, row.names = FALSE)
    }
  )
}

## File: module_information.R 
 # module_information.R

informationUI <- function(id) {
  ns <- NS(id)
  tagList(
    div(
      class = "container",
      tags$div(style = "font-size: 24px; font-weight: bold;", "Publications:"),  # Bigger and bold title
      tags$div(
        style = "margin-top: 20px;",
        tags$div(style = "font-size: 18px; font-weight: bold;", "Scottish Greenhouse Gas Statistics"),
        p(HTML('Official estimates of greenhouse gas emissions are available in the <a href="https://www.gov.scot/publications/scottish-greenhouse-gas-statistics-2022/documents/" target="_blank">Scottish Greenhouse Gas Statistics 2022</a> publication.')),
        tags$div(style = "font-size: 18px; font-weight: bold;", "Greenhouse Gas Inventory Reports"),
        p(a(href = "https://www.gov.scot/publications/estimated-dairy-emissions-mitigation-smart-inventory/", "Greenhouse gas inventory: estimated dairy emissions and their mitigation", target = "_blank")),
        tags$div(style = "font-size: 18px; font-weight: bold;", "Climate change evidence reports"),
        p(a(href = "https://www.gov.scot/publications/resas-climate-change-evidence-dairy-farmer-led-group/", "Dairy Farmer-led Group: climate change evidence", target = "_blank")),
        p(a(href = "https://www.gov.scot/publications/resas-climate-change-evidence-arable-farmer-led-group/", "Arable Farmer-led Group: climate change evidence", target = "_blank")),
        p(a(href = "https://www.gov.scot/publications/resas-climate-change-evidence-huc-farmer-led-group/", "Hill, Upland and Crofting Farmer-led Group: climate change evidence", target = "_blank")),
        p(a(href = "https://www.gov.scot/publications/pig-sector-flg-climate-change-greenhouse-gas-evidence/", "Pig Sector Farmer-Led Climate Change Group: climate change and greenhouse gas evidence", target = "_blank")),
        tags$div(style = "font-size: 18px; font-weight: bold;", "Greenhouse Gas Inventory Reports"),
        p(a(href = "https://www.gov.scot/publications/estimated-dairy-emissions-mitigation-smart-inventory/", "Greenhouse gas inventory: estimated dairy emissions and their mitigation", target = "_blank")),
        p(a(href = "https://www.gov.scot/publications/estimated-arable-emissions-mitigation-smart-inventory/", "Greenhouse gas inventory: estimated arable emissions and their mitigation", target = "_blank")),
        p(a(href = "https://www.gov.scot/publications/disaggregating-headline-smart-inventory-figures/", "Greenhouse gas emissions - agricultural: disaggregating headline figures", target = "_blank"))
      ),
      tags$div(style = "font-size: 24px; font-weight: bold; margin-top: 40px;", "Glossary:"),  # Bigger and bold title
      tags$div(
        style = "margin-top: 20px;",
        tags$div(style = "font-size: 18px; font-weight: bold;", "Carbon dioxide (CO2):"),
        p("Carbon dioxide is one of the main gases responsible for climate change. It is mostly emitted through the oxidation of carbon in fossil fuels, e.g. burning coal."),
        tags$div(style = "font-size: 18px; font-weight: bold;", "Greenhouse gas:"),
        p("A greenhouse gas is a gas which absorbs infrared radiation emitted from the surface of the Earth, helping to retain a portion of that energy in the atmosphere as heat."),
        tags$div(style = "font-size: 18px; font-weight: bold;", "LULUCF:"),
        p("Estimates of emissions and removals from land use, land use change and forestry (LULUCF) depend critically on assumptions made on the rate of loss or gain of carbon in Scotland’s carbon rich soils. In Scotland, LULUCF activities, taken as a whole, acts as a slight source in recent years although acted as a net sink between 2009-2017, absorbing more greenhouse gas emissions than it releases."),
        tags$div(style = "font-size: 18px; font-weight: bold;", "Methane (CH4):"),
        p("Methane is a greenhouse gas that is around 28 times more potent in the atmosphere than CO2 over a 100-year time horizon. Main sources include agriculture and landfill."),
        tags$div(style = "font-size: 18px; font-weight: bold;", "Metric tonne of carbon dioxide equivalent (MtCO₂e):"),
        p("Provides an estimate of total GHG emissions taking into account the different effects that different gases have on climate change, known as their global warming potential (GWP)."),
        tags$div(style = "font-size: 18px; font-weight: bold;", "Nitrous oxide (N2O):"),
        p("Nitrous oxide is a greenhouse gas that is around 265 times more potent in the atmosphere than CO2 over a 100-year time horizon. The main source is agricultural soil.")
      )
    )
  )
}

## File: module_line_chart.R 
 # Line Chart UI Module
lineChartUI <- function(id) {
  ns <- NS(id)
  tagList(
    htmlOutput(ns("title")),
    highchartOutput(ns("line_chart")),
    htmlOutput(ns("footer")),
    div(
      class = "note",
      style = "margin-top: 20px; padding: 10px; border-top: 1px solid #ddd;",
      HTML(
        "<strong>Note:</strong><ul>
          <li>To add or remove a series from the chart, select/deselect the variable from the sidebar menu.</li>
          <li>Select a year range by adjusting the slider on the sidebar or by zooming into the graph by clicking and dragging over an area you wish to see.</li>
          <li>You can see data values for a specific year by hovering your mouse over the line.</li>
        </ul>"
      )
    )
  )
}

lineChartServer <- function(id, chart_data, title, yAxisTitle, xAxisTitle, unit = "", footer, x_col, y_col) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    reactive_colors <- reactive({ assign_colors(chart_data(), preset_colors) })
    
    output$title <- renderUI({
      year_min <- min(as.numeric(chart_data()[[x_col]]), na.rm = TRUE)
      year_max <- max(as.numeric(chart_data()[[x_col]]), na.rm = TRUE)
      HTML(paste0("<div style='font-size: 20px; font-weight: bold;'>", title, ", ", year_min, " to ", year_max, "</div>"))
    })
    
    output$footer <- renderUI({
      HTML(footer)
    })
    
    output$line_chart <- renderHighchart({
      data <- chart_data()
      colors <- reactive_colors()
      group_column <- setdiff(names(data), c(x_col, y_col))[1] # Assuming only one group column
      
      hc <- highchart() %>%
        hc_chart(type = "line", zoomType = "xy") %>%
        hc_yAxis(title = list(text = yAxisTitle)) %>%
        hc_xAxis(title = list(text = xAxisTitle), type = "category", tickInterval = 5) %>%
        hc_plotOptions(line = list(colorByPoint = FALSE)) %>%
        hc_legend(align = "left", alignColumns = FALSE, layout = "horizontal") %>%
        hc_add_theme(thm)
      
      unique_groups <- unique(data[[group_column]])
      lapply(unique_groups, function(g) {
        series_data <- data[data[[group_column]] == g, ]
        hc <<- hc %>%
          hc_add_series(name = g, data = list_parse2(series_data %>% transmute(x = as.numeric(!!sym(x_col)), y = !!sym(y_col))), color = colors[[g]])
      })
      
      hc %>%
        hc_tooltip(
          useHTML = TRUE,
          headerFormat = "<b>{point.key}</b><br/>",
          pointFormatter = JS(sprintf("function() {
            var value = this.y;
            var formattedValue;
            if (value >= 1000) {
              formattedValue = value.toLocaleString(undefined, {minimumFractionDigits: 0, maximumFractionDigits: 0});
            } else {
              formattedValue = value.toLocaleString(undefined, {minimumFractionDigits: 1, maximumFractionDigits: 2});
            }
            return this.series.name + ': ' + formattedValue + ' %s';
          }", unit))
        )
    })
  })
}

## File: module_summary.R 
 #module_summary.R

library(shiny)
library(shinydashboard)
library(ggplot2)
library(dplyr)
library(highcharter)

# Function to create a small line plot for the value boxes
small_line_plot <- function(data, color) {
  ggplot(data, aes(x = Year, y = Value)) +
    geom_line(color = "#002d54") +
    theme_void() +
    theme(plot.background = element_rect(fill = "transparent", color = NA))
}

# Function to create an arrow for Year on Year change
create_yoy_arrow <- function(change) {
  if (is.na(change) || is.nan(change)) {
    icon("minus", style = "color: grey;")
  } else if (change > 0) {
    icon("arrow-up", style = "color: #2b9c93;")
  } else {
    icon("arrow-down", style = "color: #002d54;")
  }
}

# Helper function to format numbers with commas and appropriate decimal places
format_number <- function(number) {
  if (number %% 1 == 0) {
    format(number, big.mark = ",", scientific = FALSE)
  } else {
    format(round(number, 2), big.mark = ",", scientific = FALSE, nsmall = 2)
  }
}

# UI Module for Value Box
valueBoxUI <- function(id) {
  ns <- NS(id)
  uiOutput(ns("valueBox"))
}

# Server Module for Value Box
valueBoxServer <- function(id, data, category, industry, current_year, comparison_year, unit) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    reactive_data <- reactive({ data() %>% filter(!!sym(category) == !!industry(), Year %in% c(current_year(), comparison_year())) })
    
    output$valueBox <- renderUI({
      data_filtered <- reactive_data()
      current_value <- data_filtered %>% filter(Year == current_year()) %>% summarise(Value = sum(Value, na.rm = TRUE)) %>% pull(Value)
      comparison_value <- data_filtered %>% filter(Year == comparison_year()) %>% summarise(Value = sum(Value, na.rm = TRUE)) %>% pull(Value)
      yoy_change <- if (comparison_value == 0 || is.na(comparison_value)) NA else ((current_value - comparison_value) / comparison_value) * 100
      
      box(
        class = "value-box",
        title = NULL,
        width = 12,
        solidHeader = TRUE,
        div(
          style = "display: flex; flex-direction: column; justify-content: space-between; height: 100%; padding: 5px;",
          div(
            style = "flex: 1; margin-bottom: 5px;",
            h5(class = "value-box-title", industry()),
            div(
              style = "display: flex; align-items: baseline; margin-bottom: 5px;",
              h3(format_number(current_value), style = "margin: 0;"),
              span(unit, class = "value-box-unit")
            ),
            div(
              style = "display: flex; align-items: center; margin-bottom: 5px;",
              create_yoy_arrow(yoy_change),
              span(class = "value-box-yoy", ifelse(is.na(yoy_change), "NA", sprintf("%+.2f%% %d vs. %d", yoy_change, current_year(), comparison_year())), style = ifelse(yoy_change > 0, "color: #2b9c93; margin-left: 5px;", "color: #002d54; margin-left: 5px;"))
            )
          ),
          div(
            style = "margin-top: 10px;",  # Ensure sparkline is below the text
            plotOutput(ns("sparkline"), height = "30px", width = "100%")
          )
        )
      )
    })
    
    output$sparkline <- renderPlot({
      small_line_plot(data() %>% filter(!!sym(category) == !!industry()), "#28a745")
    })
  })
}



# UI Module for Chart
chartUI <- function(id, title) {
  ns <- NS(id)
  box(
    title = span(class = "box-title", title),
    width = 12,
    solidHeader = TRUE,
    div(class = "box-content", highchartOutput(ns("chartOutput"), height = "300px"))
  )
}


# Server Module for Line Chart on Summary Page
summaryLineChartServer <- function(id, data, unit = "") {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    
    output$chartOutput <- renderHighchart({
      summary_line_data <- data()
      variable_col <- names(summary_line_data)[1]  # Get the first column name, which is the variable name
      
      series_list <- lapply(unique(summary_line_data[[variable_col]]), function(variable) {
        df <- summary_line_data %>% filter(!!sym(variable_col) == variable)
        list(
          name = variable,
          data = df %>% select(Year, Value) %>% list_parse2()
        )
      })
      
      highchart() %>%
        hc_chart(type = "line", zoomType = "xy") %>%
        hc_xAxis(categories = unique(summary_line_data$Year)) %>%
        hc_yAxis(title = list(text = unit)) %>%
        hc_legend(align = "left", alignColumns = FALSE, layout = "horizontal") %>%
        hc_plotOptions(line = list(marker = list(enabled = FALSE))) %>%  # Disable markers
        hc_tooltip(
          useHTML = TRUE,
          headerFormat = "<b>{point.key}</b><br/>",
          pointFormatter = JS(sprintf("function() {
            var value = this.y;
            var formattedValue;
            if (value >= 1000) {
              formattedValue = value.toLocaleString(undefined, {minimumFractionDigits: 0, maximumFractionDigits: 0});
            } else {
              formattedValue = value.toLocaleString(undefined, {minimumFractionDigits: 1, maximumFractionDigits: 2});
            }
            return this.series.name + ': ' + formattedValue + ' %s';
          }", unit))
        ) %>%
        hc_add_theme(thm) %>%
        hc_add_series_list(series_list)
    })
  })
}

# Server Module for Pie Chart
summaryPieChartServer <- function(id, data, current_year, category, unit) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    
    output$chartOutput <- renderHighchart({
      pie_data <- data() %>% filter(Year == current_year() & !!sym(category) != "Total") %>% 
        group_by(!!sym(category)) %>% summarise(Value = sum(Value, na.rm = TRUE))
      
      highchart() %>%
        hc_chart(type = "pie") %>%
        hc_series(list(data = list_parse(pie_data %>% transmute(name = !!sym(category), y = Value)))) %>%
        hc_plotOptions(pie = list(
          dataLabels = list(enabled = FALSE),
          showInLegend = TRUE
        )) %>%
        hc_tooltip(
          useHTML = TRUE,
          pointFormat = sprintf(' {point.y:.2f} %s ({point.percentage:.2f}%%)', unit)
        )
    })
  })
}



# Server Module for Bar Chart
summaryBarChartServer <- function(id, data, current_year, comparison_year, category, unit = "") {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    output$chartOutput <- renderHighchart({
      bar_data <- data() %>% filter(Year == current_year() & !!sym(category) != "Total") %>% group_by(!!sym(category)) %>% summarise(Value = sum(Value, na.rm = TRUE))
      line_data <- data() %>% filter(Year == comparison_year() & !!sym(category) != "Total") %>% group_by(!!sym(category)) %>% summarise(Value = sum(Value, na.rm = TRUE))
      
      colors <- c("#002d54", "#2b9c93", "#6a2063", "#e5682a", "#0b4c0b", "#5d9f3c", "#592c20", "#ca72a2")
      
      highchart() %>%
        hc_chart(type = "bar") %>%
        hc_xAxis(categories = bar_data[[category]]) %>%
        hc_yAxis(title = list(text = unit)) %>%
        hc_add_series(
          name = as.character(current_year()), 
          data = bar_data$Value, 
          type = "bar", 
          colorByPoint = TRUE, 
          colors = colors
        ) %>%
        hc_add_series(
          name = as.character(comparison_year()), 
          data = line_data$Value, 
          type = "scatter", 
          color = "#ff0000", 
          marker = list(enabled = TRUE, symbol = "circle", lineWidth = 2, radius = 3)
        ) %>%
        hc_plotOptions(series = list(groupPadding = 0, pointPadding = 0.1, borderWidth = 0)) %>%
        hc_tooltip(
          useHTML = TRUE,
          shared = TRUE,
          pointFormatter = JS(sprintf("function() {
            var value = this.y;
            var formattedValue;
            if (value >= 1000) {
              formattedValue = value.toLocaleString(undefined, {minimumFractionDigits: 0, maximumFractionDigits: 0});
            } else {
              formattedValue = value.toLocaleString(undefined, {minimumFractionDigits: 1, maximumFractionDigits: 2});
            }
            return this.series.name + ': ' + formattedValue + ' %s';
          }", unit))
        ) %>%
        hc_add_theme(thm)
    })
  })
}


# Function to get top industries
get_industry <- function(index, data, current_year, first_col_name) {
  reactive({
    industries <- data() %>%
      filter(Year == current_year() & !!sym(first_col_name) != "Total") %>%
      group_by(!!sym(first_col_name)) %>%
      summarise(Value = sum(Value, na.rm = TRUE)) %>%
      arrange(desc(Value)) %>%
      slice_head(n = 3) %>%
      pull(!!sym(first_col_name))
    if (length(industries) >= index) {
      industries[index]
    } else {
      NA
    }
  })
}

## File: options.R 
 ##options.R

library(shiny)
library(highcharter)
library(tidyverse)
library(shinyWidgets)
library(shinythemes)
library(rsconnect)
library(png)
library(htmltools)
library(DT)
library(shinyjs)
library(RColorBrewer)
library(shinyjs)


# Highchart options
hcoptslang <- getOption("highcharter.lang")
hcoptslang$thousandsSep <- ","
hcoptslang$numericSymbols <- " "
options(highcharter.lang = hcoptslang)

# Load the theme
thm <- source("hc_theme.R")$value

# Load the .RData file containing the datasets
load("ghg_data.RData")
load("census_data.RData")
load("crops_data.RData")
load("total_animals.RData")
load("module_2023.RData")


# Preset list of colors
preset_colors <- c("#002d54", "#2b9c93", "#6a2063", "#e5682a", "#0b4c0b", "#5d9f3c", "#592c20", "#ca72a2")

# Function to assign colors to variables
assign_colors <- function(data, colors) {
  first_col_name <- names(data)[1]
  variables <- unique(data[[first_col_name]])
  setNames(colors[1:length(variables)], variables)
}

safe_as_numeric <- function(x) {
  suppressWarnings({
    result <- as.numeric(x)
    if (is.na(result) && !is.na(x)) {
      return(NA_real_)
    }
    return(result)
  })
}

## File: server.R 
 # server.R
# Source the necessary modules for server logic
source("module_subsector_emissions.R")
source("module_total_emissions.R")
source("module_gas_emissions.R")
source("module_fertiliser_usage.R")
source("module_map.R")
source("module_employees.R")
source("module_legal_responsibility.R")
source("module_land_use_summary.R")
source("module_farm_types.R")
source("module_occupiers.R")
source("module_owned_land.R")
source("module_cattle.R")
source("module_sheep.R")
source("module_pigs.R")
source("module_poultry.R")
source("module_other_animals.R")
source("module_cereals.R")
source("module_oilseed.R")
source("module_potatoes.R")
source("module_beans.R")
source("module_stockfeeding.R")
source("module_human_vegetables.R")
source("module_fruit.R")
source("home.R")

server <- function(input, output, session) {
  # Maintain selected tab state based on URL query parameters
  observe({
    query <- parseQueryString(session$clientData$url_search)
    page <- query$page
    if (!is.null(page)) {
      updateTabsetPanel(session, "navbar", selected = page)
    }
  })
  
  observeEvent(input$navbar, {
    query <- parseQueryString(session$clientData$url_search)
    page <- query$page
    if (is.null(page) || input$navbar != page) {
      if (input$navbar != "home") {
        updateQueryString(paste0("?page=", input$navbar), mode = "push")
      }
    }
  })
  
  
  
  subsectorEmissionsServer("subsector")
  totalEmissionsServer("total")
  gasEmissionsServer("gas")
  fertiliserUsageServer("fertiliser")
  employeesMapServer("employees")
  landUseSummaryServer("land_use")
  legalResponsibilityServer("legal_responsibility")
  farmTypesServer("farm_types")
  occupiersServer("occupiers")
  ownedLandServer("owned_land")
  cattleServer("cattle_module")
  sheepServer("sheep_module")
  pigsServer("pigs_module")
  poultryServer("poultry_module")
  otherAnimalsServer("other_animals_module")
  cerealsServer("cereals_module")
  oilseedServer("oilseed_module")
  potatoesServer("potatoes_module")
  beansServer("beans_module")
  stockfeedingServer("stockfeeding_module")
  humanVegetablesServer("human_vegetables_module")
  fruitServer("fruit_module")
  homeServer("home")
  animalsSummaryServer("animals_summary_module")
}

## File: ui.R 
 source("options.R")
source("module_summary.R")
source("module_line_chart.R")
source("module_area_chart.R")
source("module_bar_chart.R")
source("module_timelapse_bar_chart.R")
source("module_data_table.R")
source("module_total_emissions.R")
source("module_subsector_emissions.R")
source("module_gas_emissions.R")
source("module_information.R")
source("module_fertiliser_usage.R")
source("module_map.R")
source("module_employees.R")
source("module_legal_responsibility.R")
source("module_farm_types.R")
source("module_occupiers.R")
source("module_land_use_summary.R")
source("module_owned_land.R")
source("module_cattle.R")
source("module_sheep.R")
source("module_pigs.R")
source("module_poultry.R")
source("module_other_animals.R")
source("module_cereals.R")
source("module_oilseed.R")
source("module_potatoes.R")
source("module_beans.R")
source("module_stockfeeding.R")
source("module_human_vegetables.R")
source("module_fruit.R")
source("home.R")
source("module_economy_summary.R")
source("module_animals_summary.R")
source("hc_theme.R")
source("utils.R")
library(shinyjs)
library(shinythemes)

create_footer <- function() {
  div(
    class = "footer",
    span("Last Updated: ", format(Sys.Date(), "%d/%m/%Y")),
    img(src = "sg.png", alt = "SG Logo", style = "height: 30px; margin-left: 10px;")
  )
}

# Integrate the home module into the main UI
ui <- fluidPage(
  useShinyjs(),  # Initialize shinyjs
  theme = shinytheme("flatly"),
  tags$head(
    tags$link(rel = "stylesheet", type = "text/css", href = "styles.css"),
    includeHTML("google-analytics.html"),
    tags$script(HTML("
      $(document).on('click', 'a[data-value=\"home\"]', function() {
        history.pushState(null, '', '/');
      });
    "))
  ),
  div(class = "container-fluid full-height",
      div(class = "content",
          navbarPage(
            title = div(
              tags$li(class = "nav-item", img(src = "RESAS Logo.png", class = "header-logo"))
            ),
            id = "navbar",
            windowTitle = "RESAS Agricultural Statistics Hub",  # Set the name for the browser tab
            tabPanel("Home", value = "home", homeUI("home")),  # Set this tabPanel as the default page
            navbarMenu("Structure",
                       tabPanel("Land Use", value = "land_use", landUseSummaryUI("land_use")),
                       tabPanel("Farm Types", value = "farm_types", farmTypesUI("farm_types")),
                       tabPanel("Employees", value = "employees", employeesMapUI("employees")),
                       tabPanel("Occupiers", value = "occupiers", occupiersUI("occupiers")),
                       tabPanel("Ownership Status", value = "owned_land", ownedLandUI("owned_land")),
                       tabPanel("Legal Responsibility", value = "legal_responsibility", legalResponsibilityUI("legal_responsibility"))
            ),
            navbarMenu("Agri-Environment",
                       tabPanel("Agriculture Emissions", value = "subsector", subsectorEmissionsUI("subsector")),
                       tabPanel("Industry Emissions", value = "total", totalEmissionsUI("total")),
                       tabPanel("Gas Emissions", value = "gas", gasEmissionsUI("gas")),
                       tabPanel("Fertiliser Usage", value = "fertiliser", fertiliserUsageUI("fertiliser")),
                       tabPanel("Further Information", value = "info", informationUI("info"))
            ),
            navbarMenu("Livestock",
                       tabPanel("Summary", value= "animals_summary_module", animalsSummaryUI("animals_summary_module")),
                       tabPanel("Cattle", value = "cattle_module", cattleUI("cattle_module")),
                       tabPanel("Sheep", value = "sheep_module", sheepUI("sheep_module")),
                       tabPanel("Pigs", value = "pigs_module", pigsUI("pigs_module")),
                       tabPanel("Poultry", value = "poultry_module", poultryUI("poultry_module")),
                       tabPanel("Other Animals", value = "other_animals_module", otherAnimalsUI("other_animals_module"))
            ),
            navbarMenu("Crops",
                       tabPanel("Cereals", value = "cereals_module", cerealsUI("cereals_module")),
                       tabPanel("Oilseed", value = "oilseed_module", oilseedUI("oilseed_module")),
                       tabPanel("Potatoes", value = "potatoes_module", potatoesUI("potatoes_module")),
                       tabPanel("Beans", value = "beans_module", beansUI("beans_module")),
                       tabPanel("Stockfeeding", value = "stockfeeding_module", stockfeedingUI("stockfeeding_module")),
                       tabPanel("Vegetables", value = "human_vegetables_module", humanVegetablesUI("human_vegetables_module")),
                       tabPanel("Fruit", value = "fruit_module", fruitUI("fruit_module"))
            ),
            navbarMenu("Economy",
                       tabPanel("Summary", value = "economy", economySummaryUI("economy"))
            )
          ),
          create_footer()
      )
  )
)

## File: www/styles.css 
 /* styles.css */

.chart-title {
  font-size: 30px !important;
  font-weight: bold !important;
  margin-bottom: 10px !important;
  font-family: 'Arial', sans-serif !important;
}

/* General styles */
.full-width {
  width: 100% !important;
}
.full-height {
  height: 100vh !important;
}
.navbar {
  margin-bottom: 5px !important;
}
.sidebar {
  width: 250px !important;
  padding: 10px !important;
  border-right: 1px solid #ddd !important;
  float: left !important;  /* Float to the left */
  height: calc(100vh - 65px) !important;  /* Adjust for header and reduced margin */
}
.main-panel {
  margin-left: 270px !important;
  padding: 10px !important;
  overflow: auto !important;  /* Enable scrolling for main content */
  height: calc(100vh - 65px) !important;  /* Adjust for header and reduced margin */
}
.header-logo {
  position: absolute !important;
  top: 0px !important;
  right: 0px !important;
  height: 60px !important;
}

.box {
  border: 1px solid #e3e3e3;
  background-color: white;
  margin: 0;
  padding: 10px;
}
.value-box {
  min-height: 160px !important;  /* Set a minimum height */
  text-align: left;
  box-shadow: 0 1px 2px rgba(0,0,0,0.1);
  margin: 0;
  padding: 0;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}

.value-box .inner {
  padding: 5px;
}

.value-box h3, .value-box h5 {
  margin: 0;
  color: #333;
}

.value-box h3 {
  font-size: 36px;
  font-weight: bold;
}

.value-box-units {
  font-size: 18px;
  margin-left: 5px;
  display: inline-block;
}

.value-box-title {
  font-size: 20px;
  margin-bottom: 5px;
  font-weight: bold;
}

.value-box-yoy {
  font-size: 24px;
  font-weight: bold;
}

.sparkline {
  width: 100%;
  height: 30px;
  margin-top: 10px;  /* Ensure sparkline is below the text */
}

.header-text {
  font-size: 24px;
  font-weight: bold;
  margin-bottom: 10px;
}
.box-title {
  font-size: 20px;
  font-weight: bold;
  margin-bottom: 0px;
}
.box-content {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  height: 100%;
}
.content, .row, .col {
  margin: 0;
  padding: 0;
}
.body {
  background-color: #f9f9f9;
  font-family: 'Arial', sans-serif;
  font-size: 16px;
  color: black; /* Set text color to black */
  line-height: 1.5;
}

html, body {
  height: 100%;
  margin: 0;
  padding: 0;
}

.container-fluid.full-height {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
}

.content {
  flex: 1 0 auto;
}

.footer {
  flex-shrink: 0;
  background-color: #ffffff;
  padding: 10px;
  text-align: center;
  border-top: 1px solid #dee2e6;
}

/* Apply default font size, family, and color to all common elements */
h1, h2, h3, h4, h5, p, div, span, a, li, table, th, td, input, button, select, textarea {
  font-family: Arial, sans-serif;
  font-size: 16px;
}

/* Set default font size, family, and color for Highcharts */
.highcharts-title,
.highcharts-subtitle,
.highcharts-axis-title,
.highcharts-axis-labels,
.highcharts-tooltip,
.highcharts-legend-item,
.highcharts-data-label {
  font-family: Arial, sans-serif !important;
  font-size: 16px !important;
  color: black !important; /* Set text color to black */
}

/* Slider colours */

/* Apply custom styles to all sliders */
.irs-single, .irs-bar-edge, .irs-bar {
  background: #002d54 !important;
  border-top: 1px solid #002d54 !important;
  border-bottom: 1px solid #002d54 !important;
}

/* Change the color of the number tags */
.irs-from, .irs-to, .irs-single {
  background: #002d54 !important;
  color: white !important;
  font-weight: bold !important;
}

/* Ensure grid text and min/max labels are also styled */
.irs-grid-text, .irs-min, .irs-max {
  color: #002d54 !important;
}

/* Remove bullet point from nav-item */
.navbar-nav > li.nav-item,
.navbar-nav > li {
  list-style-type: none;
  margin: 0;
  padding: 0;
}

/* Specific rule to remove bullet point */
.nav-item {
  list-style: none !important;
}

## File: module_subsector_emissions.R 
 source("module_summary.R")

# Data setup for Subsector Emissions
full_data_subsector <- reactive({ subsector_total })
units_subsector <- "MtCO₂e"

# UI for Subsector Emissions Module
subsectorEmissionsUI <- function(id) {
  ns <- NS(id)
  tagList(
    sidebarLayout(
      sidebarPanel(
        width = 3,
        conditionalPanel(
          condition = "input.tabs != 'Summary_Page'",
          ns = ns,
          uiOutput(ns("variable_select")),
          actionButton(ns("select_all_button"), "Select All"),
          actionButton(ns("deselect_all_button"), "Deselect All"),
          sliderInput(ns("year"), "Select year range", value = c(1990, 2022), min = 1990, max = 2022, step = 1, sep = "", ticks = TRUE)
        ),
        conditionalPanel(
          condition = "input.tabs == 'Summary_Page'",
          ns = ns,
          sliderInput(ns("summary_current_year_subsector"), "Current Year", min = 1990, max = 2022, value = 2022, step = 1, sep = ""),
          sliderInput(ns("summary_comparison_year_subsector"), "Comparison Year", min = 1990, max = 2022, value = 2021, step = 1, sep = "")
        )
      ),
      
      mainPanel(
        id = ns("mainpanel"),
        width = 9,
        tabsetPanel(
          id = ns("tabs"),
          tabPanel("Summary Page",
                   value = "Summary_Page",
                   fluidRow(
                     column(width = 12, div(class = "header-text", "Top 3 Emitting Subsectors:"))
                   ),
                   fluidRow(
                     column(width = 4, valueBoxUI(ns("totalIndustry1_subsector")), style = "padding-right: 0; padding-left: 0;"),
                     column(width = 4, valueBoxUI(ns("totalIndustry2_subsector")), style = "padding-right: 0; padding-left: 0;"),
                     column(width = 4, valueBoxUI(ns("totalIndustry3_subsector")), style = "padding-right: 0; padding-left: 0;")
                   ),
                   fluidRow(
                     column(width = 12, div(class = "header-text", "Summary Analysis:"))
                   ),
                   fluidRow(
                     column(width = 4, valueBoxUI(ns("totalValue_subsector")), style = "padding-right: 0; padding-left: 0;"),
                     column(width = 4, chartUI(ns("industryPieChart_subsector"), "Subsector Breakdown"), style = "padding-right: 0; padding-left: 0;"),
                     column(width = 4, chartUI(ns("industryBarChart_subsector"), "Emissions by Category"), style = "padding-right: 0; padding-left: 0;")
                   )
          ),
          tabPanel("Timelapse", timelapseBarChartUI(ns("timelapse_bar")), value = "Timelapse"),
          tabPanel("Breakdown", highchartOutput(ns("breakdown")), value = "Breakdown"),
          tabPanel("Time Series", lineChartUI(ns("line")), value = "Line_Chart"),
          tabPanel("Area Chart", areaChartUI(ns("area")), value = "Area_Chart"),
          tabPanel("Data Table",
                   DTOutput(ns("data_table")),
                   downloadButton(ns("downloadData"), "Download Data"),
                   value = "Data_Table")
        )
      )
    )
  )
}
# File: module_subsector_emissions.R

# Server for Subsector Emissions Module
subsectorEmissionsServer <- function(id) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    chart_data <- reactive({
      data <- subsector_total
      data <- data %>% filter(Year >= min(input$year) & Year <= max(input$year))
      if (!is.null(input$variables)) {
        data <- data %>%
          filter(Subsector %in% input$variables)
      }
      data
    })
    
    output$variable_select <- renderUI({
      choices <- unique(subsector_total$Subsector)
      selected <- setdiff(choices, "Total")
      checkboxGroupInput(ns("variables"), "Choose variables to add to chart", choices = choices, selected = selected)
    })
    
    observeEvent(input$select_all_button, {
      updateCheckboxGroupInput(session, ns("variables"), selected = setdiff(unique(subsector_total$Subsector), "Total"))
    })
    
    observeEvent(input$deselect_all_button, {
      updateCheckboxGroupInput(session, ns("variables"), selected = character(0))
    })
    
    areaChartServer(
      id = "area",
      chart_data = chart_data,
      title = "Agricultural Emissions by Subsector in Scotland",
      yAxisTitle = "Emissions (MtCO₂e)",
      xAxisTitle = "Year",
      unit = "MtCO₂e",
      footer = '<div style="font-size: 16px; font-weight: bold;">Source: Scottish agriculture greenhouse gas emissions and nitrogen use 2022-23.</div>',
      x_col = "Year",
      y_col = "Value"
    )
    
    timelapseBarChartServer(
      id = "timelapse_bar",
      chart_data = chart_data,
      title = "Agricultural Greenhouse Gas Emissions Timelapse",
      yAxisTitle = "Emissions (MtCO₂e)",
      xAxisTitle = "Year",
      unit = "MtCO₂e",
      footer = '<div style="font-size: 16px; font-weight: bold;">Source: Scottish agriculture greenhouse gas emissions and nitrogen use 2022-23.</div>',
      x_col = "Year",
      y_col = "Value"
    )
    
    lineChartServer(
      id = "line",
      chart_data = chart_data,
      title = "Agricultural Greenhouse Gas Emissions by Subsector in Scotland",
      yAxisTitle = "Emissions (MtCO₂e)",
      xAxisTitle = "Year",
      unit = "MtCO₂e",
      footer = '<div style="font-size: 16px; font-weight: bold;">Source: Scottish agriculture greenhouse gas emissions and nitrogen use 2022-23.</div>',
      x_col = "Year",
      y_col = "Value"
    )
    
    # Breakdown chart server logic
    output$breakdown <- renderHighchart({
      data_long <- subsector_source %>%
        pivot_longer(cols = -Source, names_to = "Subsector", values_to = "Value") %>%
        arrange(match(Source, rev(unique(Source))))
      
      unique_sources <- unique(data_long$Source)
      color_map <- setNames(rev(preset_colors)[1:length(unique_sources)], unique_sources)
      
      series_data <- lapply(unique_sources, function(source) {
        list(
          name = source,
          data = data_long %>%
            filter(Source == source) %>%
            arrange(match(Subsector, unique(data_long$Subsector))) %>%
            pull(Value),
          color = color_map[[source]]
        )
      })
      
      highchart() %>%
        hc_chart(type = "bar", zoomType = "xy") %>%
        hc_xAxis(categories = unique(data_long$Subsector), 
                 labels = list(style = list(color = "#000000", fontSize = '16px', fontFamily = 'Arial'))) %>%
        hc_yAxis(title = list(text = "Emissions (MtCO₂e)", style = list(color = "#000000", fontSize = '16px', fontFamily = 'Arial')),
                 labels = list(style = list(color = "#000000", fontSize = '16px', fontFamily = 'Arial')),
                 tickInterval = 0.5) %>%
        hc_plotOptions(bar = list(
          stacking = "normal",
          groupPadding = 0,
          pointPadding = 0.1,
          borderWidth = 0
        )) %>%
        hc_tooltip(
          useHTML = TRUE,
          headerFormat = "<span style='font-size: 16px; font-family: Arial'><b>{point.key}</b></span><br/>",
          pointFormatter = JS("function() {
            var value = this.y;
            var formattedValue;
            if (value >= 1000) {
              formattedValue = value.toLocaleString(undefined, {minimumFractionDigits: 0, maximumFractionDigits: 0});
            } else {
              formattedValue = value.toLocaleString(undefined, {minimumFractionDigits: 1, maximumFractionDigits: 2});
            }
            return this.series.name + ': ' + formattedValue + ' MtCO₂e';
          }"),
          style = list(fontSize = "16px", fontFamily = "Arial")
        ) %>%
        hc_legend(
          align = "right", 
          verticalAlign = "middle", 
          layout = "vertical",
          itemStyle = list(fontSize = '16px', fontFamily = 'Arial', fontWeight = 'normal')
        ) %>%
        hc_add_series_list(series_data)
    })
    
    render_data_table(
      table_id = "data_table",
      chart_data = chart_data,
      output = output
    )
    
    handle_data_download(
      download_id = "downloadData",
      chart_type = "Subsector",
      chart_data = chart_data,
      input = input,
      output = output,
      year_input = "year"
    )
    
    current_year <- reactive({ input$summary_current_year_subsector })
    comparison_year <- reactive({ input$summary_comparison_year_subsector })
    
    first_col_name <- "Subsector"
    
    valueBoxServer(
      id = "totalIndustry1_subsector",
      data = full_data_subsector,
      category = first_col_name,
      industry = get_industry(1, full_data_subsector, current_year, first_col_name),
      current_year = current_year,
      comparison_year = comparison_year,
      unit = "MtCO₂e"
    )
    valueBoxServer(
      id = "totalIndustry2_subsector",
      data = full_data_subsector,
      category = first_col_name,
      industry = get_industry(2, full_data_subsector, current_year, first_col_name),
      current_year = current_year,
      comparison_year = comparison_year,
      unit = "MtCO₂e"
    )
    valueBoxServer(
      id = "totalIndustry3_subsector",
      data = full_data_subsector,
      category = first_col_name,
      industry = get_industry(3, full_data_subsector, current_year, first_col_name),
      current_year = current_year,
      comparison_year = comparison_year,
      unit = "MtCO₂e"
    )
    valueBoxServer(
      id = "totalValue_subsector",
      data = full_data_subsector,
      category = first_col_name,
      industry = reactive("Total"),
      current_year = current_year,
      comparison_year = comparison_year,
      unit = "MtCO₂e"
    )
    summaryPieChartServer(
      id = "industryPieChart_subsector",
      data = full_data_subsector,
      current_year = current_year,
      category = first_col_name,
      unit = "MtCO₂e"
    )
    summaryBarChartServer(
      id = "industryBarChart_subsector",
      data = full_data_subsector,
      current_year = current_year,
      comparison_year = comparison_year,
      category = first_col_name,
      unit = "MtCO₂e"
    )
    
  })
}

# Demo function to test the module
subsector_demo <- function() {
  ui <- fluidPage(subsectorEmissionsUI("subsector_test"))
  server <- function(input, output, session) {
    subsectorEmissionsServer("subsector_test")
  }
  shinyApp(ui, server)
}

subsector_demo()

## File: module_total_emissions.R 
 full_data_total <- reactive({ national_total })


# UI for Total Emissions Module
totalEmissionsUI <- function(id) {
  ns <- NS(id)
  tagList(
    sidebarLayout(
      sidebarPanel(
        width = 3,
        conditionalPanel(
          condition = "input.tabs != 'Summary_Page'",
          ns = ns,
          uiOutput(ns("variable_select")),
          actionButton(ns("select_all_button"), "Select All"),
          actionButton(ns("deselect_all_button"), "Deselect All"),
          sliderInput(ns("year"), "Select year range", value = c(1990, 2022), min = 1990, max = 2022, step = 1, sep = "", ticks = TRUE)
        ),
        conditionalPanel(
          condition = "input.tabs == 'Summary_Page'",
          ns = ns,
          sliderInput(ns("summary_current_year_total"), "Current Year", min = 1990, max = 2022, value = 2022, step = 1, sep = ""),
          sliderInput(ns("summary_comparison_year_total"), "Comparison Year", min = 1990, max = 2022, value = 2021, step = 1, sep = "")
        )
      ),
      mainPanel(
        id = ns("mainpanel"),
        width = 9,
        tabsetPanel(
          id = ns("tabs"),
          tabPanel("Summary Page",
                   value = "Summary_Page",
                   fluidRow(
                     column(width = 12, div(class = "header-text", "Top 3 Emitting Industries:"))
                   ),
                   fluidRow(
                     column(width = 4, valueBoxUI(ns("totalIndustry1_total")), style = "padding-right: 0; padding-left: 0;"),
                     column(width = 4, valueBoxUI(ns("totalIndustry2_total")), style = "padding-right: 0; padding-left: 0;"),
                     column(width = 4, valueBoxUI(ns("totalIndustry3_total")), style = "padding-right: 0; padding-left: 0;")
                   ),
                   fluidRow(
                     column(width = 12, div(class = "header-text", "Summary Analysis:"))
                   ),
                   fluidRow(
                     column(width = 4, valueBoxUI(ns("totalValue_total")), style = "padding-right: 0; padding-left: 0;"),
                     column(width = 4, chartUI(ns("industryLineChart_total"), "Industry Emissions Over Time"), style = "padding-right: 0; padding-left: 0;"),
                     column(width = 4, chartUI(ns("industryBarChart_total"), "Emissions by Category"), style = "padding-right: 0; padding-left: 0;")
                   )
          ),
          tabPanel("Timelapse", timelapseBarChartUI(ns("bar")), value = "Timelapse"),
          tabPanel("Time Series", lineChartUI(ns("line")), value = "Line_Chart"),
          tabPanel("Area Chart", areaChartUI(ns("area")), value = "Area_Chart"),
          tabPanel("Data Table",
                   DTOutput(ns("data_table")),
                   downloadButton(ns("downloadData"), "Download Data"),
                   value = "Data_Table")
        )
      )
    )
  )
}

# Server for Total Emissions Module
totalEmissionsServer <- function(id) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    
    # Reactive data for line chart
    line_chart_data <- reactive({
      data <- national_total
      data <- data %>% filter(Year >= min(input$year) & Year <= max(input$year))
      data <- data %>% filter(Industry %in% c("Agriculture", "Total"))
      data
    })
    
    # Reactive data for other charts
    chart_data <- reactive({
      data <- national_total
      data <- data %>% filter(Year >= min(input$year) & Year <= max(input$year))
      if (!is.null(input$variables)) {
        data <- data %>%
          filter(Industry %in% input$variables)
      }
      data
    })
    
    output$variable_select <- renderUI({
      choices <- unique(national_total$Industry)
      selected <- setdiff(choices, "Total")
      checkboxGroupInput(ns("variables"), "Choose variables to add to chart", choices = choices, selected = selected)
    })
    
    observeEvent(input$select_all_button, {
      updateCheckboxGroupInput(session, ns("variables"), selected = setdiff(unique(national_total$Industry), "Total"))
    })
    
    observeEvent(input$deselect_all_button, {
      updateCheckboxGroupInput(session, ns("variables"), selected = character(0))
    })
    
    areaChartServer(
      id = "area",
      chart_data = chart_data,
      title = "National Greenhouse Gas Emissions by Source in Scotland",
      yAxisTitle = "Emissions (MtCO₂e)",
      xAxisTitle = "Year",
      unit = "MtCO₂e",
      footer = '<div style="font-size: 16px;"><a href="https://www.gov.scot/publications/scottish-greenhouse-gas-statistics-2022/documents/">Source: Scottish Greenhouse Gas Statistics 2022</a></div>',
      x_col = "Year",
      y_col = "Value"
    )
    
    timelapseBarChartServer(
      id = "bar",
      chart_data = chart_data,
      title = "National Greenhouse Gas Emissions Timelapse",
      yAxisTitle = "Emissions (MtCO₂e)",
      xAxisTitle = "Year",
      unit = "MtCO₂e",
      footer = '<div style="font-size: 16px;"><a href="https://www.gov.scot/publications/scottish-greenhouse-gas-statistics-2022/documents/">Source: Scottish Greenhouse Gas Statistics 2022</a></div>',
      x_col = "Year",
      y_col = "Value"
    )
    
    lineChartServer(
      id = "line",
      chart_data = chart_data,
      title = "National Greenhouse Gas Emissions by Source in Scotland",
      yAxisTitle = "Emissions (MtCO₂e)",
      xAxisTitle = "Year",
      unit = "MtCO₂e",
      footer = '<div style="font-size: 16px;"><a href="https://www.gov.scot/publications/scottish-greenhouse-gas-statistics-2022/documents/">Source: Scottish Greenhouse Gas Statistics 2022</a></div>',
      x_col = "Year",
      y_col = "Value"
    )
    
    render_data_table(
      table_id = "data_table",
      chart_data = chart_data,
      output = output
    )
    
    handle_data_download(
      download_id = "downloadData",
      chart_type = "National",
      chart_data = chart_data,
      input = input,
      output = output,
      year_input = "year"
    )
    
    # Summary Module
    current_year <- reactive({ input$summary_current_year_total })
    comparison_year <- reactive({ input$summary_comparison_year_total })
    
    first_col_name <- "Industry"
    
    
    valueBoxServer(
      id = "totalIndustry1_total",
      data = full_data_total,
      category = first_col_name,
      industry = get_industry(1, full_data_total, current_year, first_col_name),
      current_year = current_year,
      comparison_year = comparison_year,
      unit = "MtCO₂e"
    )
    valueBoxServer(
      id = "totalIndustry2_total",
      data = full_data_total,
      category = first_col_name,
      industry = get_industry(2, full_data_total, current_year, first_col_name),
      current_year = current_year,
      comparison_year = comparison_year,
      unit = "MtCO₂e"
    )
    valueBoxServer(
      id = "totalIndustry3_total",
      data = full_data_total,
      category = first_col_name,
      industry = get_industry(3, full_data_total, current_year, first_col_name),
      current_year = current_year,
      comparison_year = comparison_year,
      unit = "MtCO₂e"
    )
    valueBoxServer(
      id = "totalValue_total",
      data = full_data_total,
      category = first_col_name,
      industry = reactive("Total"),
      current_year = current_year,
      comparison_year = comparison_year,
      unit = "MtCO₂e"
    )
    summaryLineChartServer(
      id = "industryLineChart_total",
      data = line_chart_data,
      unit = "MtCO₂e")

    summaryBarChartServer(
      id = "industryBarChart_total",
      data = full_data_total,
      current_year = current_year,
      comparison_year = comparison_year,
      category = first_col_name,
      unit = "MtCO₂e"
    )
    
    })
}

# Demo function to test the module
total_demo <- function() {
  ui <- fluidPage(totalEmissionsUI("total_test"))
  server <- function(input, output, session) {
    totalEmissionsServer("total_test")
  }
  shinyApp(ui, server)
}

total_demo()

## File: module_gas_emissions.R 
 full_data_gas <- reactive({ agri_gas })

gasEmissionsUI <- function(id) {
  ns <- NS(id)
  tagList(
    sidebarLayout(
      sidebarPanel(
        width = 3,
        conditionalPanel(
          condition = "input.tabs != 'Summary_Page'",
          ns = ns,
          uiOutput(ns("variable_select")),
          sliderInput(ns("year"), "Select year range", value = c(1990, 2022), min = 1990, max = 2022, step = 1, sep = "", ticks = TRUE)
        ),
        conditionalPanel(
          condition = "input.tabs == 'Summary_Page'",
          ns = ns,
          sliderInput(ns("summary_current_year_gas"), "Current Year", min = 1990, max = 2022, value = 2022, step = 1, sep = ""),
          sliderInput(ns("summary_comparison_year_gas"), "Comparison Year", min = 1990, max = 2022, value = 2021, step = 1, sep = "")
        )
      ),
      mainPanel(
        id = ns("mainpanel"),
        width = 9,
        tabsetPanel(
          id = ns("tabs"),
          tabPanel("Summary Page",
                   value = "Summary_Page",
                   fluidRow(
                     column(width = 12, div(class = "header-text", "Top 3 Gases Emitted:"))
                   ),
                   fluidRow(
                     column(width = 4, valueBoxUI(ns("totalIndustry1_gas")), style = "padding-right: 0; padding-left: 0;"),
                     column(width = 4, valueBoxUI(ns("totalIndustry2_gas")), style = "padding-right: 0; padding-left: 0;"),
                     column(width = 4, valueBoxUI(ns("totalIndustry3_gas")), style = "padding-right: 0; padding-left: 0;")
                   ),
                   fluidRow(
                     column(width = 12, div(class = "header-text", "Summary Analysis:"))
                   ),
                   fluidRow(
                     column(width = 4, valueBoxUI(ns("totalValue_gas")), style = "padding-right: 0; padding-left: 0;"),
                     column(width = 4, chartUI(ns("industryPieChart_gas"), "Gas Breakdown"), style = "padding-right: 0; padding-left: 0;"),
                     column(width = 4, chartUI(ns("industryBarChart_gas"), "Emissions by Category"), style = "padding-right: 0; padding-left: 0;")
                   )
          ),
          tabPanel("Timelapse", timelapseBarChartUI(ns("bar")), value = "Timelapse"),
          tabPanel("Time Series", lineChartUI(ns("line")), value = "Line_Chart"),
          tabPanel("Area Chart", areaChartUI(ns("area")), value = "Area_Chart"),
          tabPanel("Data Table",
                   DTOutput(ns("data_table")),
                   downloadButton(ns("downloadData"), "Download Data"),
                   value = "Data_Table")
        )
      )
    )
  )
}

gasEmissionsServer <- function(id) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    chart_data <- reactive({
      data <- agri_gas
      data <- data %>% filter(Year >= min(input$year) & Year <= max(input$year))
      if (!is.null(input$variables)) {
        data <- data %>%
          filter(Gas %in% input$variables)
      }
      data
    })
    
    output$variable_select <- renderUI({
      choices <- unique(agri_gas$Gas)
      selected <- setdiff(choices, "Total")
      checkboxGroupInput(ns("variables"), "Choose variables to add to chart", choices = choices, selected = selected)
    })
    
    
    areaChartServer(
      id = "area",
      chart_data = chart_data,
      title = "Agricultural Greenhouse Gas Emissions Breakdown in Scotland",
      yAxisTitle = "Emissions (MtCO₂e)",
      xAxisTitle = "Year",
      unit = "MtCO₂e",
      footer = '<div style="font-size: 16px; font-weight: bold;">Source: Scottish agriculture greenhouse gas emissions and nitrogen use 2022-23.</div>',
      x_col = "Year",
      y_col = "Value"
    )
    
    timelapseBarChartServer(
      id = "bar",
      chart_data = chart_data,
      title = "Agricultural Greenhouse Gas Emissions Breakdown Timelapse",
      yAxisTitle = "Emissions (MtCO₂e)",
      xAxisTitle = "Year",
      unit = "MtCO₂e",
      footer = '<div style="font-size: 16px; font-weight: bold;">Source: Scottish agriculture greenhouse gas emissions and nitrogen use 2022-23.</div>',
      x_col = "Year",
      y_col = "Value"
    )
    
    lineChartServer(
      id = "line",
      chart_data = chart_data,
      title = "Agricultural Greenhouse Gas Emissions Breakdown in Scotland",
      yAxisTitle = "Emissions (MtCO₂e)",
      xAxisTitle = "Year",
      unit = "MtCO₂e",
      footer = '<div style="font-size: 16px; font-weight: bold;">Source: Scottish agriculture greenhouse gas emissions and nitrogen use 2022-23.</div>',
      x_col = "Year",
      y_col = "Value"
    )
    
    render_data_table(
      table_id = "data_table",
      chart_data = chart_data,
      output = output
    )
    
    handle_data_download(
      download_id = "downloadData",
      chart_type = "Gas",
      chart_data = chart_data,
      input = input,
      output = output,
      year_input = "year"
    )
    
    # Summary Module
    current_year <- reactive({ input$summary_current_year_gas })
    comparison_year <- reactive({ input$summary_comparison_year_gas })
    
    first_col_name <- "Gas"
    
    valueBoxServer(
      id = "totalIndustry1_gas",
      data = full_data_gas,
      category = first_col_name,
      industry = get_industry(1, full_data_gas, current_year, first_col_name),
      current_year = current_year,
      comparison_year = comparison_year,
      unit = "MtCO₂e"
    )
    valueBoxServer(
      id = "totalIndustry2_gas",
      data = full_data_gas,
      category = first_col_name,
      industry = get_industry(2, full_data_gas, current_year, first_col_name),
      current_year = current_year,
      comparison_year = comparison_year,
      unit = "MtCO₂e"
    )
    valueBoxServer(
      id = "totalIndustry3_gas",
      data = full_data_gas,
      category = first_col_name,
      industry = get_industry(3, full_data_gas, current_year, first_col_name),
      current_year = current_year,
      comparison_year = comparison_year,
      unit = "MtCO₂e"
    )
    valueBoxServer(
      id = "totalValue_gas",
      data = full_data_gas,
      category = first_col_name,
      industry = reactive("Total"),
      current_year = current_year,
      comparison_year = comparison_year,
      unit = "MtCO₂e"
    )
    summaryPieChartServer(
      id = "industryPieChart_gas",
      data = full_data_gas,
      current_year = current_year,
      category = first_col_name,
      unit = "MtCO₂e"
    )
    summaryBarChartServer(
      id = "industryBarChart_gas",
      data = full_data_gas,
      current_year = current_year,
      comparison_year = comparison_year,
      category = first_col_name,
      unit = "MtCO₂e"
    )
  })
}

# Demo function to test the module
gas_demo <- function() {
  ui <- fluidPage(gasEmissionsUI("gas_test"))
  server <- function(input, output, session) {
    gasEmissionsServer("gas_test")
  }
  shinyApp(ui, server)
}

gas_demo()

## File: module_fertiliser_usage.R 
 # File: module_fertiliser_usage.R

fertiliserUsageUI <- function(id) {
  ns <- NS(id)
  tagList(
    sidebarLayout(
      sidebarPanel(
        width = 3,
        radioButtons(ns("data_type"), "Data Type", choices = c("Holdings" = "holdings", "Area" = "area"), selected = "holdings")  # Changed order here
      ),
      mainPanel(
        id = ns("mainpanel"),
        width = 9,
        tabsetPanel(
          id = ns("tabs"),
          tabPanel("Bar Chart", barChartUI(ns("bar_chart")), value = ns("bar")),
          tabPanel("Data Table",
                   DTOutput(ns("data_table")),
                   downloadButton(ns("downloadData"), "Download Data"),
                   value = ns("data"))
        )
      )
    )
  )
}

fertiliserUsageServer <- function(id) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    
    chart_data <- reactive({
      data <- manure_fertiliser
      if (!is.null(input$variables)) {
        data <- data %>%
          filter(`Fertiliser by type` %in% input$variables)
      }
      data
    })
    
    output$variable_select <- renderUI({
      choices <- unique(manure_fertiliser$`Fertiliser by type`)
      selected <- choices
      checkboxGroupInput(ns("variables"), "Choose variables to add to chart", choices = choices, selected = selected)
    })
    
    observeEvent(input$select_all_button, {
      updateCheckboxGroupInput(session, ns("variables"), selected = unique(manure_fertiliser$`Fertiliser by type`))
    })
    
    observeEvent(input$deselect_all_button, {
      updateCheckboxGroupInput(session, ns("variables"), selected = character(0))
    })
    
    y_col <- reactive({
      if (input$data_type == "holdings") {
        "2023 holdings"
      } else {
        "2023 area"
      }
    })
    
    yAxisTitle <- reactive({
      if (input$data_type == "holdings") {
        "Holdings"
      } else {
        "Area (1,000 hectares)"
      }
    })
    
    tooltip_format <- reactive({
      if (input$data_type == "holdings") {
        "Holdings: {point.y:.0f}"
      } else {
        "Area (hectares): {point.y:.2f}"
      }
    })
    
    barChartServer(
      id = "bar_chart",
      chart_data = chart_data,
      title = "Fertiliser Usage by Type in Scotland",
      yAxisTitle = yAxisTitle,
      xAxisTitle = "Fertiliser Type",
      unit = "holdings",
      footer = '<div style="font-size: 16px; font-weight: bold;"><a href="https://www.gov.scot/publications/results-scottish-agricultural-census-june-2023/documents/">Source: Scottish Agricultural Census: June 2023</a></div>',
      x_col = "Fertiliser by type",
      y_col = y_col,
      tooltip_format = tooltip_format
    )
    
    render_data_table(
      table_id = "data_table",
      chart_data = chart_data,
      output = output
    )
    
    handle_data_download(
      download_id = ns("downloadData"),
      chart_type = "Fertiliser Usage",
      chart_data = chart_data,
      input = input,
      output = output,
      year_input = NULL
    )
  })
}

## File: module_map.R 
 # File: module_map.R

library(shiny)
library(highcharter)
library(geojsonio)
library(dplyr)

# Load the GeoJSON file
geojson_data <- geojson_read("subregions_simplified.geojson", what = "sp")

# Convert GeoJSON to a Highcharts-compatible format
geojson_list <- geojson_list(geojson_data)

mapUI <- function(id) {
  ns <- NS(id)
  tagList(
    mainPanel(
      htmlOutput(ns("title")),
      highchartOutput(ns("map"), height = "75vh"),  # Set the height to be responsive
      htmlOutput(ns("footer")),
      div(
        class = "note",
        style = "margin-top: 20px; padding: 10px; border-top: 1px solid #ddd;",
        HTML(
          "<strong>Note:</strong><ul>
            <li>To change the data shown, select a variable from the radio buttons within the sidebar.</li>
            <li>You can see data values for each variable by hovering your mouse over the region.</li>
            <li>To change the zoom level, use the + and - to the left of the graph, or scroll using your mouse wheel.</li>
          </ul>"
        )
      )
    )
  )
}

mapServer <- function(id, data, variable, unit = "", title, footer) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    
    output$title <- renderUI({
      HTML(paste0("<div style='font-size: 20px; font-weight: bold;'>", title, "</div>"))
    })
    
    output$footer <- renderUI({
      HTML(footer)
    })
    
    filtered_data <- reactive({
      req(variable)  # Ensure that variable is not null or missing
      req(variable())  # Ensure that variable() is not null or missing
      req(data())      # Ensure that data() is not null or missing
      
      first_col_name <- names(data())[1]  # Get the name of the first column dynamically
      data() %>%
        filter(!!sym(first_col_name) == variable())  # Use the first column name for filtering
    })
    
    output$map <- renderHighchart({
      data <- filtered_data()
      hc_data <- data %>% 
        mutate(sub_region = as.character(sub_region)) %>%
        select(sub_region, value) %>%
        list_parse()
      
      variable_name <- variable()  # Get the selected variable name
      
      highchart(type = "map") %>%
        hc_add_series(
          mapData = geojson_list, 
          joinBy = c("sub_region", "sub_region"),
          data = hc_data,
          borderColor = "#FFFFFF",
          borderWidth = 0.5,
          states = list(
            hover = list(
              color = "#BADA55"
            )
          ),
          dataLabels = list(
            enabled = FALSE  # Disable the overlays
          ),
          tooltip = list(
            useHTML = TRUE,
            headerFormat = "<b>{point.key}</b><br/>",
            pointFormatter = JS(sprintf("function() {
              var value = this.value;
              var formattedValue;
              if (value >= 1000) {
                formattedValue = value.toLocaleString(undefined, {minimumFractionDigits: 0, maximumFractionDigits: 0});
              } else {
                formattedValue = value.toLocaleString(undefined, {minimumFractionDigits: 1, maximumFractionDigits: 2});
              }
              return '<b>' + this.sub_region + '</b><br/>' +
                     '%s: ' + formattedValue + ' %s';
            }", variable_name, unit))
          ),
          nullColor = '#E0E0E0'  # Color for regions with no data
        ) %>%
        hc_mapNavigation(enabled = TRUE) %>%
        hc_colorAxis(
          min = 0,
          stops = color_stops(5),
          labels = list(
            format = "{value:,.0f}"  # Ensure the labels show the correct values
          )
        ) %>%
        hc_chart(reflow = TRUE) %>% # Make chart responsive
        hc_legend(
          layout = "horizontal",
          align = "center",
          verticalAlign = "bottom",
          title = list(text = "Legend", style = list(fontSize = '15px')),
          itemStyle = list(width = '100px')
        )
    })
  })
}

## File: module_employees.R 
 library(shiny)
library(highcharter)
library(dplyr)
library(tidyr)

# Load the required modules
source("module_map.R")
source("module_line_chart.R")

# Coerce all relevant columns to character before pivoting
occupiers_employees_subregion <- occupiers_employees_subregion %>%
  mutate(across(-`Occupiers and employees by category`, as.character))

# Transform the data
regions_data <- occupiers_employees_subregion %>% 
  select(-Scotland) %>% 
  pivot_longer(cols = -`Occupiers and employees by category`, names_to = "sub_region", values_to = "value") %>%
  mutate(value = ifelse(value == "c", NA, safe_as_numeric(value)))

# Filter for the specific categories
categories <- c("Regular full-time staff total", 
                "Regular part-time staff total", 
                "Total Casual and seasonal staff", 
                "Total agricultural workforce")

filtered_regions_data <- regions_data %>%
  filter(`Occupiers and employees by category` %in% categories)

employeesMapUI <- function(id) {
  ns <- NS(id)
  sidebarLayout(
    sidebarPanel(
      width = 3,
      uiOutput(ns("sidebar_ui"))
    ),
    mainPanel(
      width = 9,
      tabsetPanel(
        id = ns("tabs"),
        tabPanel("Map", mapUI(ns("map")), value = "map"),
        tabPanel("Time Series", 
                 lineChartUI(ns("line_chart")), 
                 div(
                   class = "note",
                   style = "margin-top: 20px; padding: 10px; border-top: 1px solid #ddd;",
                   HTML(
                     "<strong>Note:</strong><ul>
                       <li>To add a series to the chart, click inside the white box on the sidebar and select a variable.</li>
                       <li>To remove a series, click the x beside the variable name within the sidebar.</li>
                       <li>Select a year range by adjusting the slider on the sidebar or by zooming into the graph by clicking and dragging over an area you wish to see.</li>
                       <li>You can see data values for a specific year by hovering your mouse over the line.</li>
                     </ul>"
                   )
                 ),
                 value = "timeseries"),
        tabPanel("Data Table", DTOutput(ns("data_table")), downloadButton(ns("downloadData"), "Download Data"), value = "data_table")
      )
    )
  )
}

employeesMapServer <- function(id) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    
    # Data Processing for Timeseries
    occupiers_employees <- occupiers_employees %>%
      mutate(across(starts_with("20"), safe_as_numeric))
    
    chart_data <- reactive({
      occupiers_employees %>%
        pivot_longer(cols = -`Occupiers and employees by category`, names_to = "Year", values_to = "Value") %>%
        mutate(Year = as.numeric(Year)) %>%
        filter(!grepl("occupiers", `Occupiers and employees by category`, ignore.case = TRUE))
    })
    
    output$sidebar_ui <- renderUI({
      req(input$tabs)
      if (input$tabs == "map") {
        radioButtons(ns("variable"), "Select Variable", choices = categories)
      } else if (input$tabs == "data_table") {
        radioButtons(ns("data_source"), "Choose data to show:", choices = c("Chart Data", "Map Data"))
      } else if (input$tabs == "timeseries") {
        tagList(
          selectizeInput(
            ns("variables"), 
            "Click within the box to add more variables", 
            choices = unique(chart_data()$`Occupiers and employees by category`), 
            selected = c('Regular full-time staff total', 'Regular part-time staff total', 'Total Casual and seasonal staff'), 
            multiple = TRUE, 
            options = list(plugins = list('remove_button'), placeholder = "Click to add more variables")
          ),
          sliderInput(
            ns("year_range"),
            "Select Year Range",
            min = 2012,
            max = 2023,
            value = c(2012, 2023),
            step = 1,
            sep = "",
            ticks = TRUE
          )
        )
      }
    })
    
    filtered_chart_data <- reactive({
      req(input$variables, input$year_range)
      data <- chart_data()
      data %>% 
        filter(
          `Occupiers and employees by category` %in% input$variables,
          Year >= input$year_range[1] & Year <= input$year_range[2]
        )
    })
    
    lineChartServer(
      id = "line_chart",
      chart_data = filtered_chart_data,
      title = "Agricultural Employees Time Series",
      yAxisTitle = "Employees (1,000)",
      xAxisTitle = "Year",
      unit = "employees",
      footer = '<div style="font-size: 16px; font-weight: bold;"><a href="https://www.gov.scot/publications/results-scottish-agricultural-census-june-2023/documents/">Source: Scottish Agricultural Census: June 2023</a></div>',
      x_col = "Year",
      y_col = "Value"
    )
    
    mapServer(
      id = "map",
      data = reactive({
        req(input$variable)
        filtered_regions_data %>%
          filter(`Occupiers and employees by category` == input$variable)
      }),
      unit = "employees",
      footer = '<div style="font-size: 16px; font-weight: bold;"><a href="https://www.gov.scot/publications/results-scottish-agricultural-census-june-2023/documents/">Source: Scottish Agricultural Census: June 2023</a></div>',
      variable = reactive(input$variable),
      title = "Agricultural Employees by Region"
    )
    
    output$data_table <- renderDT({
      req(input$data_source)
      if (input$data_source == "Chart Data") {
        datatable(chart_data())
      } else {
        datatable(filtered_regions_data)
      }
    })
    
    output$downloadData <- downloadHandler(
      filename = function() {
        paste(input$data_source, Sys.Date(), ".csv", sep = "")
      },
      content = function(file) {
        if (input$data_source == "Chart Data") {
          write.csv(chart_data(), file, row.names = FALSE)
        } else {
          write.csv(filtered_regions_data(), file, row.names = FALSE)
        }
      }
    )
  })
}

# Testing module
content_demo <- function() {
  ui <- fluidPage(employeesMapUI("employees_map_test"))
  server <- function(input, output, session) {
    employeesMapServer("employees_map_test")
  }
  shinyApp(ui, server)
}

content_demo()

## File: module_legal_responsibility.R 
 # File: module_legal_responsibility.R

legalResponsibilityUI <- function(id) {
  ns <- NS(id)
  tagList(
    sidebarLayout(
      sidebarPanel(
        width = 3,
        radioButtons(ns("data_type"), "Data Type", choices = c("Holdings" = "holdings", "Area" = "area"), selected = "holdings"),
        checkboxGroupInput(ns("selected_variables"), "Select Variables", choices = NULL, selected = NULL)
      ),
      mainPanel(
        id = ns("mainpanel"),
        width = 9,
        tabsetPanel(
          id = ns("tabs"),
          tabPanel("Bar Chart", barChartUI(ns("bar_chart")), value = ns("bar")),
          tabPanel("Data Table",
                   DTOutput(ns("data_table")),
                   downloadButton(ns("downloadData"), "Download Data"),
                   value = ns("data"))
        )
      )
    )
  )
}

# File: module_legal_responsibility.R

legalResponsibilityServer <- function(id) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    
    # Create reactive data excluding 'Total'
    chart_data <- reactive({
      data <- legal_responsibility %>%
        filter(`Legal responsibility` != "Total")
      data
    })
    
    # Get initial order based on 'Holdings'
    initial_order <- reactive({
      data <- chart_data() %>%
        arrange(desc(Holdings))
      data$`Legal responsibility`
    })
    
    # Update checkboxGroupInput choices
    observe({
      choices <- unique(chart_data()$`Legal responsibility`)
      selected <- choices  # Select all choices, including 'Unknown'
      updateCheckboxGroupInput(session, "selected_variables", choices = choices, selected = selected)
    })
    
    y_col <- reactive({
      if (input$data_type == "holdings") {
        "Holdings"
      } else {
        "Area of holdings"
      }
    })
    
    yAxisTitle <- reactive({
      if (input$data_type == "holdings") {
        "Number of Holdings (1,000)"
      } else {
        "Area of Holdings (1,000 hectares)"
      }
    })
    
    unit <- reactive({
      if (input$data_type == "holdings") {
        "holdings"
      } else {
        "hectares"
      }
    })
    
    tooltip_format <- reactive({
      if (input$data_type == "holdings") {
        "Holdings: {point.y:.0f} holdings"
      } else {
        "Area: {point.y:.2f} hectares"
      }
    })
    
    barChartServer(
      id = "bar_chart",
      chart_data = reactive({
        data <- chart_data() %>%
          filter(`Legal responsibility` %in% input$selected_variables) %>%
          mutate(`Legal responsibility` = factor(`Legal responsibility`, levels = initial_order())) %>%
          arrange(`Legal responsibility`)
        data
      }),
      title = "Legal Responsibility of Holdings in Scotland",
      yAxisTitle = yAxisTitle,
      xAxisTitle = "Legal Responsibility",
      footer = '<div style="font-size: 16px; font-weight: bold;"><a href="https://www.gov.scot/publications/results-scottish-agricultural-census-june-2023/documents/">Source: Scottish Agricultural Census: June 2023</a></div>',
      x_col = "Legal responsibility",
      y_col = y_col,
      tooltip_format = tooltip_format,
      maintain_order = TRUE
    )
    
    render_data_table(
      table_id = "data_table",
      chart_data = chart_data,
      output = output
    )
    
    handle_data_download(
      download_id = ns("downloadData"),
      chart_type = "Legal Responsibility",
      chart_data = chart_data,
      input = input,
      output = output,
      year_input = NULL
    )
  })
}

## File: module_farm_types.R 
 # File: module_farm_types.R

farmTypesUI <- function(id) {
  ns <- NS(id)
  tagList(
    sidebarLayout(
      sidebarPanel(
        width = 3,
        radioButtons(ns("data_type"), "Data Type", choices = c("Holdings" = "holdings", "Area" = "area", "Total from Standard Outputs" = "total", "Average standard outputs per holding" = "average"), selected = "holdings"),
        uiOutput(ns("variable_select")),  # Added variable select UI
      ),
      mainPanel(
        id = ns("mainpanel"),
        width = 9,
        tabsetPanel(
          id = ns("tabs"),
          tabPanel("Bar Chart", barChartUI(ns("bar_chart")), value = ns("bar")),
          tabPanel("Data Table",
                   DTOutput(ns("data_table")),
                   downloadButton(ns("downloadData"), "Download Data"),
                   value = ns("data"))
        )
      )
    )
  )
}

farmTypesServer <- function(id) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    
    # Create reactive data excluding 'All'
    chart_data <- reactive({
      data <- farm_type %>%
        filter(`Main farm type` != "All")
      if (!is.null(input$variables)) {
        data <- data %>%
          filter(`Main farm type` %in% input$variables)
      }
      data
    })
    
    # Get initial order based on 'Holdings'
    initial_order <- reactive({
      data <- chart_data() %>%
        arrange(desc(Holdings))
      data$`Main farm type`
    })
    
    output$variable_select <- renderUI({
      choices <- unique(farm_type$`Main farm type`)
      selected <- setdiff(choices, "All")
      selectizeInput(
        ns("variables"), 
        "Click within the box to select variables", 
        choices = choices, 
        selected = selected,
        multiple = TRUE,
        options = list(
          plugins = list('remove_button')
        )
      )
    })
    
    y_col <- reactive({
      switch(input$data_type,
             "holdings" = "Holdings",
             "area" = "Hectares",
             "total" = "Total from Standard Outputs",
             "average" = "Average standard outputs per holding")
    })
    
    yAxisTitle <- reactive({
      switch(input$data_type,
             "holdings" = "Number of Holdings",
             "area" = "Area (hectares)",
             "total" = "Total from Standard Outputs",
             "average" = "Average Standard Outputs per Holding")
    })
    
    tooltip_format <- reactive({
      switch(input$data_type,
             "holdings" = "Holdings: {point.y:.0f}",
             "area" = "Area (hectares): {point.y:.2f}",
             "total" = "Total from Standard Outputs: {point.y:.0f}",
             "average" = "Average Standard Outputs per Holding: {point.y:.2f}")
    })
    
    barChartServer(
      id = "bar_chart",
      chart_data = reactive({
        data <- chart_data()
        data <- data %>%
          mutate(`Main farm type` = factor(`Main farm type`, levels = initial_order())) %>%
          arrange(`Main farm type`)
        data
      }),
      title = "Farm Types in Scotland",
      yAxisTitle = yAxisTitle,
      xAxisTitle = "Main Farm Type",
      unit = "holdings",
      footer = '<div style="font-size: 16px; font-weight: bold;"><a href="https://www.gov.scot/publications/results-scottish-agricultural-census-june-2023/documents/">Source: Scottish Agricultural Census: June 2023</a></div>',
      x_col = "Main farm type",
      y_col = y_col,
      tooltip_format = tooltip_format,
      maintain_order = TRUE
    )
    
    render_data_table(
      table_id = "data_table",
      chart_data = chart_data,
      output = output
    )
    
    handle_data_download(
      download_id = ns("downloadData"),
      chart_type = "Farm Types",
      chart_data = chart_data,
      input = input,
      output = output,
      year_input = NULL
    )
  })
}

## File: module_occupiers.R 
 ## File: module_occupiers.R

library(shiny)
library(highcharter)
library(dplyr)
library(tidyr)
library(DT)
library(geojsonio)

# Load the required modules
source("module_map.R")
source("module_line_chart.R")

occupiersUI <- function(id) {
  ns <- NS(id)
  sidebarLayout(
    sidebarPanel(
      width = 3,
      uiOutput(ns("sidebar_ui"))
    ),
    mainPanel(
      width = 9,
      tabsetPanel(
        id = ns("tabs"),
        tabPanel("Map", mapUI(ns("map")), value = "map"),
        tabPanel("Population Pyramid", highchartOutput(ns("pyramid_chart"), height = "500px"), value = "bar_chart"),
        tabPanel("Time Series", lineChartUI(ns("line_chart")), value = "timeseries"),
        tabPanel("Data Table", 
                 DTOutput(ns("data_table")),
                 downloadButton(ns("downloadData"), "Download Data"),
                 value = "data_table")
      )
    )
  )
}
occupiersServer <- function(id) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    
    # Data Processing for Bar Chart
    chart_data <- reactive({
      occupiers_age_gender %>%
        filter(`Occupier working time` == "Total working occupiers") %>%
        select(-`Male Total`, -`Female Total`) %>%
        pivot_longer(cols = -`Occupier working time`, names_to = "Gender_Age", values_to = "Count") %>%
        separate(Gender_Age, into = c("Gender", "Age"), sep = " ", extra = "merge") %>%
        mutate(Count = as.numeric(Count))
    })
    
    # Data Processing for Map
    regions_data <- reactive({
      occupiers_employees_subregion %>%
        select(-Scotland) %>%
        mutate(across(everything(), as.character)) %>%  # Ensure all columns are characters
        pivot_longer(cols = -`Occupiers and employees by category`, names_to = "sub_region", values_to = "value") %>%
        mutate(value = ifelse(is.na(as.numeric(value)), NA, as.numeric(value))) %>%
        filter(`Occupiers and employees by category` %in% c(
          "Total working Occupiers", 
          "Occupiers not working on the holding"
        ))
    })
    
    # Data Processing for Timeseries
    occupiers_employees <- occupiers_employees %>%
      mutate(across(starts_with("20"), safe_as_numeric))
    
    occupiers_timeseries_data <- reactive({
      occupiers_employees %>%
        pivot_longer(cols = -`Occupiers and employees by category`, names_to = "Year", values_to = "Value") %>%
        mutate(Year = as.numeric(Year)) %>%
        filter(grepl("occupiers", `Occupiers and employees by category`, ignore.case = TRUE))
    })
    
    # Sidebar UI
    output$sidebar_ui <- renderUI({
      req(input$tabs)
      if (input$tabs == "map") {
        radioButtons(ns("variable"), "Select Variable", choices = c(
          "Total working Occupiers", 
          "Occupiers not working on the holding"
        ))
      } else if (input$tabs == "data_table") {
        radioButtons(ns("data_source"), "Choose data to show:", choices = c("Chart Data", "Map Data", "Timeseries Data"))
      } else if (input$tabs == "timeseries") {
        checkboxGroupInput(
          ns("variables"), 
          "Choose variables to add to chart", 
          choices = unique(occupiers_timeseries_data()$`Occupiers and employees by category`), 
          selected = c('Occupiers - full time', 'Total working occupiers', 'Occupiers not working on the holding')
        )
      } else {
        checkboxGroupInput(ns("variables_bar"), "Choose age groups to display", choices = unique(chart_data()$Age), selected = unique(chart_data()$Age))
      }
    })
    
    # Bar Chart - Filtered Data
    filtered_data <- reactive({
      req(input$variables_bar)
      chart_data() %>%
        filter(Age %in% input$variables_bar) %>%
        mutate(Count = ifelse(Gender == "Female", -Count, Count))
    })
    
    # Bar Chart - Output
    output$pyramid_chart <- renderHighchart({
      data <- filtered_data()
      female_data <- data %>% filter(Gender == "Female") %>% select(y = Count) %>% pull()
      male_data <- data %>% filter(Gender == "Male") %>% select(y = Count) %>% pull()
      categories <- data %>% filter(Gender == "Male") %>% select(Age) %>% pull()
      max_count <- max(abs(c(male_data, female_data)), na.rm = TRUE)
      
      highchart() %>%
        hc_chart(type = "bar") %>%
        hc_xAxis(categories = categories, reversed = FALSE) %>%
        hc_yAxis(
          min = -max_count,
          max = max_count,
          title = list(text = "Number of working occupiers"), 
          labels = list(
            formatter = JS("function () {
          return Math.abs(this.value).toLocaleString();
        }")
          )
        ) %>%
        hc_plotOptions(bar = list(stacking = "normal")) %>%
        hc_add_series(name = "Female", data = as.list(female_data), color = "#002d54", tooltip = list(pointFormatter = JS("function() { return 'Female: ' + Math.abs(this.y).toLocaleString() + ' occupiers'; }"))) %>%
        hc_add_series(name = "Male", data = as.list(male_data), color = "#2b9c93", tooltip = list(pointFormatter = JS("function() { return 'Male: ' + this.y.toLocaleString() + ' occupiers'; }"))) %>%
        hc_tooltip(shared = FALSE) %>%
        hc_title(text = "Breakdown of Occupiers by Age and Gender", align = "left", style = list(fontSize = "20px", fontWeight = "bold")) %>%
        hc_legend(align = "center") %>%
        hc_xAxis(title = list(text = "Age group")) %>%
        hc_yAxis(title = list(text = "Number of working occupiers"),
                 labels = list(formatter = JS("function () {
               return Math.abs(this.value).toLocaleString();
             }")))
    })
    
    
    # Timeseries Chart - Using the modular line chart
    filtered_timeseries_data <- reactive({
      req(input$variables)
      data <- occupiers_timeseries_data()
      data %>% filter(`Occupiers and employees by category` %in% input$variables)
    })
    
    lineChartServer(
      id = "line_chart",
      chart_data = filtered_timeseries_data,
      title = "Agricultural Occupiers Time Series",
      yAxisTitle = "Occupiers (1,000)",
      xAxisTitle = "Year",
      footer = '<div style="font-size: 16px; font-weight: bold;"><a href="https://www.gov.scot/publications/results-scottish-agricultural-census-june-2023/documents/">Source: Scottish Agricultural Census: June 2023</a></div>',
      x_col = "Year",
      y_col = "Value"
    )
    
    # Map - Use the new map module
    mapServer(
      id = "map",
      data = regions_data,
      variable = reactive(input$variable),
      footer = '<div style="font-size: 16px; font-weight: bold;"><a href="https://www.gov.scot/publications/results-scottish-agricultural-census-june-2023/documents/">Source: Scottish Agricultural Census: June 2023</a></div>',
      title = "Occupiers by Region"
    )
    
    # Data Table - Output
    output$data_table <- renderDT({
      req(input$data_source)
      if (input$data_source == "Chart Data") {
        datatable(chart_data())
      } else if (input$data_source == "Map Data") {
        datatable(regions_data())
      } else {
        datatable(filtered_timeseries_data())
      }
    })
    
    # Data Table - Download Handler
    output$downloadData <- downloadHandler(
      filename = function() {
        paste(input$data_source, Sys.Date(), ".csv", sep = "")
      },
      content = function(file) {
        if (input$data_source == "Chart Data") {
          write.csv(chart_data(), file, row.names = FALSE)
        } else if (input$data_source == "Map Data") {
          write.csv(regions_data(), file, row.names = FALSE)
        } else {
          write.csv(filtered_timeseries_data(), file, row.names = FALSE)
        }
      }
    )
  })
}

# Testing module
content_demo <- function() {
  ui <- fluidPage(occupiersUI("occupiers_map_test"))
  server <- function(input, output, session) {
    occupiersServer("occupiers_map_test")
  }
  shinyApp(ui, server)
}

content_demo()

## File: module_owned_land.R 
 ## File: module_owned_land.R

library(shiny)
library(highcharter)
library(dplyr)
library(tidyr)
library(DT)

# Load the required module
source("module_line_chart.R")

ownedLandUI <- function(id) {
  ns <- NS(id)
  sidebarLayout(
    sidebarPanel(
      width = 3,
      checkboxGroupInput(
        ns("variables"), 
        "Choose variables to add to chart", 
        choices = unique(owned_rented_land$`Area owned or rented`[-4]), 
        selected = unique(owned_rented_land$`Area owned or rented`[-4])
      )
    ),
    mainPanel(
      width = 9,
      tabsetPanel(
        id = ns("tabs"),
        tabPanel("Timeseries", 
                 lineChartUI(ns("line_chart")), 
                 value = "timeseries"),
        tabPanel("Data Table", 
                 DTOutput(ns("data_table")), 
                 downloadButton(ns("downloadData"), "Download Data"), 
                 value = "data_table")
      )
    )
  )
}

ownedLandServer <- function(id) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    
    # Data Processing for Timeseries
    owned_rented_land_filtered <- owned_rented_land %>% 
      filter(`Area owned or rented` != "Percentage of area rented")
    
    owned_rented_land_long <- owned_rented_land_filtered %>%
      pivot_longer(cols = -`Area owned or rented`, names_to = "Year", values_to = "Value") %>%
      mutate(Year = as.numeric(Year))
    
    filtered_owned_rented_land <- reactive({
      req(input$variables)
      data <- owned_rented_land_long %>%
        filter(`Area owned or rented` %in% input$variables)
      data
    })
    
    # Line Chart
    lineChartServer(
      id = "line_chart",
      chart_data = filtered_owned_rented_land,
      title = "Owned and Rented Land Timeseries",
      yAxisTitle = "Area (1,000 hectares)",
      xAxisTitle = "Year",
      unit = "hectares",
      footer = '<div style="font-size: 16px; font-weight: bold;"><a href="https://www.gov.scot/publications/results-scottish-agricultural-census-june-2023/documents/">Source: Scottish Agricultural Census: June 2023</a></div>',
      x_col = "Year",
      y_col = "Value"
    )
    
    # Data Table
    output$data_table <- renderDT({
      datatable(filtered_owned_rented_land())
    })
    
    # Download Handler
    output$downloadData <- downloadHandler(
      filename = function() {
        paste("owned_rented_land", Sys.Date(), ".csv", sep = "")
      },
      content = function(file) {
        write.csv(filtered_owned_rented_land(), file, row.names = FALSE)
      }
    )
  })
}

# Testing module
content_demo <- function() {
  ui <- fluidPage(ownedLandUI("owned_land_test"))
  server <- function(input, output, session) {
    ownedLandServer("owned_land_test")
  }
  shinyApp(ui, server)
}

content_demo()

## File: module_land_use_summary.R 
 # File: module_land_use_summary.R

library(shiny)
library(dplyr)
library(tidyr)
library(DT)

landUseSummaryUI <- function(id) {
  ns <- NS(id)
  sidebarLayout(
    sidebarPanel(
      width = 3,
      conditionalPanel(
        condition = "input.tabsetPanel === 'Map'",
        ns = ns,
        radioButtons(
          ns("variable"), 
          "Select Variable", 
          choices = unique(land_use_subregion$`Land use by category`)
        )
      ), 
      conditionalPanel(
        condition = "input.tabsetPanel === 'Summary'",
        ns = ns,
        div(
          style = "font-size: 24px; font-weight: bold;",
          " "
        )
      ), 
      conditionalPanel(
        condition = "input.tabsetPanel === 'Bar Chart'",
        ns = ns,
        checkboxGroupInput(
          ns("variables"), 
          "Choose variables to add to chart", 
          choices = c("Total crops, fallow, and set-aside", "Total grass", "Rough grazing", 
                      "Total sole right agricultural area", "Common grazings"),
          selected = c("Total crops, fallow, and set-aside", "Total grass", "Rough grazing", 
                       "Total sole right agricultural area", "Common grazings")
        )
      ),
      conditionalPanel(
        condition = "input.tabsetPanel === 'Time Series'",
        ns = ns,
        checkboxGroupInput(
          ns("timeseries_variables"),
          "Select Time Series Variables",
          choices = unique(land_use_data$`Crop/Land use`),
          selected = c(
            "Common grazings",
            "Rough grazing",
            "Total crops, fallow, and set-aside",
            "Total grass",
            "Cauliflower",
            "Total sole right agricultural area"
          )
        )
      ),
      conditionalPanel(
        condition = "input.tabsetPanel === 'Data Table'",
        ns = ns,
        radioButtons(
          ns("table_data"),
          "Select Data to Display",
          choices = c("Map Data" = "map", "Time Series Data" = "timeseries"),
          selected = "map"
        ),
        tags$div(
          style = "width: 100%;",
          downloadButton(ns("download_data"), "Download Data")
        )
      )
    ),
    mainPanel(
      id = ns("mainpanel"),
      width = 9,
      tabsetPanel(
        id = ns("tabsetPanel"),
        tabPanel("Summary",
                 div(
                   class = "container-fluid",  # Use container-fluid for full-width responsive container
                   tags$div(
                     style = "font-size: 24px; font-weight: bold;",
                     "Most of Scotland's area is used for agriculture"
                   ),
                   tags$div(
                     style = "margin-top: 20px; text-align: left;",  # Align the image container to the left
                     tags$img(src = "land_use_map.svg", alt = "Land Use Map", style = "max-width: 100%; height: auto; max-height: 500px;")
                   ),
                   tags$div(
                     style = "margin-top: 20px; font-size: 16px;",
                     HTML("
                       <p>This map shows the main farming types found in each area. Large areas of Scotland have hilly or rocky land suitable for livestock, but limited growing conditions. These areas are shown in light green on the map. The areas in black have better soil and can support crops usually grown for animal feed. Dark green areas can support vegetables, fruit and cereal farming for human consumption.</p>
                       <p>The total Scottish agricultural area in 2023 was 5.33 million hectares, 69 per cent of Scotland’s total land. However, it should be noted that large areas of agricultural land are only lightly farmed. For example, hilly or mountainous areas are mostly used for rough grazing. The total Scottish agricultural area excludes common grazing land.</p>
                       <p>More information about land use is available in the Scottish Agricultural Census.</p>
                       <p>The twin climate change and environment crises mean considerations as to how we own, use and manage our land have never been as important as they are now. Scotland’s land and the natural capital it supports are some of our most valuable assets. It is vital to our environment, economy and wellbeing as individuals and communities. Information about land use policy is available on <a href='https://www.gov.scot' target='_blank'>gov.scot</a>.</p>
                     ")
                   )
                 )
        ),
        tabPanel("Map", mapUI(ns("map"))),
        tabPanel("Bar Chart", barChartUI(ns("bar_chart"))),
        tabPanel("Time Series", lineChartUI(ns("line"))),
        tabPanel("Data Table", DTOutput(ns("table")))
      )
    )
  )
}


landUseSummaryServer <- function(id) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    
    land_use_map <- land_use_subregion %>%
      select(-Scotland) %>%
      mutate(across(everything(), as.character)) %>%
      pivot_longer(cols = -`Land use by category`, names_to = "sub_region", values_to = "value") %>%
      mutate(value = as.numeric(value))
    
    mapServer(
      id = "map",
      data = reactive({
        req(input$variable)
        land_use_map %>% filter(`Land use by category` == input$variable)
      }),
      unit = "hectares",
      footer = '<div style="font-size: 16px; font-weight: bold;"><a href="https://www.gov.scot/publications/results-scottish-agricultural-census-june-2023/documents/">Source: Scottish Agricultural Census: June 2023</a></div>',
      variable = reactive(input$variable),
      title = "Land Use by Region (hectares)"
    )
    
    chart_data <- reactive({
      agricultural_area_hectares %>%
        filter(`Crop/Land use` %in% input$variables) %>%
        select(`Crop/Land use`, `2023 Area`) %>%
        rename(Variable = `Crop/Land use`, Value = `2023 Area`)
    })
    
    timeseries_data <- reactive({
      req(input$timeseries_variables)
      filtered_data <- land_use_data %>%
        filter(`Crop/Land use` %in% input$timeseries_variables) %>%
        pivot_longer(cols = -`Crop/Land use`, names_to = "year", values_to = "value") %>%
        mutate(year = as.numeric(year))  # Ensure year is numeric
      filtered_data
    })
    
    barChartServer(
      id = "bar_chart",
      chart_data = chart_data,
      title = "Agricultural Area in 2023 by Land Use Type",
      yAxisTitle = "Area (1,000 hectares)",
      xAxisTitle = "Land Use Type",
      unit = "hectares",
      footer = '<div style="font-size: 16px; font-weight: bold;"><a href="https://www.gov.scot/publications/results-scottish-agricultural-census-june-2023/documents/">Source: Scottish Agricultural Census: June 2023</a></div>',
      x_col = "Variable",
      y_col = "Value",
      tooltip_format = "Area (hectares): {point.y:.2f}"
    )
    
    lineChartServer(
      id = "line",
      chart_data = timeseries_data,
      title = "Land Use Chart Data",
      yAxisTitle = "Area of Land Use (1,000 hectares)",
      xAxisTitle = "Year",
      unit = "hectares",
      footer = '<div style="font-size: 16px; font-weight: bold;"><a href="https://www.gov.scot/publications/results-scottish-agricultural-census-june-2023/documents/">Source: Scottish Agricultural Census: June 2023</a></div>',
      x_col = "year",
      y_col = "value"
    )
    
    output$table <- renderDT({
      req(input$tabsetPanel == "Data Table")
      if (input$table_data == "map") {
        req(input$variable)
        datatable(land_use_subregion)
      } else {
        datatable(land_use_data)
      }
    })
    
    output$download_data <- createDownloadHandler(
      input = input,
      file_map_name = "Land_Use_Subregion_Data.xlsx",
      file_timeseries_name = "Land_Use_Timeseries_Data.xlsx",
      map_data = land_use_subregion,
      timeseries_data = land_use_data
    )
  })
}

land_use_demo <- function() {
  ui <- fluidPage(landUseSummaryUI("land_use_test"))
  server <- function(input, output, session) {
    landUseSummaryServer("land_use_test")
  }
  shinyApp(ui, server)
}

land_use_demo()

## File: module_cattle.R 
 # File: module_cattle.R



cattleUI <- function(id) {
  ns <- NS(id)
  sidebarLayout(
    sidebarPanel(
      width = 3,
      conditionalPanel(
        condition = "input.tabsetPanel === 'Map'",
        ns = ns,
        radioButtons(
          ns("variable"), 
          "Select Variable", 
          choices = c(
            "Total Cattle" = "Total Cattle",
            "Total Female Dairy Cattle" = "Total Female Dairy Cattle",
            "Total Female Beef Cattle" = "Total Female Beef Cattle",
            "Total Male Cattle" = "Total Male Cattle",
            "Total Calves" = "Total Calves"
          )
        )
      ),
      conditionalPanel(
        condition = "input.tabsetPanel === 'Time Series' || input.tabsetPanel === 'Area Chart'",
        ns = ns,
        selectizeInput(
          ns("timeseries_variables"),
          "Click within the box to select variables",
          choices = unique(number_of_cattle$`Cattle by category`),
          selected = c(
            "Total Female Dairy Cattle",
            "Total Female Beef Cattle",
            "Total Male Cattle",
            "Total Calves"
          ),
          multiple = TRUE,
          options = list(
            plugins = list('remove_button')
          )
        )
      ),
      conditionalPanel(
        condition = "input.tabsetPanel === 'Data Table'",
        ns = ns,
        radioButtons(
          ns("table_data"),
          "Select Data to Display",
          choices = c("Map Data" = "map", "Time Series Data" = "timeseries"),
          selected = "map"
        )
      )
    ),
    mainPanel(
      width = 9,
      tabsetPanel(
        id = ns("tabsetPanel"),
        tabPanel("Map", mapUI(ns("map"))),
        tabPanel("Time Series", lineChartUI(ns("line"))),
        tabPanel("Area Chart", areaChartUI(ns("area"))),
        tabPanel("Data Table", DTOutput(ns("table")))
      )
    )
  )
}

cattleServer <- function(id) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    
    cattle_data <- livestock_subregion %>%
      filter(`Livestock by category` %in% c(
        "Total Female Dairy Cattle",
        "Total Female Beef Cattle",
        "Total Male Cattle",
        "Total Calves",
        "Total Cattle"
      )) %>%
      select(-Scotland) %>%
      mutate(across(everything(), as.character)) %>%
      pivot_longer(cols = -`Livestock by category`, names_to = "sub_region", values_to = "value") %>%
      mutate(value = safe_as_numeric(value))
    
    mapServer(
      id = "map",
      data = reactive({
        req(input$variable)
        cattle_data %>% filter(`Livestock by category` == input$variable)
      }),
      footer = '<div style="font-size: 16px; font-weight: bold;"><a href="https://www.gov.scot/publications/results-scottish-agricultural-census-june-2023/documents/">Source: Scottish Agricultural Census: June 2023</a></div>',
      variable = reactive(input$variable),
      title = "Cattle Distribution by Region"
    )
    
    chart_data <- reactive({
      req(input$timeseries_variables)
      filtered_data <- number_of_cattle %>%
        filter(`Cattle by category` %in% input$timeseries_variables) %>%
        pivot_longer(cols = -`Cattle by category`, names_to = "year", values_to = "value") %>%
        mutate(year = as.numeric(year))  # Ensure year is numeric
      filtered_data
    })
    
    areaChartServer(
      id = "area",
      chart_data = chart_data,
      title = "Cattle Area Chart Data",
      yAxisTitle = "Number of Cattle (1,000)",
      xAxisTitle = "Year",
      footer = '<div style="font-size: 16px; font-weight: bold;"><a href="https://www.gov.scot/publications/results-scottish-agricultural-census-june-2023/documents/">Source: Scottish Agricultural Census: June 2023</a></div>',
      x_col = "year",
      y_col = "value"
    )
    
    lineChartServer(
      id = "line",
      chart_data = chart_data,
      title = "Cattle Area Chart Data",
      yAxisTitle = "Number of Cattle (1,000)",
      xAxisTitle = "Year",
      footer = '<div style="font-size: 16px; font-weight: bold;"><a href="https://www.gov.scot/publications/results-scottish-agricultural-census-june-2023/documents/">Source: Scottish Agricultural Census: June 2023</a></div>',
      x_col = "year",
      y_col = "value"
    )
    
    output$table <- renderDT({
      req(input$tabsetPanel == "Data Table")
      if (input$table_data == "map") {
        req(input$variable)
        cattle_data %>%
          filter(`Livestock by category` == input$variable) %>%
          datatable()
      } else {
        number_of_cattle %>%
          pivot_longer(cols = -`Cattle by category`, names_to = "year", values_to = "value") %>%
          datatable()
      }
    })
  })
}

cattle_demo <- function() {
  ui <- fluidPage(cattleUI("cattle_test"))
  server <- function(input, output, session) {
    cattleServer("cattle_test")
  }
  shinyApp(ui, server)
}

cattle_demo()

## File: module_sheep.R 
 # File: module_sheep.R

library(shiny)
library(highcharter)
library(dplyr)
library(tidyr)
library(geojsonio)
library(DT)

# Load the required module
source("module_map.R")
source("module_area_chart.R")
source("module_line_chart.R")

sheepUI <- function(id) {
  ns <- NS(id)
  sidebarLayout(
    sidebarPanel(
      width = 3,
      conditionalPanel(
        condition = "input.tabsetPanel === 'Map'",
        ns = ns,
        radioButtons(
          ns("variable"), 
          "Select Variable", 
          choices = c(
            "Total sheep" = "Total sheep",
            "Ewes for breeding" = "Ewes for breeding",
            "Other sheep one year old and over for breeding" = "Other sheep one year old and over for breeding",
            "Rams to be used for service" = "Rams for service",
            "Lambs" = "Lambs"
          )
        )
      ),
      conditionalPanel(
        condition = "input.tabsetPanel === 'Time Series' || input.tabsetPanel === 'Area Chart'",
        ns = ns,
        checkboxGroupInput(
          ns("timeseries_variables"),
          "Select Time Series Variables",
          choices = c(
            "Ewes used for breeding in previous season",
            "Sheep for breeding aged 1 year and over",
            "Rams to be used for service",
            "Total other sheep 1 year and over",
            "Lambs",
            "Total sheep",
            "Other"
            
          ),
          selected = c(
            "Ewes used for breeding in previous season",
            "Rams to be used for service",
            "Sheep for breeding aged 1 year and over",
            "Total other sheep 1 year and over",
            "Lambs"
          )
        )
      ),
      conditionalPanel(
        condition = "input.tabsetPanel === 'Data Table'",
        ns = ns,
        radioButtons(
          ns("table_data"),
          "Select Data to Display",
          choices = c("Map Data" = "map", "Time Series Data" = "timeseries"),
          selected = "map"
        )
      )
    ),
    mainPanel(
      width = 9,
      tabsetPanel(
        id = ns("tabsetPanel"),
        tabPanel("Map", mapUI(ns("map"))),
        tabPanel("Time Series", lineChartUI(ns("line"))),
        tabPanel("Area Chart", areaChartUI(ns("area"))),
        tabPanel("Data Table", DTOutput(ns("table")))
      )
    )
  )
}

sheepServer <- function(id) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    
    sheep_data <- livestock_subregion %>%
      filter(`Livestock by category` %in% c(
        "Ewes for breeding",
        "Other sheep one year old and over for breeding",
        "Rams for service",
        "Lambs",
        "Total sheep"
      )) %>%
      select(-Scotland) %>%
      mutate(across(everything(), as.character)) %>%
      pivot_longer(cols = -`Livestock by category`, names_to = "sub_region", values_to = "value") %>%
      mutate(value = safe_as_numeric(value))
    
    mapServer(
      id = "map",
      data = reactive({
        req(input$variable)
        sheep_data %>% filter(`Livestock by category` == input$variable)
      }),
      footer = '<div style="font-size: 16px; font-weight: bold;"><a href="https://www.gov.scot/publications/results-scottish-agricultural-census-june-2023/documents/">Source: Scottish Agricultural Census: June 2023</a></div>',
      variable = reactive(input$variable),
      title = "Sheep Distribution by Region"
    )
    
    chart_data <- reactive({
      req(input$timeseries_variables)
      filtered_data <- number_of_sheep %>%
        filter(`Sheep by category` %in% input$timeseries_variables) %>%
        pivot_longer(cols = -`Sheep by category`, names_to = "year", values_to = "value") %>%
        mutate(year = as.numeric(year))  # Ensure year is numeric
      filtered_data
    })
    
    areaChartServer(
      id = "area",
      chart_data = chart_data,
      title = "Sheep Area Chart Data",
      yAxisTitle = "Number of Sheep (1,000)",
      xAxisTitle = "Year",
      footer = '<div style="font-size: 16px; font-weight: bold;"><a href="https://www.gov.scot/publications/results-scottish-agricultural-census-june-2023/documents/">Source: Scottish Agricultural Census: June 2023</a></div>',
      x_col = "year",
      y_col = "value"
    )
    
    lineChartServer(
      id = "line",
      chart_data = chart_data,
      title = "Sheep Area Chart Data",
      yAxisTitle = "Number of Sheep (1,000)",
      xAxisTitle = "Year",
      footer = '<div style="font-size: 16px; font-weight: bold;"><a href="https://www.gov.scot/publications/results-scottish-agricultural-census-june-2023/documents/">Source: Scottish Agricultural Census: June 2023</a></div>',
      x_col = "year",
      y_col = "value"
    )
    
    output$table <- renderDT({
      req(input$tabsetPanel == "Data Table")
      if (input$table_data == "map") {
        req(input$variable)
        sheep_data %>%
          filter(`Livestock by category` == input$variable) %>%
          datatable()
      } else {
        number_of_sheep %>%
          pivot_longer(cols = -`Sheep by category`, names_to = "year", values_to = "value") %>%
          datatable()
      }
    })
  })
}

sheep_demo <- function() {
  ui <- fluidPage(sheepUI("sheep_test"))
  server <- function(input, output, session) {
    sheepServer("sheep_test")
  }
  shinyApp(ui, server)
}

sheep_demo()

## File: module_pigs.R 
 # File: module_pigs.R

pigsUI <- function(id) {
  ns <- NS(id)
  sidebarLayout(
    sidebarPanel(
      width = 3,
      conditionalPanel(
        condition = "input.tabsetPanel === 'Map'",
        ns = ns,
        radioButtons(
          ns("variable"), 
          "Select Variable", 
          choices = c(
            "Total pigs" = "Total pigs",
            "Female pigs breeding herd" = "Female pigs breeding herd",
            "All other non-breeding pigs" = "All other non-breeding pigs"
          ))
      ),
      conditionalPanel(
        condition = "input.tabsetPanel === 'Time Series' || input.tabsetPanel === 'Area Chart'",
        ns = ns,
        selectizeInput(
          ns("timeseries_variables"),
          "Click within the box to select variables",
          choices = unique(number_of_pigs$`Pigs by category`),
          selected = c(
            "Total breeding herd",
            "80 kg liveweight and over",
            "50 kg and under 80 kg liveweight",
            "Under 50 kg liveweight"
          ),
          multiple = TRUE,
          options = list(
            plugins = list('remove_button')
          )
        )
      ),
      conditionalPanel(
        condition = "input.tabsetPanel === 'Data Table'",
        ns = ns,
        radioButtons(
          ns("table_data"),
          "Select Data to Display",
          choices = c("Map Data" = "map", "Time Series Data" = "timeseries"),
          selected = "map"
        )
      )
    ),
    mainPanel(
      width = 9,
      tabsetPanel(
        id = ns("tabsetPanel"),
        tabPanel("Map", mapUI(ns("map"))),
        tabPanel("Time Series", lineChartUI(ns("line"))),
        tabPanel("Area Chart", areaChartUI(ns("area"))),
        tabPanel("Data Table", DTOutput(ns("table")))
      )
    )
  )
}

pigsServer <- function(id) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    
    pigs_data <- livestock_subregion %>%
      filter(`Livestock by category` %in% c(
        "Female pigs breeding herd",
        "All other non-breeding pigs",
        "Total pigs"
      )) %>%
      select(-Scotland) %>%
      mutate(across(everything(), as.character)) %>%
      pivot_longer(cols = -`Livestock by category`, names_to = "sub_region", values_to = "value") %>%
      mutate(value = as.numeric(value))  # Ensure value is numeric
    
    mapServer(
      id = "map",
      data = reactive({
        req(input$variable)
        pigs_data %>% filter(`Livestock by category` == input$variable)
      }),
      footer = '<div style="font-size: 16px; font-weight: bold;"><a href="https://www.gov.scot/publications/results-scottish-agricultural-census-june-2023/documents/">Source: Scottish Agricultural Census: June 2023</a></div>',
      variable = reactive(input$variable),
      title = "Pigs Distribution by Region"
    )
    
    chart_data <- reactive({
      req(input$timeseries_variables)
      filtered_data <- number_of_pigs %>%
        mutate(across(-`Pigs by category`, as.numeric)) %>%
        filter(`Pigs by category` %in% input$timeseries_variables) %>%
        pivot_longer(cols = -`Pigs by category`, names_to = "year", values_to = "value") %>%
        mutate(value = as.numeric(value))  # Ensure value is numeric
      filtered_data
    })
    
    areaChartServer(
      id = "area",
      chart_data = chart_data,
      title = "Pigs Area Chart Data",
      yAxisTitle = "Number of Pigs (1,000)",
      xAxisTitle = "Year",
      footer = '<div style="font-size: 16px; font-weight: bold;"><a href="https://www.gov.scot/publications/results-scottish-agricultural-census-june-2023/documents/">Source: Scottish Agricultural Census: June 2023</a></div>',
      x_col = "year",
      y_col = "value"
    )
    
    lineChartServer(
      id = "line",
      chart_data = chart_data,
      title = "Pigs Area Chart Data",
      yAxisTitle = "Number of Pigs (1,000)",
      xAxisTitle = "Year",
      footer = '<div style="font-size: 16px; font-weight: bold;"><a href="https://www.gov.scot/publications/results-scottish-agricultural-census-june-2023/documents/">Source: Scottish Agricultural Census: June 2023</a></div>',
      x_col = "year",
      y_col = "value"
    )
    
    output$table <- renderDT({
      req(input$tabsetPanel == "Data Table")
      if (input$table_data == "map") {
        req(input$variable)
        pigs_data %>%
          filter(`Livestock by category` == input$variable) %>%
          datatable()
      } else {
        number_of_pigs %>%
          pivot_longer(cols = -`Pigs by category`, names_to = "year", values_to = "value") %>%
          datatable()
      }
    })
  })
}

# Testing module
pigs_demo <- function() {
  ui <- fluidPage(pigsUI("pigs_test"))
  server <- function(input, output, session) {
    pigsServer("pigs_test")
  }
  shinyApp(ui, server)
}

pigs_demo()

## File: module_poultry.R 
 # File: module_poultry.R

poultryUI <- function(id) {
  ns <- NS(id)
  sidebarLayout(
    sidebarPanel(
      width = 3,
      conditionalPanel(
        condition = "input.tabsetPanel === 'Map'",
        ns = ns,
        radioButtons(
          ns("variable"), 
          "Select Variable", 
          choices = c(           
            "Total poultry" = "Total poultry",
            "Fowls for producing eggs" = "Fowls for producing eggs",
            "Fowls for breeding" = "Fowls for breeding",
            "Broilers for other table fowls and other poultry" = "Broilers for other table fowls and other poultry"
          )
        )
      ),
      conditionalPanel(
        condition = "input.tabsetPanel === 'Time Series' || input.tabsetPanel === 'Area Chart'",
        ns = ns,
        selectizeInput(
          ns("timeseries_variables"),
          "Click within the box to select variables",
          choices = unique(number_of_poultry$`Poultry by category`),
          selected = c(
            "Total fowls for producing eggs",
            "Total fowls for breeding",
            "Broilers and other table birds",
            "Total Poultry"
          ),
          multiple = TRUE,
          options = list(
            plugins = list('remove_button')
          )
        )
      ),
      conditionalPanel(
        condition = "input.tabsetPanel === 'Data Table'",
        ns = ns,
        radioButtons(
          ns("table_data"),
          "Select Data to Display",
          choices = c("Map Data" = "map", "Time Series Data" = "timeseries"),
          selected = "map"
        )
      )
    ),
    mainPanel(
      width = 9,
      tabsetPanel(
        id = ns("tabsetPanel"),
        tabPanel("Map", mapUI(ns("map"))),
        tabPanel("Time Series", lineChartUI(ns("line"))),
        tabPanel("Area Chart", areaChartUI(ns("area"))),
        tabPanel("Data Table", DTOutput(ns("table")))
      )
    )
  )
}

poultryServer <- function(id) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    
    poultry_data <- livestock_subregion %>%
      filter(`Livestock by category` %in% c(
        "Fowls for producing eggs",
        "Fowls for breeding",
        "Broilers for other table fowls and other poultry",
        "Total poultry"
      )) %>%
      select(-Scotland) %>%
      mutate(across(everything(), as.character)) %>%
      pivot_longer(cols = -`Livestock by category`, names_to = "sub_region", values_to = "value") %>%
      mutate(value = safe_as_numeric(value))
    
    mapServer(
      id = "map",
      data = reactive({
        req(input$variable)
        poultry_data %>% filter(`Livestock by category` == input$variable)
      }),
      footer = '<div style="font-size: 16px; font-weight: bold;"><a href="https://www.gov.scot/publications/results-scottish-agricultural-census-june-2023/documents/">Source: Scottish Agricultural Census: June 2023</a></div>',
      variable = reactive(input$variable),
      title = "Poultry Distribution by Region"
    )
    
    chart_data <- reactive({
      req(input$timeseries_variables)
      filtered_data <- number_of_poultry %>%
        filter(`Poultry by category` %in% input$timeseries_variables) %>%
        pivot_longer(cols = -`Poultry by category`, names_to = "year", values_to = "value") %>%
        mutate(value = safe_as_numeric(value))
    })
    
    areaChartServer(
      id = "area",
      chart_data = chart_data,
      title = "Poultry Area Chart Data",
      yAxisTitle = "Number of Poultry (1,000)",
      xAxisTitle = "Year",
      footer = '<div style="font-size: 16px; font-weight: bold;"><a href="https://www.gov.scot/publications/results-scottish-agricultural-census-june-2023/documents/">Source: Scottish Agricultural Census: June 2023</a></div>',
      x_col = "year",
      y_col = "value"
    )
    
    lineChartServer(
      id = "line",
      chart_data = chart_data,
      title = "Poultry Area Chart Data",
      yAxisTitle = "Number of Poultry (1,000)",
      xAxisTitle = "Year",
      footer = '<div style="font-size: 16px; font-weight: bold;"><a href="https://www.gov.scot/publications/results-scottish-agricultural-census-june-2023/documents/">Source: Scottish Agricultural Census: June 2023</a></div>',
      x_col = "year",
      y_col = "value"
    )
    
    output$table <- renderDT({
      req(input$tabsetPanel == "Data Table")
      if (input$table_data == "map") {
        req(input$variable)
        poultry_data %>%
          filter(`Livestock by category` == input$variable) %>%
          datatable()
      } else {
        number_of_poultry %>%
          pivot_longer(cols = -`Poultry by category`, names_to = "year", values_to = "value") %>%
          datatable()
      }
    })
  })
}

# Testing module
poultry_demo <- function() {
  ui <- fluidPage(poultryUI("poultry_test"))
  server <- function(input, output, session) {
    poultryServer("poultry_test")
  }
  shinyApp(ui, server)
}

poultry_demo()

## File: module_other_animals.R 
 # File: module_other_animals.R

otherAnimalsUI <- function(id) {
  ns <- NS(id)
  sidebarLayout(
    sidebarPanel(
      width = 3,
      conditionalPanel(
        condition = "input.tabsetPanel === 'Map'",
        ns = ns,
        radioButtons(
          ns("variable"), 
          "Select Variable", 
          choices = c(
            "Goats and kids" = "Goats and kids",
            "Deer" = "Deer",
            "Horses" = "Horses",
            "Donkeys" = "Donkeys",
            "Camelids" = "Camelids",
            "Beehives" = "Beehives"
          )
        )
      ),
      conditionalPanel(
        condition = "input.tabsetPanel === 'Time Series'",
        ns = ns,
        checkboxGroupInput(
          ns("timeseries_variables"),
          "Select Time Series Variables",
          choices = c(
            "Goats",
            "Deer",
            "Horses",
            "Donkeys",
            "Camelids",
            "Beehives"
          ),
          selected = c(
            "Goats",
            "Deer",
            "Horses",
            "Donkeys",
            "Camelids",
            "Beehives"
          )
        )
      ),
      conditionalPanel(
        condition = "input.tabsetPanel === 'Data Table'",
        ns = ns,
        radioButtons(
          ns("table_data"),
          "Select Data to Display",
          choices = c("Map Data" = "map", "Chart Data" = "timeseries"),
          selected = "map"
        )
      )
    ),
    mainPanel(
      width = 9,
      tabsetPanel(
        id = ns("tabsetPanel"),
        tabPanel("Map", mapUI(ns("map"))),
        tabPanel("Time Series", lineChartUI(ns("line"))),
        tabPanel("Data Table", DTOutput(ns("table")))
      )
    )
  )
}

otherAnimalsServer <- function(id) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    
    other_animals_data <- livestock_subregion %>%
      filter(`Livestock by category` %in% c(
        "Goats and kids",
        "Deer",
        "Horses",
        "Donkeys",
        "Camelids",
        "Beehives"
      )) %>%
      select(-Scotland) %>%
      mutate(across(everything(), as.character)) %>%
      pivot_longer(cols = -`Livestock by category`, names_to = "sub_region", values_to = "value") %>%
      mutate(value = safe_as_numeric(value))
    
    mapServer(
      id = "map",
      data = reactive({
        req(input$variable)
        other_animals_data %>% filter(`Livestock by category` == input$variable)
      }),
      footer = '<div style="font-size: 16px; font-weight: bold;"><a href="https://www.gov.scot/publications/results-scottish-agricultural-census-june-2023/documents/">Source: Scottish Agricultural Census: June 2023</a></div>',
      variable = reactive(input$variable),
      title = "Other Animals Distribution by Region"
    )
    
    chart_data <- reactive({
      req(input$timeseries_variables)
      filtered_data <- number_of_other_livestock %>%
        mutate(across(-`Livestock by category`, as.numeric)) %>%
        filter(`Livestock by category` %in% input$timeseries_variables) %>%
        pivot_longer(cols = -`Livestock by category`, names_to = "year", values_to = "value") %>%
        mutate(year = as.numeric(year))  # Ensure year is numeric
      filtered_data
    })
  
    
    lineChartServer(
      id = "line",
      chart_data = chart_data,
      title = "Other Animals Area Chart Data",
      yAxisTitle = "Number of Animals (1,000)",
      xAxisTitle = "Year",
      footer = '<div style="font-size: 16px; font-weight: bold;"><a href="https://www.gov.scot/publications/results-scottish-agricultural-census-june-2023/documents/">Source: Scottish Agricultural Census: June 2023</a></div>',
      x_col = "year",
      y_col = "value"
    )
    
    output$table <- renderDT({
      req(input$tabsetPanel == "Data Table")
      if (input$table_data == "map") {
        req(input$variable)
        other_animals_data %>%
          filter(`Livestock by category` == input$variable) %>%
          datatable()
      } else {
        number_of_other_livestock %>%
          pivot_longer(cols = -`Cattle by category`, names_to = "year", values_to = "value") %>%
          datatable()
      }
    })
  })
}

# Testing module
other_animals_demo <- function() {
  ui <- fluidPage(otherAnimalsUI("other_animals_test"))
  server <- function(input, output, session) {
    otherAnimalsServer("other_animals_test")
  }
  shinyApp(ui, server)
}

other_animals_demo()

## File: module_land_use_summary.R 
 # File: module_land_use_summary.R

library(shiny)
library(dplyr)
library(tidyr)
library(DT)

landUseSummaryUI <- function(id) {
  ns <- NS(id)
  sidebarLayout(
    sidebarPanel(
      width = 3,
      conditionalPanel(
        condition = "input.tabsetPanel === 'Map'",
        ns = ns,
        radioButtons(
          ns("variable"), 
          "Select Variable", 
          choices = unique(land_use_subregion$`Land use by category`)
        )
      ), 
      conditionalPanel(
        condition = "input.tabsetPanel === 'Summary'",
        ns = ns,
        div(
          style = "font-size: 24px; font-weight: bold;",
          " "
        )
      ), 
      conditionalPanel(
        condition = "input.tabsetPanel === 'Bar Chart'",
        ns = ns,
        checkboxGroupInput(
          ns("variables"), 
          "Choose variables to add to chart", 
          choices = c("Total crops, fallow, and set-aside", "Total grass", "Rough grazing", 
                      "Total sole right agricultural area", "Common grazings"),
          selected = c("Total crops, fallow, and set-aside", "Total grass", "Rough grazing", 
                       "Total sole right agricultural area", "Common grazings")
        )
      ),
      conditionalPanel(
        condition = "input.tabsetPanel === 'Time Series'",
        ns = ns,
        checkboxGroupInput(
          ns("timeseries_variables"),
          "Select Time Series Variables",
          choices = unique(land_use_data$`Crop/Land use`),
          selected = c(
            "Common grazings",
            "Rough grazing",
            "Total crops, fallow, and set-aside",
            "Total grass",
            "Cauliflower",
            "Total sole right agricultural area"
          )
        )
      ),
      conditionalPanel(
        condition = "input.tabsetPanel === 'Data Table'",
        ns = ns,
        radioButtons(
          ns("table_data"),
          "Select Data to Display",
          choices = c("Map Data" = "map", "Time Series Data" = "timeseries"),
          selected = "map"
        ),
        tags$div(
          style = "width: 100%;",
          downloadButton(ns("download_data"), "Download Data")
        )
      )
    ),
    mainPanel(
      id = ns("mainpanel"),
      width = 9,
      tabsetPanel(
        id = ns("tabsetPanel"),
        tabPanel("Summary",
                 div(
                   class = "container-fluid",  # Use container-fluid for full-width responsive container
                   tags$div(
                     style = "font-size: 24px; font-weight: bold;",
                     "Most of Scotland's area is used for agriculture"
                   ),
                   tags$div(
                     style = "margin-top: 20px; text-align: left;",  # Align the image container to the left
                     tags$img(src = "land_use_map.svg", alt = "Land Use Map", style = "max-width: 100%; height: auto; max-height: 500px;")
                   ),
                   tags$div(
                     style = "margin-top: 20px; font-size: 16px;",
                     HTML("
                       <p>This map shows the main farming types found in each area. Large areas of Scotland have hilly or rocky land suitable for livestock, but limited growing conditions. These areas are shown in light green on the map. The areas in black have better soil and can support crops usually grown for animal feed. Dark green areas can support vegetables, fruit and cereal farming for human consumption.</p>
                       <p>The total Scottish agricultural area in 2023 was 5.33 million hectares, 69 per cent of Scotland’s total land. However, it should be noted that large areas of agricultural land are only lightly farmed. For example, hilly or mountainous areas are mostly used for rough grazing. The total Scottish agricultural area excludes common grazing land.</p>
                       <p>More information about land use is available in the Scottish Agricultural Census.</p>
                       <p>The twin climate change and environment crises mean considerations as to how we own, use and manage our land have never been as important as they are now. Scotland’s land and the natural capital it supports are some of our most valuable assets. It is vital to our environment, economy and wellbeing as individuals and communities. Information about land use policy is available on <a href='https://www.gov.scot' target='_blank'>gov.scot</a>.</p>
                     ")
                   )
                 )
        ),
        tabPanel("Map", mapUI(ns("map"))),
        tabPanel("Bar Chart", barChartUI(ns("bar_chart"))),
        tabPanel("Time Series", lineChartUI(ns("line"))),
        tabPanel("Data Table", DTOutput(ns("table")))
      )
    )
  )
}


landUseSummaryServer <- function(id) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    
    land_use_map <- land_use_subregion %>%
      select(-Scotland) %>%
      mutate(across(everything(), as.character)) %>%
      pivot_longer(cols = -`Land use by category`, names_to = "sub_region", values_to = "value") %>%
      mutate(value = as.numeric(value))
    
    mapServer(
      id = "map",
      data = reactive({
        req(input$variable)
        land_use_map %>% filter(`Land use by category` == input$variable)
      }),
      unit = "hectares",
      footer = '<div style="font-size: 16px; font-weight: bold;"><a href="https://www.gov.scot/publications/results-scottish-agricultural-census-june-2023/documents/">Source: Scottish Agricultural Census: June 2023</a></div>',
      variable = reactive(input$variable),
      title = "Land Use by Region (hectares)"
    )
    
    chart_data <- reactive({
      agricultural_area_hectares %>%
        filter(`Crop/Land use` %in% input$variables) %>%
        select(`Crop/Land use`, `2023 Area`) %>%
        rename(Variable = `Crop/Land use`, Value = `2023 Area`)
    })
    
    timeseries_data <- reactive({
      req(input$timeseries_variables)
      filtered_data <- land_use_data %>%
        filter(`Crop/Land use` %in% input$timeseries_variables) %>%
        pivot_longer(cols = -`Crop/Land use`, names_to = "year", values_to = "value") %>%
        mutate(year = as.numeric(year))  # Ensure year is numeric
      filtered_data
    })
    
    barChartServer(
      id = "bar_chart",
      chart_data = chart_data,
      title = "Agricultural Area in 2023 by Land Use Type",
      yAxisTitle = "Area (1,000 hectares)",
      xAxisTitle = "Land Use Type",
      unit = "hectares",
      footer = '<div style="font-size: 16px; font-weight: bold;"><a href="https://www.gov.scot/publications/results-scottish-agricultural-census-june-2023/documents/">Source: Scottish Agricultural Census: June 2023</a></div>',
      x_col = "Variable",
      y_col = "Value",
      tooltip_format = "Area (hectares): {point.y:.2f}"
    )
    
    lineChartServer(
      id = "line",
      chart_data = timeseries_data,
      title = "Land Use Chart Data",
      yAxisTitle = "Area of Land Use (1,000 hectares)",
      xAxisTitle = "Year",
      unit = "hectares",
      footer = '<div style="font-size: 16px; font-weight: bold;"><a href="https://www.gov.scot/publications/results-scottish-agricultural-census-june-2023/documents/">Source: Scottish Agricultural Census: June 2023</a></div>',
      x_col = "year",
      y_col = "value"
    )
    
    output$table <- renderDT({
      req(input$tabsetPanel == "Data Table")
      if (input$table_data == "map") {
        req(input$variable)
        datatable(land_use_subregion)
      } else {
        datatable(land_use_data)
      }
    })
    
    output$download_data <- createDownloadHandler(
      input = input,
      file_map_name = "Land_Use_Subregion_Data.xlsx",
      file_timeseries_name = "Land_Use_Timeseries_Data.xlsx",
      map_data = land_use_subregion,
      timeseries_data = land_use_data
    )
  })
}

land_use_demo <- function() {
  ui <- fluidPage(landUseSummaryUI("land_use_test"))
  server <- function(input, output, session) {
    landUseSummaryServer("land_use_test")
  }
  shinyApp(ui, server)
}

land_use_demo()

## File: module_animals_summary.R 
 # module_summary_animals.R

# Reactive data setup for Animals
full_data_animals <- reactive({
  total_animals %>%
    pivot_longer(
      cols = starts_with("Total"),
      names_to = "Animal_Type",
      values_to = "Value"
    )
})
units_animals <- "animals"

# UI for Summary Animals Module
animalsSummaryUI <- function(id) {
  ns <- NS(id)
  tagList(
    sidebarLayout(
      sidebarPanel(
        width = 3,
        sliderInput(ns("summary_current_year_animals"), "Current Year", min = 2012, max = 2023, value = 2023, step = 1, sep = ""),
        sliderInput(ns("summary_comparison_year_animals"), "Comparison Year", min = 2012, max = 2023, value = 2022, step = 1, sep = "")
      ),
      mainPanel(
        id = ns("mainpanel"),
        width = 9,
        tabsetPanel(
          id = ns("tabs"),
          tabPanel("Summary Page",
                   value = "Summary_Page",
                   HTML("<h3>Work in progress</h3>"),  # Added work in progress message
                   fluidRow(
                     column(width = 6, valueBoxUI(ns("totalCattle")), style = "padding-right: 0; padding-left: 0;"),
                     column(width = 6, valueBoxUI(ns("totalSheep")), style = "padding-right: 0; padding-left: 0;")
                     
                   ),
                   fluidRow(
                     column(width = 6, valueBoxUI(ns("totalPigs")), style = "padding-right: 0; padding-left: 0;"),
                     column(width = 6, valueBoxUI(ns("totalPoultry")), style = "padding-right: 0; padding-left: 0;")
                     
                   )
          )
        )
      )
    )
  )
}

# Server for Summary Animals Module
animalsSummaryServer <- function(id) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    
    current_year <- reactive({ input$summary_current_year_animals })
    comparison_year <- reactive({ input$summary_comparison_year_animals })
    valueBoxServer("totalCattle", full_data_animals, "Animal_Type", reactive("Total cattle"), current_year, comparison_year, "cattle")
    valueBoxServer("totalSheep", full_data_animals, "Animal_Type", reactive("Total sheep"), current_year, comparison_year, "sheep")
    valueBoxServer("totalPigs", full_data_animals, "Animal_Type", reactive("Total pigs"), current_year, comparison_year, "pigs")
    valueBoxServer("totalPoultry", full_data_animals, "Animal_Type", reactive("Total poultry"), current_year, comparison_year, "poultry")
    
    
  })
}

# Testing module
content_demo <- function() {
  ui <- fluidPage(animalsSummaryUI("summary_animals_test"))
  server <- function(input, output, session) {
    animalsSummaryServer("summary_animals_test")
  }
  shinyApp(ui, server)
}

content_demo()
