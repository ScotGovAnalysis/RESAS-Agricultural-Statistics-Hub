## File: app.R 
 # Source other elements
source("module_line_chart.R")
source("module_area_chart.R")
source("module_data_table.R")
source("options.R")
source("module_summary.R")
source("module_employees.R")
source("module_legal_responsibility.R")
source("module_manure_usage.R")
source("module_farm_types.R")
source("module_occupiers.R")
source("module_land_use_summary.R")
source("module_owned_land.R")
source("module_cattle.R")  # Added new module

# Source the UI and server components
source("ui.R")
source("server.R")

# Run the app
shinyApp(ui = ui, server = server)

## File: data.R 
 ## data.R

library(readxl)
library(openxlsx)
library(dplyr)
library(tidyr)



# Load  data from the Excel file
file_path <- "ghg_data.xlsx"
agri_gas <- read_excel(file_path, sheet = "agri_gas")
national_total <- read_excel(file_path, sheet = "national_total")
subsector_total <- read_excel(file_path, sheet = "subsector_total")
subsector_source <- read_excel(file_path, sheet = "subsector_source")

agri_gas <- agri_gas %>% 
  rename(Gas = ...1)

# Reshape the data to long format
agri_gas <- agri_gas %>% pivot_longer(cols = -Gas, names_to = "Year", values_to = "Value")
national_total <- national_total %>% pivot_longer(cols = -Industry, names_to = "Year", values_to = "Value")
subsector_total <- subsector_total %>% pivot_longer(cols = -Subsector, names_to = "Year", values_to = "Value")

# Convert Year to numeric
agri_gas$Year <- as.numeric(agri_gas$Year)
national_total$Year <- as.numeric(national_total$Year)
subsector_total$Year <- as.numeric(subsector_total$Year)


save(subsector_total, agri_gas, national_total, subsector_source, file = "ghg_data.RData")

# load data
load("ghg_data.RData")



# File: load_tables.R

library(readxl)
library(dplyr)
library(stringr)

# Define file path
file_path <- "June+Agricultural+Census+2023+Tables.xlsx"

# Define the simplified table names and corresponding sheet names
table_names <- c(
  "agricultural_area_hectares" = "Table_1",
  "vegetables_bulbs_fruit_area" = "Table_2",
  "number_of_cattle" = "Table_3 ",
  "number_of_sheep" = "Table_4 ",
  "number_of_pigs" = "Table_5",
  "number_of_poultry" = "Table_6",
  "number_of_other_livestock" = "Table_7",
  "occupiers_employees" = "Table_8",
  "occupiers_age_gender" = "Table_9",
  "legal_responsibility" = "Table_10",
  "owned_rented_land" = "Table_11",
  "farm_type" = "Table_12",
  "agricultural_area_lfa" = "Table_13",
  "holdings_crops_grass_subregion" = "Table_14",
  "crops_grass_area_subregion" = "Table_15",
  "holdings_livestock_region_subregion" = "Table_16",
  "livestock_subregion" = "Table_17",
  "holdings_occupiers_employees_subregion" = "Table_18",
  "occupiers_employees_subregion" = "Table_19",
  "arable_rotation" = "Table_20",
  "manure_fertiliser" = "Table_21"
)

# Function to remove columns and rows that are all NAs
clean_data <- function(data) {
  data <- data[, colSums(is.na(data)) < nrow(data)]  # Remove columns with all NAs
  data <- data[rowSums(is.na(data)) < ncol(data), ]  # Remove rows with all NAs
  return(data)
}

# Function to clean header names by removing text within brackets, any '\r\n', extra spaces, and specific region names
clean_headers <- function(headers) {
  headers <- str_replace_all(headers, "\\s*\\([^\\)]+\\)", "")  # Remove text within brackets
  headers <- str_replace_all(headers, "\r\n", " ")  # Remove \r\n
  headers <- str_replace_all(headers, "\\s+", " ")  # Replace multiple spaces with a single space
  headers <- str_replace_all(headers, "\\b(North West|North East|South East|South West)\\b", "")  # Remove specific region names
  headers <- str_trim(headers)  # Trim again to remove any resulting leading or trailing spaces
  return(headers)
}

# Function to clean cell values by replacing multiple spaces with a single space
clean_cells <- function(data) {
  data <- data %>% mutate(across(where(is.character), ~str_replace_all(.x, "\\s+", " ")))
  return(data)
}

# Read each table, clean it, and assign to a variable
for (table in names(table_names)) {
  sheet_name <- table_names[table]
  data <- read_excel(file_path, sheet = sheet_name)
  
  # Clean headers
  headers <- names(data)
  cleaned_headers <- clean_headers(headers)
  
  # Remove columns with '5 year' in the header (case insensitive)
  columns_to_remove <- grep("5 year", cleaned_headers, ignore.case = TRUE)
  if (length(columns_to_remove) > 0) {
    data <- data[, -columns_to_remove]
    cleaned_headers <- cleaned_headers[-columns_to_remove]
  }
  
  # Assign cleaned headers to the data
  names(data) <- cleaned_headers
  
  # Remove '\r\n' from all character columns and clean multiple spaces
  data <- data %>% mutate(across(where(is.character), ~str_replace_all(.x, "\r\n", " ")))
  data <- clean_cells(data)
  
  # Clean data
  cleaned_data <- clean_data(data)
  
  assign(table, cleaned_data)
}


# Save all tables to an RData file
save(list = names(table_names), file = "census_data.RData")

load("census_data.RData")


library(sf)
library(dplyr)
library(highcharter)
library(geojsonio)
library(rmapshaper)

# Load the shapefile
local_authorities <- st_read("pub_las.shp")

mapping_data <- data.frame(
  region = c("North West", "North West", "North West", "North West", 
             "North East", "North East", "North East", 
             "South East", "South East", "South East", "South East", "South East", 
             "South East", "South East", "South East", "South East",
             "South West", "South West", "South West", "South West", "South West", 
             "South West", "South West", "South West", "South West", "South West", 
             "South West", "South West", "South West", "South West", "South West", "South West"
             ),
  sub_region = c("Shetland", "Orkney", "Na h-Eileanan Siar", "Highland", 
                 "Grampian", "Grampian", "Grampian", 
                 "Tayside", "Tayside", "Tayside", "Fife", "Lothian", "Lothian", "Lothian", "Lothian", 
                 "Scottish Borders", "East Central", "East Central", "East Central", 
                 "Argyll & Bute", "Clyde Valley", "Clyde Valley", "Clyde Valley", "Clyde Valley", 
                 "Clyde Valley", "Clyde Valley", "Clyde Valley", "Clyde Valley", "Ayrshire", "Ayrshire", "Ayrshire", 
                 "Dumfries & Galloway"),
  local_authority = c("Shetland Islands", "Orkney Islands", "Na h-Eileanan an Iar", "Highland", 
                      "Aberdeen City", "Aberdeenshire", "Moray", 
                      "Angus", "Dundee City", "Perth and Kinross", "Fife", "East Lothian", "City of Edinburgh", 
                      "Midlothian", "West Lothian", "Scottish Borders", 
                      "Clackmannanshire", "Falkirk", "Stirling", 
                      "Argyll and Bute", "East Dunbartonshire", "East Renfrewshire", "Glasgow City", 
                      "Inverclyde", "North Lanarkshire", "Renfrewshire", "South Lanarkshire", 
                      "West Dunbartonshire", "East Ayrshire", "North Ayrshire", "South Ayrshire", 
                      "Dumfries and Galloway")
)

# Merge the shapefile with the mapping data
local_authorities <- local_authorities %>%
  left_join(mapping_data, by = c("local_auth" = "local_authority"))

# Ensure geometries are valid
local_authorities <- st_make_valid(local_authorities)

sub_regions <- local_authorities %>%
  group_by(sub_region) %>%
  summarise(geometry = st_union(geometry))

st_write(sub_regions, "sub_regions.geojson", driver = "GeoJSON")

# Load the GeoJSON file
geojson_data <- geojson_read("sub_regions.geojson", what = "sp")

geojson_data <- ms_simplify(geojson_data, keep = 0.001)

geojson_write(geojson_data, file = "subregions_simplified.geojson")


## File: hc_theme.R 
 # hc_theme.R

library(highcharter)

# Define the Highcharts theme
thm <- hc_theme(
  chart = list(
    style = list(
      fontFamily = "Arial, sans-serif",
      fontSize = "16px",
      color = "black"
    )
  ),
  title = list(
    style = list(
      fontFamily = "Arial, sans-serif",
      fontSize = "16px",
      color = "black"
    )
  ),
  subtitle = list(
    style = list(
      fontFamily = "Arial, sans-serif",
      fontSize = "16px",
      color = "black"
    )
  ),
  xAxis = list(
    labels = list(
      style = list(
        fontFamily = "Arial, sans-serif",
        fontSize = "16px",
        color = "black"
      )
    ),
    title = list(
      style = list(
        fontFamily = "Arial, sans-serif",
        fontSize = "16px",
        color = "black"
      )
    )
  ),
  yAxis = list(
    labels = list(
      style = list(
        fontFamily = "Arial, sans-serif",
        fontSize = "16px",
        color = "black"
      )
    ),
    title = list(
      style = list(
        fontFamily = "Arial, sans-serif",
        fontSize = "16px",
        color = "black"
      )
    )
  ),
  tooltip = list(
    style = list(
      fontFamily = "Arial, sans-serif",
      fontSize = "16px",
      color = "black"
    ),
    headerFormat = "<b>{point.key}</b><br/>",  
    pointFormat = "{series.name}: {point.y:.2f}"
  ),
  legend = list(
    itemStyle = list(
      fontFamily = "Arial, sans-serif",
      fontSize = "16px",
      color = "black"
    )
  ),
  plotOptions = list(
    series = list(
      stickyTracking = FALSE,
      itemStyle = list(
        fontFamily = "Arial, sans-serif",
        fontSize = "16px",
        color = "black"
      ),
      dataLabels = list(
        style = list(
          fontFamily = "Arial, sans-serif",
          fontSize = "16px",  # Increase the font size for data labels
          color = "black"
        )
      ),
      marker = list(
        enabled = TRUE,
        states = list(
          hover = list(
            enabled = TRUE
          )
        )
      )
    )
  ),
  colors = c("#ca72a2", "#592c20", "#5d9f3c", "#0b4c0b", "#e5682a", "#6a2063", "#2b9c93", "#002d54")
)

# Apply the Highcharts theme globally
options(highcharter.theme = thm)

## File: module_area_chart.R 
 areaChartUI <- function(id) {
  ns <- NS(id)
  tagList(
    htmlOutput(ns("title")),
    highchartOutput(ns("area_chart")),
    htmlOutput(ns("footer")),
    div(
      class = "note",
      style = "margin-top: 20px; padding: 10px; border-top: 1px solid #ddd;",
      HTML(
        "<strong>Note:</strong><ul>
          <li>To remove a series from the chart, deselect the variable from the sidebar menu.</li>
          <li>Select a year range by adjusting the slider on the sidebar or by zooming into the graph by clicking and dragging over an area you wish to see.</li>
          <li>You can see data values for a specific year by hovering your mouse over the area.</li>
        </ul>"
      )
    )
  )
}

areaChartServer <- function(id, chart_data, title, yAxisTitle, xAxisTitle, footer, x_col, y_col) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    reactive_colors <- reactive({ assign_colors(chart_data(), preset_colors) })
    
    output$title <- renderUI({
      year_min <- min(chart_data()[[x_col]], na.rm = TRUE)
      year_max <- max(chart_data()[[x_col]], na.rm = TRUE)
      HTML(paste0("<div style='font-size: 20px; font-weight: bold;'>", title, ", ", year_min, " to ", year_max, "</div>"))
    })
    
    output$footer <- renderUI({
      HTML(footer)
    })
    
    output$area_chart <- renderHighchart({
      data <- chart_data()
      colors <- reactive_colors()
      group_column <- setdiff(names(data), c(x_col, y_col))[1] # Assuming only one group column
      hc <- highchart() %>%
        hc_chart(type = "area", zoomType = "xy") %>%
        hc_yAxis(title = list(text = yAxisTitle)) %>%
        hc_xAxis(title = list(text = xAxisTitle), type = "category", tickInterval = 5) %>%
        hc_plotOptions(area = list(stacking = "normal")) %>%
        hc_legend(align = "left", alignColumns = FALSE, layout = "horizontal") %>%
        hc_plotOptions(area = list(stickyTracking = TRUE)) %>%
        hc_add_theme(thm)
      
      unique_groups <- unique(data[[group_column]])
      lapply(unique_groups, function(g) {
        hc <<- hc %>%
          hc_add_series(name = g, data = data[data[[group_column]] == g, ] %>% select(x = !!sym(x_col), y = !!sym(y_col)), color = colors[[g]])
      })
      
      hc
    })
  })
}

## File: module_bar_chart.R 
 # File: module_bar_chart_combined.R

barChartUI <- function(id) {
  ns <- NS(id)
  tagList(
    htmlOutput(ns("title")),
    highchartOutput(ns("bar_chart")),
    htmlOutput(ns("footer")),
    div(
      class = "note",
      style = "margin-top: 20px; padding: 10px; border-top: 1px solid #ddd;",
      HTML(
        "<strong>Note:</strong><ul>
          <li>You can see data values for a specific variable by hovering your mouse over the bars.</li>
        </ul>"
      )
    )
  )
}

# File: module_bar_chart.R

barChartServer <- function(id, chart_data, title, yAxisTitle, xAxisTitle, footer, x_col, y_col, tooltip_format, maintain_order = FALSE) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    reactive_colors <- reactive({ assign_colors(chart_data(), preset_colors) })
    
    output$title <- renderUI({
      HTML(paste0("<div style='font-size: 20px; font-weight: bold;'>", title, "</div>"))
    })
    
    output$footer <- renderUI({
      HTML(footer)
    })
    
    output$bar_chart <- renderHighchart({
      data <- chart_data()
      if (nrow(data) == 0) return(NULL)
      colors <- reactive_colors()
      group_column <- setdiff(names(data), c(x_col, if (is.reactive(y_col)) y_col() else y_col))[1]
      
      if (is.reactive(y_col)) {
        y_col_value <- y_col()
      } else {
        y_col_value <- y_col
      }
      
      if (!maintain_order) {
        data <- data %>%
          arrange(desc(!!sym(y_col_value)))  # Sort data by value in descending order
      }
      
      highchart() %>%
        hc_chart(type = "bar", inverted = TRUE, zoomType = "xy") %>%
        hc_xAxis(categories = data[[x_col]], title = list(text = xAxisTitle)) %>%
        hc_yAxis(title = list(text = if (is.reactive(yAxisTitle)) yAxisTitle() else yAxisTitle), allowDecimals = FALSE) %>%
        hc_plotOptions(bar = list(
          dataLabels = list(enabled = FALSE),
          colorByPoint = TRUE,
          groupPadding = 0,
          pointPadding = 0.1,
          borderWidth = 0
        )) %>%
        hc_add_series(
          name = "",
          data = data %>% mutate(y = !!sym(y_col_value), color = colors[!!sym(x_col)]) %>% 
            select(name = !!sym(x_col), y, color),
          colorByPoint = TRUE,
          showInLegend = FALSE
        ) %>%
        hc_tooltip(
          style = list(
            fontFamily = "Arial, sans-serif",
            fontSize = "16px",
            color = "black"
          ),
          headerFormat = "<b>{point.key}</b><br/>",  
          pointFormat = if (is.reactive(tooltip_format)) tooltip_format() else tooltip_format
        ) %>%
        hc_add_theme(thm)
    })
  })
}

## File: module_timelapse_bar_chart.R 
 #module_timelapse_bar_chart.R

timelapseBarChartUI <- function(id) {
  ns <- NS(id)
  tagList(
    tags$style(HTML("
      .chart-container {
        position: relative;
      }
      .chart-controls {
        display: flex;
        align-items: center;
      }
      .chart-controls .form-group {
        margin-bottom: 0;
        margin-left: 10px;
      }
      .chart-controls .btn {
        margin-left: 10px;
      }
      .year-label {
        margin-right: 10px;
        font-weight: bold;
      }
    ")),
    div(class = "chart-container",
        fluidRow(
          column(8, htmlOutput(ns("title"))),
          column(4, div(class = "chart-controls",
                        div(class = "year-label", "Year:"),
                        sliderInput(ns("year"), NULL, min = 1998, max = 2022, value = 1998, step = 1, sep = "", ticks = TRUE, animate = animationOptions(interval = 1000, loop = FALSE), width = '200px'),
                        actionButton(ns("playPause"), "", icon = icon("play"), class = "btn btn-primary")
          ))
        ),
        highchartOutput(ns("chart"), height = "500px")
    ),
    htmlOutput(ns("footer")),
    div(
      class = "note",
      style = "margin-top: 20px; padding: 10px; border-top: 1px solid #ddd;",
      HTML(
        "<strong>Note:</strong><ul>
          <li>Press the play button at the top right of the screen to see the timelapse of the data. You can manually adjust the year by adjusting the slider.</li>
          <li>To remove a series from the chart, deselect the variable from the sidebar menu.</li>
          <li>You can see data values for a specific year by hovering your mouse over the line.</li>
        </ul>"
      )
    )
  )
}

timelapseBarChartServer <- function(id, chart_data, title, yAxisTitle, xAxisTitle, footer, x_col, y_col) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    
    max_value <- reactive({
      all_data <- chart_data()
      if (is.null(all_data) || nrow(all_data) == 0) return(0)
      max_val <- max(all_data[[y_col]], na.rm = TRUE)
      return(max_val)
    })
    
    getData <- function(year, nbr) {
      data <- chart_data()
      if (is.null(data) || nrow(data) == 0) return(data.frame())
      data %>%
        filter(!!sym(x_col) == year) %>%
        arrange(desc(!!sym(y_col))) %>%
        slice(1:nbr) %>%
        mutate(!!sym(y_col) := as.numeric(!!sym(y_col)))
    }
    
    getSubtitle <- function(year, data) {
      if (nrow(data) == 0) return("")
      total_value <- sum(data[[y_col]], na.rm = TRUE)
      paste0("<span style='font-size: 80px'>", year, "</span><br><span style='font-size: 22px'>Total: <b>", round(total_value, 2), "</b> MtCO₂e</span>")
    }
    
    getDataList <- function(data, colors) {
      if (nrow(data) == 0) return(list())
      first_col_name <- names(data)[1]
      lapply(1:nrow(data), function(i) {
        list(
          name = data[[first_col_name]][i],
          y = data[[y_col]][i],
          color = colors[[data[[first_col_name]][i]]]
        )
      })
    }
    
    current_year <- reactiveVal(1998)
    nbr <- 20
    
    current_data <- reactive({
      getData(current_year(), nbr)
    })
    
    current_subtitle <- reactive({
      getSubtitle(current_year(), current_data())
    })
    
    current_colors <- reactive({
      assign_colors(chart_data(), preset_colors)
    })
    
    current_data_list <- reactive({
      getDataList(current_data(), current_colors())
    })
    
    updateYear <- function() {
      year <- current_year()
      if (year < 2022) {
        current_year(year + 1)
      } else {
        current_year(1998)
        session$sendCustomMessage(type = 'resetPlayButton', message = NULL)
      }
    }
    
    observe({
      if (!is.null(input$playPause) && input$playPause %% 2 == 1) {
        isolate({
          updateYear()
        })
        invalidateLater(1000, session)
      }
    })
    
    observe({
      updateSliderInput(session, "year", value = current_year())
    })
    
    output$title <- renderUI({
      HTML(paste0("<div style='font-size: 20px; font-weight: bold;'>", title, "</div>"))
    })
    
    output$footer <- renderUI({
      HTML(footer)
    })
    
    output$chart <- renderHighchart({
      data <- current_data()
      if (nrow(data) == 0) return(NULL)
      first_col_name <- names(data)[1]
      highchart() %>%
        hc_chart(type = "bar", zoomType = "xy", animation = list(duration = 1000)) %>%
        hc_xAxis(type = "category", categories = data[[first_col_name]]) %>%
        hc_yAxis(opposite = TRUE, tickPixelInterval = 150, title = list(text = yAxisTitle), max = max_value() + 1) %>%
        hc_plotOptions(series = list(
          animation = FALSE,
          groupPadding = 0,
          pointPadding = 0.1,
          borderWidth = 0,
          colorByPoint = FALSE,
          dataSorting = list(enabled = TRUE, matchByName = TRUE),
          dataLabels = list(enabled = TRUE, format = '{point.y:.2f}')
        )) %>%
        hc_series(list(
          name = as.character(current_year()),
          data = current_data_list()
        )) %>%
        hc_legend(enabled = FALSE) %>%
        hc_responsive(rules = list(
          list(
            condition = list(maxWidth = 550),
            chartOptions = list(
              xAxis = list(visible = FALSE),
              plotOptions = list(
                series = list(
                  dataLabels = list(
                    list(enabled = TRUE, y = 8),
                    list(enabled = TRUE, format = '{point.name}', y = -8, style = list(fontWeight = 'normal', opacity = 0.7))
                  )
                )
              )
            )
          )
        ))
    })
    
    observeEvent(input$year, {
      current_year(input$year)
    })
  })
}

## File: module_data_table.R 
 library(DT)
library(dplyr)
library(tidyr)

# Function to render data tables using DT::renderDT
render_data_table <- function(table_id, chart_data, output) {
  output[[table_id]] <- DT::renderDT({
    data <- chart_data()
    if ("Year" %in% colnames(data)) {
      data$Year <- as.character(data$Year)
      first_column_name <- names(data)[1]
      data <- pivot_wider(data, names_from = !!sym(first_column_name), values_from = Value)
    }
    data <- data %>% mutate(across(where(is.numeric), ~ formatC(.x, format = "f", digits = 2)))
    datatable(as_tibble(data), options = list(paging = FALSE, scrollX = TRUE, dom = 'Bfrtip', buttons = c('copy', 'csv', 'excel', 'pdf', 'print')), rownames = FALSE)
  })
}

# Function to handle data download
handle_data_download <- function(download_id, chart_type, chart_data, input, output, year_input = NULL) {
  output[[download_id]] <- downloadHandler(
    filename = function() {
      if (!is.null(year_input)) {
        paste("Agricultural Emissions Data -", chart_type, min(input[[year_input]]), "to", max(input[[year_input]]), ".csv")
      } else {
        paste("Agricultural Emissions Data -", chart_type, ".csv")
      }
    },
    content = function(file) { 
      data <- chart_data()
      if ("Year" %in% colnames(data)) {
        first_column_name <- names(data)[1]
        data <- pivot_wider(data, names_from = !!sym(first_column_name), values_from = Value)
      }
      data <- data %>% mutate(across(where(is.numeric), ~ formatC(.x, format = "f", digits = 5)))
      write.csv(data, file, row.names = FALSE)
    }
  )
}

## File: module_information.R 
 # module_information.R

informationUI <- function(id) {
  ns <- NS(id)
  tagList(
    div(
      class = "container",
      tags$div(style = "font-size: 24px; font-weight: bold;", "Publications:"),  # Bigger and bold title
      tags$div(
        style = "margin-top: 20px;",
        tags$div(style = "font-size: 18px; font-weight: bold;", "Scottish Greenhouse Gas Statistics"),
        p(HTML('Official estimates of greenhouse gas emissions are available in the <a href="https://www.gov.scot/publications/scottish-greenhouse-gas-statistics-2022/documents/" target="_blank">Scottish Greenhouse Gas Statistics 2022</a> publication.')),
        tags$div(style = "font-size: 18px; font-weight: bold;", "Greenhouse Gas Inventory Reports"),
        p(a(href = "https://www.gov.scot/publications/estimated-dairy-emissions-mitigation-smart-inventory/", "Greenhouse gas inventory: estimated dairy emissions and their mitigation", target = "_blank")),
        tags$div(style = "font-size: 18px; font-weight: bold;", "Climate change evidence reports"),
        p(a(href = "https://www.gov.scot/publications/resas-climate-change-evidence-dairy-farmer-led-group/", "Dairy Farmer-led Group: climate change evidence", target = "_blank")),
        p(a(href = "https://www.gov.scot/publications/resas-climate-change-evidence-arable-farmer-led-group/", "Arable Farmer-led Group: climate change evidence", target = "_blank")),
        p(a(href = "https://www.gov.scot/publications/resas-climate-change-evidence-huc-farmer-led-group/", "Hill, Upland and Crofting Farmer-led Group: climate change evidence", target = "_blank")),
        p(a(href = "https://www.gov.scot/publications/pig-sector-flg-climate-change-greenhouse-gas-evidence/", "Pig Sector Farmer-Led Climate Change Group: climate change and greenhouse gas evidence", target = "_blank")),
        tags$div(style = "font-size: 18px; font-weight: bold;", "Greenhouse Gas Inventory Reports"),
        p(a(href = "https://www.gov.scot/publications/estimated-dairy-emissions-mitigation-smart-inventory/", "Greenhouse gas inventory: estimated dairy emissions and their mitigation", target = "_blank")),
        p(a(href = "https://www.gov.scot/publications/estimated-arable-emissions-mitigation-smart-inventory/", "Greenhouse gas inventory: estimated arable emissions and their mitigation", target = "_blank")),
        p(a(href = "https://www.gov.scot/publications/disaggregating-headline-smart-inventory-figures/", "Greenhouse gas emissions - agricultural: disaggregating headline figures", target = "_blank"))
      ),
      tags$div(style = "font-size: 24px; font-weight: bold; margin-top: 40px;", "Glossary:"),  # Bigger and bold title
      tags$div(
        style = "margin-top: 20px;",
        tags$div(style = "font-size: 18px; font-weight: bold;", "Carbon dioxide (CO2):"),
        p("Carbon dioxide is one of the main gases responsible for climate change. It is mostly emitted through the oxidation of carbon in fossil fuels, e.g. burning coal."),
        tags$div(style = "font-size: 18px; font-weight: bold;", "Greenhouse gas:"),
        p("A greenhouse gas is a gas which absorbs infrared radiation emitted from the surface of the Earth, helping to retain a portion of that energy in the atmosphere as heat."),
        tags$div(style = "font-size: 18px; font-weight: bold;", "LULUCF:"),
        p("Estimates of emissions and removals from land use, land use change and forestry (LULUCF) depend critically on assumptions made on the rate of loss or gain of carbon in Scotland’s carbon rich soils. In Scotland, LULUCF activities, taken as a whole, acts as a slight source in recent years although acted as a net sink between 2009-2017, absorbing more greenhouse gas emissions than it releases."),
        tags$div(style = "font-size: 18px; font-weight: bold;", "Methane (CH4):"),
        p("Methane is a greenhouse gas that is around 28 times more potent in the atmosphere than CO2 over a 100-year time horizon. Main sources include agriculture and landfill."),
        tags$div(style = "font-size: 18px; font-weight: bold;", "Metric tonne of carbon dioxide equivalent (MtCO₂e):"),
        p("Provides an estimate of total GHG emissions taking into account the different effects that different gases have on climate change, known as their global warming potential (GWP)."),
        tags$div(style = "font-size: 18px; font-weight: bold;", "Nitrous oxide (N2O):"),
        p("Nitrous oxide is a greenhouse gas that is around 265 times more potent in the atmosphere than CO2 over a 100-year time horizon. The main source is agricultural soil.")
      )
    )
  )
}

## File: module_line_chart.R 
 lineChartUI <- function(id) {
  ns <- NS(id)
  tagList(
    htmlOutput(ns("title")),
    highchartOutput(ns("line_chart")),
    htmlOutput(ns("footer")),
    div(
      class = "note",
      style = "margin-top: 20px; padding: 10px; border-top: 1px solid #ddd;",
      HTML(
        "<strong>Note:</strong><ul>
          <li>To add or remove a series from the chart, select/deselect the variable from the sidebar menu.</li>
          <li>Select a year range by adjusting the slider on the sidebar or by zooming into the graph by clicking and dragging over an area you wish to see.</li>
          <li>You can see data values for a specific year by hovering your mouse over the line.</li>
        </ul>"
      )
    )
  )
}

lineChartServer <- function(id, chart_data, title, yAxisTitle, xAxisTitle, footer, x_col, y_col) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    reactive_colors <- reactive({ assign_colors(chart_data(), preset_colors) })
    
    output$title <- renderUI({
      year_min <- min(chart_data()[[x_col]], na.rm = TRUE)
      year_max <- max(chart_data()[[x_col]], na.rm = TRUE)
      HTML(paste0("<div style='font-size: 20px; font-weight: bold;'>", title, ", ", year_min, " to ", year_max, "</div>"))
    })
    
    output$footer <- renderUI({
      HTML(footer)
    })
    
    output$line_chart <- renderHighchart({
      data <- chart_data()
      colors <- reactive_colors()
      group_column <- setdiff(names(data), c(x_col, y_col))[1] # Assuming only one group column
      hc <- highchart() %>%
        hc_chart(type = "line", zoomType = "xy") %>%
        hc_yAxis(title = list(text = yAxisTitle)) %>%
        hc_xAxis(title = list(text = xAxisTitle), type = "category", tickInterval = 5) %>%
        hc_legend(align = "left", alignColumns = FALSE, layout = "horizontal") %>%
        hc_plotOptions(line = list(colorByPoint = FALSE)) %>%
        hc_add_theme(thm)
      
      unique_groups <- unique(data[[group_column]])
      lapply(unique_groups, function(g) {
        hc <<- hc %>%
          hc_add_series(name = g, data = data[data[[group_column]] == g, ] %>% select(x = !!sym(x_col), y = !!sym(y_col)), color = colors[[g]])
      })
      
      hc
    })
  })
}

## File: module_summary.R 
 #module_summary.R

library(shiny)
library(shinydashboard)
library(ggplot2)
library(dplyr)
library(highcharter)



# Function to create a small line plot for the value boxes
small_line_plot <- function(data, color) {
  ggplot(data, aes(x = Year, y = Value)) +
    geom_line(color = "#002d54") +
    theme_void() +
    theme(plot.background = element_rect(fill = "transparent", color = NA))
}

# Function to create an arrow for Year on Year change
create_yoy_arrow <- function(change) {
  if (is.na(change) || is.nan(change)) {
    icon("minus", style = "color: grey;")
  } else if (change > 0) {
    icon("arrow-up", style = "color: #2b9c93;")
  } else {
    icon("arrow-down", style = "color: #002d54;")
  }
}

# UI Module for Value Box
valueBoxUI <- function(id) {
  ns <- NS(id)
  uiOutput(ns("valueBox"))
}

# Server Module for Value Box
valueBoxServer <- function(id, data, category, industry, current_year, comparison_year) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    reactive_data <- reactive({ data() %>% filter(!!sym(category()) == !!industry(), Year %in% c(current_year(), comparison_year())) })
    
    output$valueBox <- renderUI({
      data_filtered <- reactive_data()
      current_value <- data_filtered %>% filter(Year == current_year()) %>% summarise(Value = sum(Value, na.rm = TRUE)) %>% pull(Value)
      comparison_value <- data_filtered %>% filter(Year == comparison_year()) %>% summarise(Value = sum(Value, na.rm = TRUE)) %>% pull(Value)
      yoy_change <- if (comparison_value == 0 || is.na(comparison_value)) NA else ((current_value - comparison_value) / comparison_value) * 100
      
      box(
        class = "value-box",
        title = NULL,
        width = 12,
        solidHeader = TRUE,
        div(
          style = "display: flex; flex-direction: column; justify-content: space-between; height: 100%; padding: 5px;", # Adjusted padding
          div(
            style = "flex: 1; margin-bottom: 5px;", # Reduced margin-bottom
            h5(class = "value-box-title", industry()),
            div(
              style = "display: flex; align-items: baseline; margin-bottom: 5px;", # Adjusted margin-bottom
              h3(sprintf("%.2f", current_value), style = "margin: 0;"), # Removed margin
              span("MtCO₂e", class = "value-box-units")
            ),
            div(
              style = "display: flex; align-items: center; margin-bottom: -10px;", # Negative margin to move closer
              create_yoy_arrow(yoy_change),
              span(class = "value-box-yoy", ifelse(is.na(yoy_change), "NA", sprintf("%.2f%%", yoy_change)), style = ifelse(yoy_change > 0, "color: #2b9c93; margin-left: 5px;", "color: #002d54; margin-left: 5px;"))
            )
          ),
          div(
            style = "margin-top: -30px;", # Apply the margin here to move the sparkline up
            plotOutput(ns("sparkline"), height = "30px", width = "100%")
          )
        )
      )
    })
    
    output$sparkline <- renderPlot({
      small_line_plot(data() %>% filter(!!sym(category()) == !!industry()), "#28a745")
    })
  })
}


# UI Module for Chart
chartUI <- function(id, title) {
  ns <- NS(id)
  box(
    title = span(class = "box-title", title),
    width = 12,
    solidHeader = TRUE,
    div(class = "box-content", highchartOutput(ns("chartOutput"), height = "300px"))
  )
}

# Server Module for Line Chart on Summary Page
summaryLineChartServer <- function(id, data) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    
    output$chartOutput <- renderHighchart({
      summary_line_data <- data()
      variable_col <- names(summary_line_data)[1]  # Get the first column name, which is the variable name
      
      series_list <- lapply(unique(summary_line_data[[variable_col]]), function(variable) {
        df <- summary_line_data %>% filter(!!sym(variable_col) == variable)
        list(
          name = variable,
          data = df %>% select(Year, Value) %>% list_parse2()
        )
      })
      
      highchart() %>%
        hc_chart(type = "line", zoomType = "xy") %>%
        hc_xAxis(categories = unique(summary_line_data$Year)) %>%
        hc_yAxis(title = list(text = "MtCO₂e")) %>%
        hc_legend(align = "left", alignColumns = FALSE, layout = "horizontal") %>%
        hc_plotOptions(line = list(marker = list(enabled = FALSE))) %>%  # Disable markers
        hc_add_theme(thm) %>%
        hc_add_series_list(series_list)
    })
  })
}

# Server Module for Pie Chart
summaryPieChartServer <- function(id, data, current_year, category) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    output$chartOutput <- renderHighchart({
      pie_data <- data() %>% filter(Year == current_year() & !!sym(category()) != "Total") %>% 
        group_by(!!sym(category())) %>% summarise(Value = sum(Value, na.rm = TRUE))
      highchart() %>%
        hc_chart(type = "pie") %>%
        hc_series(list(data = list_parse(pie_data %>% transmute(name = !!sym(category()), y = Value)))) %>%
        hc_plotOptions(pie = list(dataLabels = list(enabled = FALSE),
                                  tooltip = list(pointFormat = '{point.y:.2f} MtCO₂e ({point.percentage:.2f}%)')))
    })
  })
}

# Helper function to render the appropriate summary chart
render_summary_chart <- function(chart_type, id, data, current_year, category) {
  if (chart_type == "Total Emissions") {
    summaryLineChartServer(id, data)
  } else {
    summaryPieChartServer(id, data, current_year, category)
  }
}

# Server Module for Bar Chart
summaryBarChartServer <- function(id, data, current_year, comparison_year, category) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    output$chartOutput <- renderHighchart({
      bar_data <- data() %>% filter(Year == current_year() & !!sym(category()) != "Total") %>% group_by(!!sym(category())) %>% summarise(Value = sum(Value, na.rm = TRUE))
      line_data <- data() %>% filter(Year == comparison_year() & !!sym(category()) != "Total") %>% group_by(!!sym(category())) %>% summarise(Value = sum(Value, na.rm = TRUE))
      
      colors <- c("#002d54", "#2b9c93", "#6a2063", "#e5682a", "#0b4c0b", "#5d9f3c", "#592c20", "#ca72a2")
      
      highchart() %>%
        hc_chart(type = "bar") %>%
        hc_xAxis(categories = bar_data[[category()]]) %>%
        hc_yAxis(title = list(text = "MtCO₂e")) %>%
        hc_add_series(
          name = as.character(current_year()), 
          data = bar_data$Value, 
          type = "bar", 
          colorByPoint = TRUE, 
          colors = colors
        ) %>%
        hc_add_series(
          name = as.character(comparison_year()), 
          data = line_data$Value, 
          type = "scatter", 
          color = "#ff0000", 
          marker = list(enabled = TRUE, symbol = "circle", lineWidth = 2, radius = 3)
        ) %>%
        hc_plotOptions(series = list(groupPadding = 0, pointPadding = 0.1, borderWidth = 0)) %>%
        hc_tooltip(shared = TRUE, pointFormat = '{series.name}: {point.y:.2f} MtCO₂e<br/>') %>%
        hc_add_theme(thm)
    })
  })
}

# Function to generate the value boxes for the top 3 industries
generate_top_industries <- function(id_prefix) {
  fluidRow(
    column(width = 4, valueBoxUI(paste0("totalIndustry1_", id_prefix)), style = "padding-right: 0; padding-left: 0;"),
    column(width = 4, valueBoxUI(paste0("totalIndustry2_", id_prefix)), style = "padding-right: 0; padding-left: 0;"),
    column(width = 4, valueBoxUI(paste0("totalIndustry3_", id_prefix)), style = "padding-right: 0; padding-left: 0;")
  )
}

# Function to generate the bottom row of the summary page
generate_summary_bottom_row <- function(id_prefix, chart_type) {
  tagList(
    fluidRow(
      column(width = 4, 
             valueBoxUI(paste0("totalValue_", id_prefix)), 
             
             style = "padding-right: 0; padding-left: 0;"
      ),
      column(width = 4,
             if (chart_type == "Total Emissions") {
               chartUI(paste0("industryLineChart_", id_prefix), "Industry Emissions Over Time")
             } else {
               chartUI(paste0("industryPieChart_", id_prefix), "Category Breakdown")
             },
             style = "padding-right: 0; padding-left: 0;"
      ),
      column(width = 4, 
             chartUI(paste0("industryBarChart_", id_prefix), "Emissions by Category"), 
             style = "padding-right: 0; padding-left: 0;"
      )
    )
  )
}

## File: options.R 
 ##options.R

library(shiny)
library(highcharter)
library(tidyverse)
library(shinyWidgets)
library(shinythemes)
library(rsconnect)
library(png)
library(htmltools)
library(DT)
library(shinyjs)
library(RColorBrewer)
library(shinyjs)


# Highchart options
hcoptslang <- getOption("highcharter.lang")
hcoptslang$thousandsSep <- ","
hcoptslang$numericSymbols <- " "
options(highcharter.lang = hcoptslang)

# Load the theme
thm <- source("hc_theme.R")$value

# Load the .RData file containing the datasets
load("ghg_data.RData")
load("census_data.RData")


# Preset list of colors
preset_colors <- c("#002d54", "#2b9c93", "#6a2063", "#e5682a", "#0b4c0b", "#5d9f3c", "#592c20", "#ca72a2")

# Function to assign colors to variables
assign_colors <- function(data, colors) {
  first_col_name <- names(data)[1]
  variables <- unique(data[[first_col_name]])
  setNames(colors[1:length(variables)], variables)
}

safe_as_numeric <- function(x) {
  suppressWarnings({
    result <- as.numeric(x)
    if (is.na(result) && !is.na(x)) {
      return(NA_real_)
    }
    return(result)
  })
}

## File: server.R 
 # Source the necessary modules for server logic
source("module_subsector_emissions.R")
source("module_total_emissions.R")
source("module_gas_emissions.R")
source("module_manure_usage.R")
source("module_map.R")
source("module_employees.R")
source("module_legal_responsibility.R")
source("module_land_use_summary.R")
source("module_farm_types.R")
source("module_occupiers.R")
source("module_owned_land.R")
source("module_cattle.R")
source("module_sheep.R")
source("module_pigs.R")
source("module_poultry.R")
source("module_other_animals.R")

server <- function(input, output, session) {
  subsectorEmissionsServer("subsector")
  totalEmissionsServer("total")
  gasEmissionsServer("gas")
  manureUsageServer("manure")
  employeesMapServer("employees")
  landUseSummaryServer("land_use")
  legalResponsibilityServer("legal_responsibility")
  farmTypesServer("farm_types")
  occupiersServer("occupiers")
  ownedLandServer("owned_land")
  cattleServer("cattle_module")
  sheepServer("sheep_module")
  pigsServer("pigs_module")
  poultryServer("poultry_module")
  otherAnimalsServer("other_animals_module")
}

## File: ui.R 
 # Source UI modules
source("options.R")
source("module_line_chart.R")
source("module_area_chart.R")
source("module_bar_chart.R")
source("module_timelapse_bar_chart.R")
source("module_data_table.R")
source("module_total_emissions.R")
source("module_subsector_emissions.R")
source("module_gas_emissions.R")
source("module_summary.R")
source("module_information.R")
source("module_manure_usage.R")
source("module_map.R")
source("module_employees.R")
source("module_legal_responsibility.R")
source("module_farm_types.R")
source("module_occupiers.R")
source("module_land_use_summary.R")
source("module_owned_land.R")
source("module_cattle.R")
source("module_sheep.R")
source("module_pigs.R")
source("module_poultry.R")
source("module_other_animals.R")
source("hc_theme.R")
library(shinyjs)

create_footer <- function() {
  div(
    class = "footer",
    span("Last Updated: ", format(Sys.Date(), "%d/%m/%Y")),
    img(src = "sg.png", alt = "SG Logo", style = "height: 30px; margin-left: 10px;")
  )
}

# Generate the UI
ui <- fluidPage(
  useShinyjs(),  # Initialize shinyjs
  theme = shinytheme("flatly"),
  tags$head(
    tags$link(rel = "stylesheet", type = "text/css", href = "styles.css"),
    includeHTML("google-analytics.html")
  ),
  div(class = "container-fluid full-height",
      div(class = "content",
          navbarPage(
            title = div(
              div("Home", style = "display: inline-block; margin-right: 20px;"),
              actionLink("toggleSidebar", icon("bars"), class = "nav-link", style = "display: inline-block; vertical-align: middle;"),
              tags$li(class = "nav-item", img(src = "RESAS Logo.png", class = "header-logo"))
            ),
            id = "navbar",
            navbarMenu("Agri-Environment",
                       tabPanel("Agriculture Emissions", value = "subsector", subsectorEmissionsUI("subsector")),
                       tabPanel("Industry Emissions", value = "total", totalEmissionsUI("total")),
                       tabPanel("Gas Emissions", value = "gas", gasEmissionsUI("gas")),
                       tabPanel("Manure Usage", value = "manure", manureUsageUI("manure")),
                       tabPanel("Further Information", value = "info", informationUI("info"))
            ),
            navbarMenu("Structure",
                       tabPanel("Land Use", value = "land_use", landUseSummaryUI("land_use")),
                       tabPanel("Farm Types", value = "farm_types", farmTypesUI("farm_types")),
                       tabPanel("Employees", value = "employees", employeesMapUI("employees")),
                       tabPanel("Occupiers", value = "occupiers", occupiersUI("occupiers")),
                       tabPanel("Ownership Status", value = "owned_land", ownedLandUI("owned_land")),
                       tabPanel("Legal Responsibility", value = "legal_responsibility", legalResponsibilityUI("legal_responsibility"))
            ),
            navbarMenu("Livestock",
                       tabPanel("Cattle", value = "cattle_module", cattleUI("cattle_module")),
                       tabPanel("Sheep", value = "sheep_module", sheepUI("sheep_module")),
                       tabPanel("Pigs", value = "pigs_module", pigsUI("pigs_module")),
                       tabPanel("Poultry", value = "poultry_module", poultryUI("poultry_module")),
                       tabPanel("Other Animals", value = "other_animals_module", otherAnimalsUI("other_animals_module"))
            )
          ),
          create_footer()
      )
  )
)

## File: www/styles.css 
 /* styles.css */

.chart-title {
  font-size: 30px !important;
  font-weight: bold !important;
  margin-bottom: 10px !important;
  font-family: 'Arial', sans-serif !important;
}

/* General styles */
.full-width {
  width: 100% !important;
}
.full-height {
  height: 100vh !important;
}
.navbar {
  margin-bottom: 5px !important;
}
.sidebar {
  width: 250px !important;
  padding: 10px !important;
  border-right: 1px solid #ddd !important;
  float: left !important;  /* Float to the left */
  height: calc(100vh - 65px) !important;  /* Adjust for header and reduced margin */
}
.main-panel {
  margin-left: 270px !important;
  padding: 10px !important;
  overflow: auto !important;  /* Enable scrolling for main content */
  height: calc(100vh - 65px) !important;  /* Adjust for header and reduced margin */
}
.header-logo {
  position: absolute !important;
  top: 0px !important;
  right: 0px !important;
  height: 60px !important;
}

.box {
  border: 1px solid #e3e3e3;
  background-color: white;
  margin: 0;
  padding: 10px;
}
.value-box {
  height: 160px !important;
  text-align: left;
  box-shadow: 0 1px 2px rgba(0,0,0,0.1);
  margin: 0;
  padding: 0;
}
.value-box .inner {
  padding: 5px;
}
.value-box h3, .value-box h5 {
  margin: 0;
  color: #333;
}
.value-box h3 {
  font-size: 36px;
  font-weight: bold;
}
.value-box-units {
  font-size: 18px;
  margin-left: 5px;
  display: inline-block;
}
.value-box-title {
  font-size: 20px;
  margin-bottom: 5px;
  font-weight: bold;
}
.value-box-yoy {
  font-size: 24px;
  font-weight: bold;
}
.sparkline {
  width: 100%;
  height: 30px;
}
.header-text {
  font-size: 24px;
  font-weight: bold;
  margin-bottom: 10px;
}
.box-title {
  font-size: 20px;
  font-weight: bold;
  margin-bottom: 0px;
}
.box-content {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  height: 100%;
}
.content, .row, .col {
  margin: 0;
  padding: 0;
}
.body {
  background-color: #f9f9f9;
  font-family: 'Arial', sans-serif;
  font-size: 16px;
  color: black; /* Set text color to black */
  line-height: 1.5;
}

html, body {
  height: 100%;
  margin: 0;
  padding: 0;
}

.container-fluid.full-height {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
}

.content {
  flex: 1 0 auto;
}

.footer {
  flex-shrink: 0;
  background-color: #ffffff;
  padding: 10px;
  text-align: center;
  border-top: 1px solid #dee2e6;
}

/* Apply default font size, family, and color to all common elements */
h1, h2, h3, h4, h5, p, div, span, a, li, table, th, td, input, button, select, textarea {
  font-family: Arial, sans-serif;
  font-size: 16px;
}

/* Set default font size, family, and color for Highcharts */
.highcharts-title,
.highcharts-subtitle,
.highcharts-axis-title,
.highcharts-axis-labels,
.highcharts-tooltip,
.highcharts-legend-item,
.highcharts-data-label {
  font-family: Arial, sans-serif !important;
  font-size: 16px !important;
  color: black !important; /* Set text color to black */
}

/* Slider colours */

/* Apply custom styles to all sliders */
.irs-single, .irs-bar-edge, .irs-bar {
  background: #002d54 !important;
  border-top: 1px solid #002d54 !important;
  border-bottom: 1px solid #002d54 !important;
}

/* Change the color of the number tags */
.irs-from, .irs-to, .irs-single {
  background: #002d54 !important;
  color: white !important;
  font-weight: bold !important;
}

/* Ensure grid text and min/max labels are also styled */
.irs-grid-text, .irs-min, .irs-max {
  color: #002d54 !important;
}

/* Remove bullet point from nav-item */
.navbar-nav > li.nav-item,
.navbar-nav > li {
  list-style-type: none;
  margin: 0;
  padding: 0;
}

/* Specific rule to remove bullet point */
.nav-item {
  list-style: none !important;
}

## File: module_subsector_emissions.R 
 ## File: module_subsector_emissions.R 
# File: module_subsector_emissions.R

subsectorEmissionsUI <- function(id) {
  ns <- NS(id)
  tagList(
    sidebarLayout(
      sidebarPanel(
        width = 3,
        uiOutput(ns("variable_select")),
        actionButton(ns("select_all_button"), "Select All"),
        actionButton(ns("deselect_all_button"), "Deselect All"),
        sliderInput(ns("year"), "Select year range", value = c(1990, 2022), min = 1990, max = 2022, step = 1, sep = "", ticks = TRUE)
      ),
      mainPanel(
        id = ns("mainpanel"),
        width = 9,
        tabsetPanel(
          id = ns("tabs"),
          tabPanel("Summary Page",
                   value = ns("summary"),
                   fluidRow(
                     column(width = 4, sliderInput(ns("summary_current_year"), "Current Year", min = 1990, max = 2022, value = 2022, step = 1)),
                     column(width = 4, sliderInput(ns("summary_comparison_year"), "Comparison Year", min = 1990, max = 2022, value = 2021, step = 1)),
                     column(width = 4,
                            div(
                              style = "margin-top: 25px; text-align: center; border: 4px solid #e3e3e3",
                              h5("Adjust the sliders to compare data from different years.", style = "padding: 0px; font-weight: bold;")
                            )
                     )
                   ),
                   fluidRow(
                     column(width = 12, div(class = "header-text", "Top 3 Categories:"))
                   ),
                   generate_top_industries("subsector"),
                   fluidRow(
                     column(width = 12, div(class = "header-text", "Summary Analysis:"))
                   ),
                   generate_summary_bottom_row("subsector", "Subsector Emissions")
          ),
          tabPanel("Timelapse", timelapseBarChartUI(ns("timelapse_bar")), value = ns("timelapse")),
          tabPanel("Breakdown", highchartOutput(ns("breakdown")), value = ns("breakdown")),  # Added Breakdown tab
          tabPanel("Line Chart", lineChartUI(ns("line")), value = ns("line")),
          tabPanel("Area Chart", areaChartUI(ns("area")), value = ns("area")),
          tabPanel("Data Table",
                   DTOutput(ns("data_table")),
                   downloadButton(ns("downloadData"), "Download Data"),
                   value = ns("data"))
        )
      )
    )
  )
}

subsectorEmissionsServer <- function(id) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    chart_data <- reactive({
      data <- subsector_total
      data <- data %>% filter(Year >= min(input$year) & Year <= max(input$year))
      if (!is.null(input$variables)) {
        data <- data %>%
          filter(Subsector %in% input$variables)
      }
      data
    })
    
    output$variable_select <- renderUI({
      choices <- unique(subsector_total$Subsector)
      selected <- setdiff(choices, "Total")
      checkboxGroupInput(ns("variables"), "Choose variables to add to chart", choices = choices, selected = selected)
    })
    
    observeEvent(input$select_all_button, {
      updateCheckboxGroupInput(session, ns("variables"), selected = setdiff(unique(subsector_total$Subsector), "Total"))
    })
    
    observeEvent(input$deselect_all_button, {
      updateCheckboxGroupInput(session, ns("variables"), selected = character(0))
    })
    
    areaChartServer(
      id = "area",
      chart_data = chart_data,
      title = "Agricultural Emissions by Subsector in Scotland",
      yAxisTitle = "Emissions (MtCO₂e)",
      xAxisTitle = "Year",
      footer = '<div style="font-size: 16px; font-weight: bold;">Source: Scottish agriculture greenhouse gas emissions and nitrogen use 2022-23.</div>',
      x_col = "Year",
      y_col = "Value"
    )
    
    timelapseBarChartServer(
      id = "timelapse_bar",
      chart_data = chart_data,
      title = "Agricultural Greenhouse Gas Emissions Timelapse",
      yAxisTitle = "Emissions (MtCO₂e)",
      xAxisTitle = "Year",
      footer = '<div style="font-size: 16px; font-weight: bold;">Source: Scottish agriculture greenhouse gas emissions and nitrogen use 2022-23.</div>',
      x_col = "Year",
      y_col = "Value"
    )
    
    lineChartServer(
      id = "line",
      chart_data = chart_data,
      title = "Agricultural Greenhouse Gas Emissions by Subsector in Scotland",
      yAxisTitle = "Emissions (MtCO₂e)",
      xAxisTitle = "Year",
      footer = '<div style="font-size: 16px; font-weight: bold;">Source: Scottish agriculture greenhouse gas emissions and nitrogen use 2022-23.</div>',
      x_col = "Year",
      y_col = "Value"
    )
    
    # Breakdown chart server logic
    output$breakdown <- renderHighchart({
      data_long <- subsector_source %>%
        pivot_longer(cols = -Source, names_to = "Subsector", values_to = "Value") %>%
        arrange(match(Source, rev(unique(Source))))
      
      unique_sources <- unique(data_long$Source)
      color_map <- setNames(rev(preset_colors)[1:length(unique_sources)], unique_sources)
      
      series_data <- lapply(unique_sources, function(source) {
        list(
          name = source,
          data = data_long %>%
            filter(Source == source) %>%
            arrange(match(Subsector, unique(data_long$Subsector))) %>%
            pull(Value),
          color = color_map[[source]]
        )
      })
      
      highchart() %>%
        hc_chart(type = "bar", zoomType = "xy") %>%
        hc_xAxis(categories = unique(data_long$Subsector), 
                 labels = list(style = list(color = "#000000", fontSize = '16px', fontFamily = 'Arial'))) %>%
        hc_yAxis(title = list(text = "Emissions (MtCO₂e)", style = list(color = "#000000", fontSize = '16px', fontFamily = 'Arial')),
                 labels = list(style = list(color = "#000000", fontSize = '16px', fontFamily = 'Arial')),
                 tickInterval = 0.5) %>%
        hc_plotOptions(bar = list(
          stacking = "normal",
          groupPadding = 0,
          pointPadding = 0.1,
          borderWidth = 0
        )) %>%
        hc_tooltip(
          headerFormat = "<span style='font-size: 16px; font-family: Arial'>{point.key}</span><br/>",
          pointFormat = "<span style='font-size: 16px; font-family: Arial'>{series.name}: <b>{point.y:.2f} MtCO₂e</b>", 
          style = list(fontSize = "16px", fontFamily = "Arial")) %>%
        hc_legend(
          align = "right", 
          verticalAlign = "middle", 
          layout = "vertical",
          itemStyle = list(fontSize = '16px', fontFamily = 'Arial', fontWeight = 'normal')
        ) %>%
        hc_add_series_list(series_data)
    })
    
    render_data_table(
      table_id = "data_table",
      chart_data = chart_data,
      output = output
    )
    
    handle_data_download(
      download_id = "downloadData",
      chart_type = "Subsector",
      chart_data = chart_data,
      input = input,
      output = output,
      year_input = "year"
    )
    
    # Summary Module
    current_year <- reactive({ input$summary_current_year })
    comparison_year <- reactive({ input$summary_comparison_year })
    
    valueBoxServer(ns("totalIndustry1"), chart_data, "Subsector", get_industry(1, chart_data, current_year, "Subsector"), current_year, comparison_year)
    valueBoxServer(ns("totalIndustry2"), chart_data, "Subsector", get_industry(2, chart_data, current_year, "Subsector"), current_year, comparison_year)
    valueBoxServer(ns("totalIndustry3"), chart_data, "Subsector", get_industry(3, chart_data, current_year, "Subsector"), current_year, comparison_year)
    valueBoxServer(ns("totalValue"), chart_data, "Subsector", reactive("Total"), current_year, comparison_year)
    
    summaryBarChartServer(ns("industryBarChart"), chart_data, current_year, comparison_year, "Subsector")
  })
}

## File: module_total_emissions.R 
 totalEmissionsUI <- function(id) {
  ns <- NS(id)
  tagList(
    sidebarLayout(
      sidebarPanel(
        width = 3,
        uiOutput(ns("variable_select")),
        actionButton(ns("select_all_button"), "Select All"),
        actionButton(ns("deselect_all_button"), "Deselect All"),
        sliderInput(ns("year"), "Select year range", value = c(1990, 2022), min = 1990, max = 2022, step = 1, sep = "", ticks = TRUE)
      ),
      mainPanel(
        id = ns("mainpanel"),
        width = 9,
        tabsetPanel(
          id = ns("tabs"),
          tabPanel("Summary Page",
                   value = ns("summary"),
                   fluidRow(
                     column(width = 4, sliderInput(ns("summary_current_year"), "Current Year", min = 1990, max = 2022, value = 2022, step = 1)),
                     column(width = 4, sliderInput(ns("summary_comparison_year"), "Comparison Year", min = 1990, max = 2022, value = 2021, step = 1)),
                     column(width = 4,
                            div(
                              style = "margin-top: 25px; text-align: center; border: 4px solid #e3e3e3",
                              h5("Adjust the sliders to compare data from different years.", style = "padding: 0px; font-weight: bold;")
                            )
                     )
                   ),
                   fluidRow(
                     column(width = 12, div(class = "header-text", "Top 3 Categories:"))
                   ),
                   generate_top_industries("total"),
                   fluidRow(
                     column(width = 12, div(class = "header-text", "Summary Analysis:"))
                   ),
                   generate_summary_bottom_row("total", "Total Emissions")
          ),
          tabPanel("Timelapse", timelapseBarChartUI(ns("bar")), value = ns("bar")),
          tabPanel("Line Chart", lineChartUI(ns("line")), value = ns("line")),
          tabPanel("Area Chart", areaChartUI(ns("area")), value = ns("area")),
          tabPanel("Data Table",
                   DTOutput(ns("data_table")),
                   downloadButton(ns("downloadData"), "Download Data"),
                   value = ns("data"))
        )
      )
    )
  )
}

totalEmissionsServer <- function(id) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    chart_data <- reactive({
      data <- national_total
      data <- data %>% filter(Year >= min(input$year) & Year <= max(input$year))
      if (!is.null(input$variables)) {
        data <- data %>%
          filter(Industry %in% input$variables)
      }
      data
    })
    
    output$variable_select <- renderUI({
      choices <- unique(national_total$Industry)
      selected <- setdiff(choices, "Total")
      checkboxGroupInput(ns("variables"), "Choose variables to add to chart", choices = choices, selected = selected)
    })
    
    observeEvent(input$select_all_button, {
      updateCheckboxGroupInput(session, ns("variables"), selected = setdiff(unique(national_total$Industry), "Total"))
    })
    
    observeEvent(input$deselect_all_button, {
      updateCheckboxGroupInput(session, ns("variables"), selected = character(0))
    })
    
    areaChartServer(
      id = "area",
      chart_data = chart_data,
      title = "National Greenhouse Gas Emissions by Source in Scotland",
      yAxisTitle = "Emissions (MtCO₂e)",
      xAxisTitle = "Year",
      footer = '<div style="font-size: 16px;"><a href="https://www.gov.scot/publications/scottish-greenhouse-gas-statistics-2022/documents/">Source: Scottish Greenhouse Gas Statistics 2022</a></div>',
      x_col = "Year",
      y_col = "Value"
    )
    
    timelapseBarChartServer(
      id = "bar",
      chart_data = chart_data,
      title = "National Greenhouse Gas Emissions Timelapse",
      yAxisTitle = "Emissions (MtCO₂e)",
      xAxisTitle = "Year",
      footer = '<div style="font-size: 16px;"><a href="https://www.gov.scot/publications/scottish-greenhouse-gas-statistics-2022/documents/">Source: Scottish Greenhouse Gas Statistics 2022</a></div>',
      x_col = "Year",
      y_col = "Value"
    )
    
    lineChartServer(
      id = "line",
      chart_data = chart_data,
      title = "National Greenhouse Gas Emissions by Source in Scotland",
      yAxisTitle = "Emissions (MtCO₂e)",
      xAxisTitle = "Year",
      footer = '<div style="font-size: 16px;"><a href="https://www.gov.scot/publications/scottish-greenhouse-gas-statistics-2022/documents/">Source: Scottish Greenhouse Gas Statistics 2022</a></div>',
      x_col = "Year",
      y_col = "Value"
    )
    
    render_data_table(
      table_id = "data_table",
      chart_data = chart_data,
      output = output
    )
    
    handle_data_download(
      download_id = "downloadData",
      chart_type = "National",
      chart_data = chart_data,
      input = input,
      output = output,
      year_input = "year"
    )
    
    # Summary Module
    current_year <- reactive({ input$summary_current_year })
    comparison_year <- reactive({ input$summary_comparison_year })
    
    valueBoxServer(ns("totalIndustry1"), chart_data, "Industry", get_industry(1, chart_data, current_year, "Industry"), current_year, comparison_year)
    valueBoxServer(ns("totalIndustry2"), chart_data, "Industry", get_industry(2, chart_data, current_year, "Industry"), current_year, comparison_year)
    valueBoxServer(ns("totalIndustry3"), chart_data, "Industry", get_industry(3, chart_data, current_year, "Industry"), current_year, comparison_year)
    valueBoxServer(ns("totalValue"), chart_data, "Industry", reactive("Total"), current_year, comparison_year)
    
    summaryBarChartServer(ns("industryBarChart"), chart_data, current_year, comparison_year, "Industry")
  })
}

## File: module_gas_emissions.R 
 gasEmissionsUI <- function(id) {
  ns <- NS(id)
  tagList(
    sidebarLayout(
      sidebarPanel(
        width = 3,
        uiOutput(ns("variable_select")),
        actionButton(ns("select_all_button"), "Select All"),
        actionButton(ns("deselect_all_button"), "Deselect All"),
        sliderInput(ns("year"), "Select year range", value = c(1990, 2022), min = 1990, max = 2022, step = 1, sep = "", ticks = TRUE)
      ),
      mainPanel(
        id = ns("mainpanel"),
        width = 9,
        tabsetPanel(
          id = ns("tabs"),
          tabPanel("Summary Page",
                   value = ns("summary"),
                   fluidRow(
                     column(width = 4, sliderInput(ns("summary_current_year"), "Current Year", min = 1990, max = 2022, value = 2022, step = 1)),
                     column(width = 4, sliderInput(ns("summary_comparison_year"), "Comparison Year", min = 1990, max = 2022, value = 2021, step = 1)),
                     column(width = 4,
                            div(
                              style = "margin-top: 25px; text-align: center; border: 4px solid #e3e3e3",
                              h5("Adjust the sliders to compare data from different years.", style = "padding: 0px; font-weight: bold;")
                            )
                     )
                   ),
                   fluidRow(
                     column(width = 12, div(class = "header-text", "Top 3 Categories:"))
                   ),
                   generate_top_industries("gas"),
                   fluidRow(
                     column(width = 12, div(class = "header-text", "Summary Analysis:"))
                   ),
                   generate_summary_bottom_row("gas", "Gas Emissions")
          ),
          tabPanel("Timelapse", timelapseBarChartUI(ns("bar")), value = ns("bar")),
          tabPanel("Line Chart", lineChartUI(ns("line")), value = ns("line")),
          tabPanel("Area Chart", areaChartUI(ns("area")), value = ns("area")),
          tabPanel("Data Table",
                   DTOutput(ns("data_table")),
                   downloadButton(ns("downloadData"), "Download Data"),
                   value = ns("data"))
        )
      )
    )
  )
}

gasEmissionsServer <- function(id) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    chart_data <- reactive({
      data <- agri_gas
      data <- data %>% filter(Year >= min(input$year) & Year <= max(input$year))
      if (!is.null(input$variables)) {
        data <- data %>%
          filter(Gas %in% input$variables)
      }
      data
    })
    
    output$variable_select <- renderUI({
      choices <- unique(agri_gas$Gas)
      selected <- setdiff(choices, "Total")
      checkboxGroupInput(ns("variables"), "Choose variables to add to chart", choices = choices, selected = selected)
    })
    
    observeEvent(input$select_all_button, {
      updateCheckboxGroupInput(session, ns("variables"), selected = setdiff(unique(agri_gas$Gas), "Total"))
    })
    
    observeEvent(input$deselect_all_button, {
      updateCheckboxGroupInput(session, ns("variables"), selected = character(0))
    })
    
    areaChartServer(
      id = "area",
      chart_data = chart_data,
      title = "Agricultural Greenhouse Gas Emissions Breakdown in Scotland",
      yAxisTitle = "Emissions (MtCO₂e)",
      xAxisTitle = "Year",
      footer = '<div style="font-size: 16px; font-weight: bold;">Source: Scottish agriculture greenhouse gas emissions and nitrogen use 2022-23.</div>',
      x_col = "Year",
      y_col = "Value"
    )
    
    timelapseBarChartServer(
      id = "bar",
      chart_data = chart_data,
      title = "Agricultural Greenhouse Gas Emissions Breakdown Timelapse",
      yAxisTitle = "Emissions (MtCO₂e)",
      xAxisTitle = "Year",
      footer = '<div style="font-size: 16px; font-weight: bold;">Source: Scottish agriculture greenhouse gas emissions and nitrogen use 2022-23.</div>',
      x_col = "Year",
      y_col = "Value"
    )
    
    lineChartServer(
      id = "line",
      chart_data = chart_data,
      title = "Agricultural Greenhouse Gas Emissions Breakdown in Scotland",
      yAxisTitle = "Emissions (MtCO₂e)",
      xAxisTitle = "Year",
      footer = '<div style="font-size: 16px; font-weight: bold;">Source: Scottish agriculture greenhouse gas emissions and nitrogen use 2022-23.</div>',
      x_col = "Year",
      y_col = "Value"
    )
    
    render_data_table(
      table_id = "data_table",
      chart_data = chart_data,
      output = output
    )
    
    handle_data_download(
      download_id = "downloadData",
      chart_type = "Gas",
      chart_data = chart_data,
      input = input,
      output = output,
      year_input = "year"
    )
    
    # Summary Module
    current_year <- reactive({ input$summary_current_year })
    comparison_year <- reactive({ input$summary_comparison_year })
    
    valueBoxServer(ns("totalIndustry1"), chart_data, "Gas", get_industry(1, chart_data, current_year, "Gas"), current_year, comparison_year)
    valueBoxServer(ns("totalIndustry2"), chart_data, "Gas", get_industry(2, chart_data, current_year, "Gas"), current_year, comparison_year)
    valueBoxServer(ns("totalIndustry3"), chart_data, "Gas", get_industry(3, chart_data, current_year, "Gas"), current_year, comparison_year)
    valueBoxServer(ns("totalValue"), chart_data, "Gas", reactive("Total"), current_year, comparison_year)
    
    summaryBarChartServer(ns("industryBarChart"), chart_data, current_year, comparison_year, "Gas")
  })
}

## File: module_manure_usage.R 
 # File: module_manure_usage.R

manureUsageUI <- function(id) {
  ns <- NS(id)
  tagList(
    sidebarLayout(
      sidebarPanel(
        width = 3,
        radioButtons(ns("data_type"), "Data Type", choices = c("Holdings" = "holdings", "Area" = "area"), selected = "holdings")  # Changed order here
      ),
      mainPanel(
        id = ns("mainpanel"),
        width = 9,
        tabsetPanel(
          id = ns("tabs"),
          tabPanel("Bar Chart", barChartUI(ns("bar_chart")), value = ns("bar")),
          tabPanel("Data Table",
                   DTOutput(ns("data_table")),
                   downloadButton(ns("downloadData"), "Download Data"),
                   value = ns("data"))
        )
      )
    )
  )
}

manureUsageServer <- function(id) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    
    chart_data <- reactive({
      data <- manure_fertiliser
      if (!is.null(input$variables)) {
        data <- data %>%
          filter(`Fertiliser by type` %in% input$variables)
      }
      data
    })
    
    output$variable_select <- renderUI({
      choices <- unique(manure_fertiliser$`Fertiliser by type`)
      selected <- choices
      checkboxGroupInput(ns("variables"), "Choose variables to add to chart", choices = choices, selected = selected)
    })
    
    observeEvent(input$select_all_button, {
      updateCheckboxGroupInput(session, ns("variables"), selected = unique(manure_fertiliser$`Fertiliser by type`))
    })
    
    observeEvent(input$deselect_all_button, {
      updateCheckboxGroupInput(session, ns("variables"), selected = character(0))
    })
    
    y_col <- reactive({
      if (input$data_type == "holdings") {
        "2023 holdings"
      } else {
        "2023 area"
      }
    })
    
    yAxisTitle <- reactive({
      if (input$data_type == "holdings") {
        "Holdings"
      } else {
        "Area (1,000 hectares)"
      }
    })
    
    tooltip_format <- reactive({
      if (input$data_type == "holdings") {
        "Holdings: {point.y:.0f}"
      } else {
        "Area (hectares): {point.y:.2f}"
      }
    })
    
    barChartServer(
      id = "bar_chart",
      chart_data = chart_data,
      title = "Manure Usage by Type in Scotland",
      yAxisTitle = yAxisTitle,
      xAxisTitle = "Fertiliser Type",
      footer = '<div style="font-size: 16px; font-weight: bold;"><a href="https://www.gov.scot/publications/results-scottish-agricultural-census-june-2023/documents/">Source: Scottish Agricultural Census: June 2023</a></div>',
      x_col = "Fertiliser by type",
      y_col = y_col,
      tooltip_format = tooltip_format
    )
    
    render_data_table(
      table_id = "data_table",
      chart_data = chart_data,
      output = output
    )
    
    handle_data_download(
      download_id = ns("downloadData"),
      chart_type = "Manure Usage",
      chart_data = chart_data,
      input = input,
      output = output,
      year_input = NULL
    )
  })
}

## File: module_map.R 
 library(shiny)
library(highcharter)
library(geojsonio)
library(dplyr)

# Load the GeoJSON file
geojson_data <- geojson_read("subregions_simplified.geojson", what = "sp")

# Convert GeoJSON to a Highcharts-compatible format
geojson_list <- geojson_list(geojson_data)

mapUI <- function(id) {
  ns <- NS(id)
  tagList(
    mainPanel(
      highchartOutput(ns("map"), height = "75vh"),  # Set the height to be responsive
      div(
        class = "note",
        style = "margin-top: 20px; padding: 10px; border-top: 1px solid #ddd;",
        HTML(
          "<strong>Note:</strong><ul>
            <li>To change the data shown, select a variable from the radio buttons within the sidebar.</li>
            <li>You can see data values for each variable by hovering your mouse over the region.</li>
            <li>To change the zoom level, use the + and - to the left of the graph, or scroll using your mouse wheel.</li>
          </ul>"
        )
      )
    )
  )
}




mapServer <- function(id, data, variable, title) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    
    filtered_data <- reactive({
      req(variable)  # Ensure that variable is not null or missing
      req(variable())  # Ensure that variable() is not null or missing
      req(data())      # Ensure that data() is not null or missing
      
      first_col_name <- names(data())[1]  # Get the name of the first column dynamically
      data() %>%
        filter(!!sym(first_col_name) == variable())  # Use the first column name for filtering
    })
    
    output$map <- renderHighchart({
      data <- filtered_data()
      hc_data <- data %>% 
        mutate(sub_region = as.character(sub_region)) %>%
        select(sub_region, value) %>%
        list_parse()
      
      variable_name <- variable()  # Get the selected variable name
      
      highchart(type = "map") %>%
        hc_add_series(
          mapData = geojson_list, 
          joinBy = c("sub_region", "sub_region"),
          data = hc_data,
          borderColor = "#FFFFFF",
          borderWidth = 0.5,
          states = list(
            hover = list(
              color = "#BADA55"
            )
          ),
          dataLabels = list(
            enabled = FALSE  # Disable the overlays
          ),
          tooltip = list(
            useHTML = TRUE,
            headerFormat = "<b>{point.key}</b><br/>",
            pointFormatter = JS(sprintf("function() {
              return '<b>' + this.sub_region + '</b><br/>' +
                     '%s: ' + this.value;
            }", variable_name))
          ),
          nullColor = '#E0E0E0'  # Color for regions with no data
        ) %>%
        hc_mapNavigation(enabled = TRUE) %>%
        hc_colorAxis(
          min = 0,
          stops = color_stops(5),
          labels = list(
            format = "{value:,.0f}"  # Ensure the labels show the correct values
          )
        ) %>%
        hc_title(text = title) %>%
        hc_chart(reflow = TRUE) %>% # Make chart responsive
        hc_legend(
          layout = "horizontal",
          align = "center",
          verticalAlign = "bottom",
          title = list(text = "Legend", style = list(fontSize = '15px')),
          itemStyle = list(width = '100px')
        )
    })
  })
}

## File: module_employees.R 
 ## File: module_employees.R

library(shiny)
library(highcharter)
library(dplyr)
library(tidyr)

# Load the module_map.R
source("module_map.R")
# Load the existing module_data_table.R
source("module_data_table.R")

# Coerce all relevant columns to character before pivoting
occupiers_employees_subregion <- occupiers_employees_subregion %>%
  mutate(across(-`Occupiers and employees by category`, as.character))

# Transform the data
regions_data <- occupiers_employees_subregion %>% 
  select(-Scotland) %>% 
  pivot_longer(cols = -`Occupiers and employees by category`, names_to = "sub_region", values_to = "value") %>%
  mutate(value = ifelse(value == "c", NA, safe_as_numeric(value)))

# Filter for the specific categories
categories <- c("Regular full-time staff total", 
                "Regular part-time staff total", 
                "Total Casual and seasonal staff", 
                "Total agricultural workforce")

filtered_regions_data <- regions_data %>%
  filter(`Occupiers and employees by category` %in% categories)

employeesMapUI <- function(id) {
  ns <- NS(id)
  sidebarLayout(
    sidebarPanel(
      width = 3,
      uiOutput(ns("sidebar_ui"))
    ),
    mainPanel(
      width = 9,
      tabsetPanel(
        id = ns("tabs"),
        tabPanel("Map", mapUI(ns("map")), value = "map"),
        tabPanel("Data Table", DTOutput(ns("data_table")), downloadButton(ns("downloadData"), "Download Data"), value = "data_table"),
        tabPanel("Timeseries", 
                 highchartOutput(ns("line_chart")), 
                 div(
                   class = "note",
                   style = "margin-top: 20px; padding: 10px; border-top: 1px solid #ddd;",
                   HTML(
                     "<strong>Note:</strong><ul>
                       <li>To add a series to the chart, click inside the white box on the sidebar and select a variable.</li>
                       <li>To remove a series, click the x beside the variable name within the sidebar.</li>
                       <li>Select a year range by adjusting the slider on the sidebar or by zooming into the graph by clicking and dragging over an area you wish to see.</li>
                       <li>You can see data values for a specific year by hovering your mouse over the line.</li>
                     </ul>"
                   )
                 ),
                 value = "timeseries")
      )
    )
  )
}

employeesMapServer <- function(id) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    
    # Data Processing for Timeseries
    occupiers_employees <- occupiers_employees %>%
      mutate(across(starts_with("20"), safe_as_numeric))
    
    chart_data <- reactive({
      occupiers_employees %>%
        pivot_longer(cols = -`Occupiers and employees by category`, names_to = "Year", values_to = "Value") %>%
        mutate(Year = as.numeric(Year)) %>%
        filter(!grepl("occupiers", `Occupiers and employees by category`, ignore.case = TRUE))
    })
    
    output$sidebar_ui <- renderUI({
      req(input$tabs)
      if (input$tabs == "map") {
        radioButtons(ns("variable"), "Select Variable", choices = categories)
      } else if (input$tabs == "data_table") {
        radioButtons(ns("data_source"), "Choose data to show:", choices = c("Chart Data", "Map Data"))
      } else if (input$tabs == "timeseries") {
        tagList(
          selectizeInput(
            ns("variables"), 
            "Click within the box to add more variables", 
            choices = unique(chart_data()$`Occupiers and employees by category`), 
            selected = c('Regular full-time staff total', 'Regular part-time staff total', 'Total Casual and seasonal staff'), 
            multiple = TRUE, 
            options = list(plugins = list('remove_button'), placeholder = "Click to add more variables")
          ),
          sliderInput(
            ns("year_range"),
            "Select Year Range",
            min = 2012,
            max = 2023,
            value = c(2012, 2023),
            step = 1,
            sep = "",
            ticks = TRUE
          )
        )
      }
    })
    
    filtered_chart_data <- reactive({
      req(input$variables, input$year_range)
      data <- chart_data()
      data %>% 
        filter(
          `Occupiers and employees by category` %in% input$variables,
          Year >= input$year_range[1] & Year <= input$year_range[2]
        )
    })
    
    output$line_chart <- renderHighchart({
      data <- filtered_chart_data()
      if (nrow(data) == 0) return(NULL)
      highchart() %>%
        hc_chart(type = "line") %>%
        hc_title(text = "Agricultural Employees Timeseries") %>%
        hc_xAxis(title = list(text = "Year")) %>%
        hc_yAxis(title = list(text = "Employees (1,000)")) %>%
        hc_add_series(data = data, hcaes(x = Year, y = Value, group = `Occupiers and employees by category`), type = "line") %>%
        hc_tooltip(shared = FALSE)
    })
    
    mapServer(
      id = "map",
      data = reactive({
        req(input$variable)
        filtered_regions_data %>%
          filter(`Occupiers and employees by category` == input$variable)
      }),
      variable = reactive(input$variable),
      title = "Agricultural Employees by Region"
    )
    
    output$data_table <- renderDT({
      req(input$data_source)
      if (input$data_source == "Chart Data") {
        datatable(chart_data())
      } else {
        datatable(filtered_regions_data)
      }
    })
    
    output$downloadData <- downloadHandler(
      filename = function() {
        paste(input$data_source, Sys.Date(), ".csv", sep = "")
      },
      content = function(file) {
        if (input$data_source == "Chart Data") {
          write.csv(chart_data(), file, row.names = FALSE)
        } else {
          write.csv(filtered_regions_data(), file, row.names = FALSE)
        }
      }
    )
  })
}

# Testing module
content_demo <- function() {
  ui <- fluidPage(employeesMapUI("employees_map_test"))
  server <- function(input, output, session) {
    employeesMapServer("employees_map_test")
  }
  shinyApp(ui, server)
}

content_demo()

## File: module_legal_responsibility.R 
 # File: module_legal_responsibility.R

legalResponsibilityUI <- function(id) {
  ns <- NS(id)
  tagList(
    sidebarLayout(
      sidebarPanel(
        width = 3,
        radioButtons(ns("data_type"), "Data Type", choices = c("Holdings" = "holdings", "Area" = "area"), selected = "holdings")
      ),
      mainPanel(
        id = ns("mainpanel"),
        width = 9,
        tabsetPanel(
          id = ns("tabs"),
          tabPanel("Bar Chart", barChartUI(ns("bar_chart")), value = ns("bar")),
          tabPanel("Data Table",
                   DTOutput(ns("data_table")),
                   downloadButton(ns("downloadData"), "Download Data"),
                   value = ns("data"))
        )
      )
    )
  )
}

legalResponsibilityServer <- function(id) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    
    # Create reactive data excluding 'Total'
    chart_data <- reactive({
      data <- legal_responsibility %>%
        filter(`Legal responsibility` != "Total")
      data
    })
    
    # Get initial order based on 'Holdings'
    initial_order <- reactive({
      data <- chart_data() %>%
        arrange(desc(Holdings))
      data$`Legal responsibility`
    })
    
    y_col <- reactive({
      if (input$data_type == "holdings") {
        "Holdings"
      } else {
        "Area of holdings"
      }
    })
    
    yAxisTitle <- reactive({
      if (input$data_type == "holdings") {
        "Number of Holdings"
      } else {
        "Area of Holdings (hectares)"
      }
    })
    
    tooltip_format <- reactive({
      if (input$data_type == "holdings") {
        "Holdings: {point.y:.0f}"
      } else {
        "Area (hectares): {point.y:.2f}"
      }
    })
    
    barChartServer(
      id = "bar_chart",
      chart_data = reactive({
        data <- chart_data()
        data <- data %>%
          mutate(`Legal responsibility` = factor(`Legal responsibility`, levels = initial_order())) %>%
          arrange(`Legal responsibility`)
        data
      }),
      title = "Legal Responsibility of Holdings in Scotland",
      yAxisTitle = yAxisTitle,
      xAxisTitle = "Legal Responsibility",
      footer = '<div style="font-size: 16px; font-weight: bold;"><a href="https://www.gov.scot/publications/results-scottish-agricultural-census-june-2023/documents/">Source: Scottish Agricultural Census: June 2023</a></div>',
      x_col = "Legal responsibility",
      y_col = y_col,
      tooltip_format = tooltip_format,
      maintain_order = TRUE
    )
    
    render_data_table(
      table_id = "data_table",
      chart_data = chart_data,
      output = output
    )
    
    handle_data_download(
      download_id = ns("downloadData"),
      chart_type = "Legal Responsibility",
      chart_data = chart_data,
      input = input,
      output = output,
      year_input = NULL
    )
  })
}

## File: module_farm_types.R 
 # File: module_farm_types.R

farmTypesUI <- function(id) {
  ns <- NS(id)
  tagList(
    sidebarLayout(
      sidebarPanel(
        width = 3,
        radioButtons(ns("data_type"), "Data Type", choices = c("Holdings" = "holdings", "Area" = "area", "Total from Standard Outputs" = "total", "Average standard outputs per holding" = "average"), selected = "holdings"),
        uiOutput(ns("variable_select")),  # Added variable select UI
        actionButton(ns("select_all_button"), "Select All"),
        actionButton(ns("deselect_all_button"), "Deselect All")
      ),
      mainPanel(
        id = ns("mainpanel"),
        width = 9,
        tabsetPanel(
          id = ns("tabs"),
          tabPanel("Bar Chart", barChartUI(ns("bar_chart")), value = ns("bar")),
          tabPanel("Data Table",
                   DTOutput(ns("data_table")),
                   downloadButton(ns("downloadData"), "Download Data"),
                   value = ns("data"))
        )
      )
    )
  )
}

farmTypesServer <- function(id) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    
    # Create reactive data excluding 'All'
    chart_data <- reactive({
      data <- farm_type %>%
        filter(`Main farm type` != "All")
      if (!is.null(input$variables)) {
        data <- data %>%
          filter(`Main farm type` %in% input$variables)
      }
      data
    })
    
    # Get initial order based on 'Holdings'
    initial_order <- reactive({
      data <- chart_data() %>%
        arrange(desc(Holdings))
      data$`Main farm type`
    })
    
    output$variable_select <- renderUI({
      choices <- unique(farm_type$`Main farm type`)
      selected <- setdiff(choices, "All")
      checkboxGroupInput(ns("variables"), "Choose variables to add to chart", choices = choices, selected = selected)
    })
    
    observeEvent(input$select_all_button, {
      updateCheckboxGroupInput(session, ns("variables"), selected = setdiff(unique(farm_type$`Main farm type`), "All"))
    })
    
    observeEvent(input$deselect_all_button, {
      updateCheckboxGroupInput(session, ns("variables"), selected = character(0))
    })
    
    y_col <- reactive({
      switch(input$data_type,
             "holdings" = "Holdings",
             "area" = "Hectares",
             "total" = "Total from Standard Outputs",
             "average" = "Average standard outputs per holding")
    })
    
    yAxisTitle <- reactive({
      switch(input$data_type,
             "holdings" = "Number of Holdings",
             "area" = "Area (hectares)",
             "total" = "Total from Standard Outputs",
             "average" = "Average Standard Outputs per Holding")
    })
    
    tooltip_format <- reactive({
      switch(input$data_type,
             "holdings" = "Holdings: {point.y:.0f}",
             "area" = "Area (hectares): {point.y:.2f}",
             "total" = "Total from Standard Outputs: {point.y:.0f}",
             "average" = "Average Standard Outputs per Holding: {point.y:.2f}")
    })
    
    barChartServer(
      id = "bar_chart",
      chart_data = reactive({
        data <- chart_data()
        data <- data %>%
          mutate(`Main farm type` = factor(`Main farm type`, levels = initial_order())) %>%
          arrange(`Main farm type`)
        data
      }),
      title = "Farm Types in Scotland",
      yAxisTitle = yAxisTitle,
      xAxisTitle = "Main Farm Type",
      footer = '<div style="font-size: 16px; font-weight: bold;"><a href="https://www.gov.scot/publications/results-scottish-agricultural-census-june-2023/documents/">Source: Scottish Agricultural Census: June 2023</a></div>',
      x_col = "Main farm type",
      y_col = y_col,
      tooltip_format = tooltip_format,
      maintain_order = TRUE
    )
    
    render_data_table(
      table_id = "data_table",
      chart_data = chart_data,
      output = output
    )
    
    handle_data_download(
      download_id = ns("downloadData"),
      chart_type = "Farm Types",
      chart_data = chart_data,
      input = input,
      output = output,
      year_input = NULL
    )
  })
}

## File: module_occupiers.R 
 ## File: module_occupiers.R

library(shiny)
library(highcharter)
library(dplyr)
library(tidyr)
library(DT)
library(geojsonio)

# Load the required modules
source("module_map.R")
source("module_line_chart.R")

occupiersUI <- function(id) {
  ns <- NS(id)
  sidebarLayout(
    sidebarPanel(
      width = 3,
      uiOutput(ns("sidebar_ui"))
    ),
    mainPanel(
      width = 9,
      tabsetPanel(
        id = ns("tabs"),
        tabPanel("Map", mapUI(ns("map")), value = "map"),
        tabPanel("Bar Chart", highchartOutput(ns("pyramid_chart"), height = "500px"), value = "bar_chart"),
        tabPanel("Timeseries", lineChartUI(ns("line_chart")), value = "timeseries"),
        tabPanel("Data Table", 
                 DTOutput(ns("data_table")),
                 downloadButton(ns("downloadData"), "Download Data"),
                 value = "data_table")
      )
    )
  )
}

occupiersServer <- function(id) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    
    # Data Processing for Bar Chart
    chart_data <- reactive({
      occupiers_age_gender %>%
        filter(`Occupier working time` == "Total working occupiers") %>%
        select(-`Male Total`, -`Female Total`) %>%
        pivot_longer(cols = -`Occupier working time`, names_to = "Gender_Age", values_to = "Count") %>%
        separate(Gender_Age, into = c("Gender", "Age"), sep = " ", extra = "merge") %>%
        mutate(Count = as.numeric(Count))
    })
    
    # Data Processing for Map
    regions_data <- reactive({
      occupiers_employees_subregion %>%
        select(-Scotland) %>%
        mutate(across(everything(), as.character)) %>%  # Ensure all columns are characters
        pivot_longer(cols = -`Occupiers and employees by category`, names_to = "sub_region", values_to = "value") %>%
        mutate(value = ifelse(is.na(as.numeric(value)), NA, as.numeric(value))) %>%
        filter(`Occupiers and employees by category` %in% c(
          "Total working Occupiers", 
          "Occupiers not working on the holding"
        ))
    })
    
    # Data Processing for Timeseries
    occupiers_employees <- occupiers_employees %>%
      mutate(across(starts_with("20"), safe_as_numeric))
    
    occupiers_timeseries_data <- reactive({
      occupiers_employees %>%
        pivot_longer(cols = -`Occupiers and employees by category`, names_to = "Year", values_to = "Value") %>%
        mutate(Year = as.numeric(Year)) %>%
        filter(grepl("occupiers", `Occupiers and employees by category`, ignore.case = TRUE))
    })
    
    # Sidebar UI
    output$sidebar_ui <- renderUI({
      req(input$tabs)
      if (input$tabs == "map") {
        radioButtons(ns("variable"), "Select Variable", choices = c(
          "Total working Occupiers", 
          "Occupiers not working on the holding"
        ))
      } else if (input$tabs == "data_table") {
        radioButtons(ns("data_source"), "Choose data to show:", choices = c("Chart Data", "Map Data", "Timeseries Data"))
      } else if (input$tabs == "timeseries") {
        tagList(
          checkboxGroupInput(
            ns("variables"), 
            "Choose variables to add to chart", 
            choices = unique(occupiers_timeseries_data()$`Occupiers and employees by category`), 
            selected = c('Occupiers - full time', 'Total working occupiers', 'Occupiers not working on the holding')
          ),
          sliderInput(
            ns("year_range"),
            "Select Year Range",
            min = 2012,
            max = 2023,
            value = c(2012, 2023),
            step = 1,
            sep = "",
            ticks = TRUE
          )
        )
      } else {
        tagList(
          checkboxGroupInput(ns("variables_bar"), "Choose age groups to display", choices = unique(chart_data()$Age), selected = unique(chart_data()$Age)),
          actionButton(ns("select_all_button"), "Select All"),
          actionButton(ns("deselect_all_button"), "Deselect All")
        )
      }
    })
    
    # Bar Chart - Filtered Data
    filtered_data <- reactive({
      req(input$variables_bar)
      chart_data() %>%
        filter(Age %in% input$variables_bar) %>%
        mutate(Count = ifelse(Gender == "Female", -Count, Count))
    })
    
    # Bar Chart - Output
    output$pyramid_chart <- renderHighchart({
      data <- filtered_data()
      female_data <- data %>% filter(Gender == "Female") %>% select(y = Count) %>% pull()
      male_data <- data %>% filter(Gender == "Male") %>% select(y = Count) %>% pull()
      categories <- data %>% filter(Gender == "Male") %>% select(Age) %>% pull()
      max_count <- max(abs(c(male_data, female_data)), na.rm = TRUE)
      
      highchart() %>%
        hc_chart(type = "bar") %>%
        hc_xAxis(categories = categories, reversed = FALSE) %>%
        hc_yAxis(
          min = -max_count,
          max = max_count,
          title = list(text = "Number of working occupiers"), 
          labels = list(formatter = JS("function () {
            return Math.abs(this.value);
          }"))
        ) %>%
        hc_plotOptions(bar = list(stacking = "normal")) %>%
        hc_add_series(name = "Female", data = as.list(female_data), color = "#002d54", tooltip = list(pointFormatter = JS("function() { return 'Female: ' + Math.abs(this.y); }"))) %>%
        hc_add_series(name = "Male", data = as.list(male_data), color = "#2b9c93", tooltip = list(pointFormatter = JS("function() { return 'Male: ' + this.y; }"))) %>%
        hc_tooltip(shared = FALSE) %>%
        hc_title(text = "Labour Interactive Plots") %>%
        hc_subtitle(text = "Population pyramid") %>%
        hc_legend(align = "center") %>%
        hc_xAxis(title = list(text = "Age group")) %>%
        hc_yAxis(title = list(text = "Number of working occupiers"),
                 labels = list(formatter = JS("function () {
                   return Math.abs(this.value);
                 }")))
    })
    
    # Timeseries Chart - Using the modular line chart
    filtered_timeseries_data <- reactive({
      req(input$variables, input$year_range)
      data <- occupiers_timeseries_data()
      data %>% 
        filter(
          `Occupiers and employees by category` %in% input$variables,
          Year >= input$year_range[1] & Year <= input$year_range[2]
        )
    })
    
    lineChartServer(
      id = "line_chart",
      chart_data = filtered_timeseries_data,
      title = "Agricultural Occupiers Timeseries",
      yAxisTitle = "Occupiers (1,000)",
      xAxisTitle = "Year",
      footer = '<div style="font-size: 16px; font-weight: bold;"><a href="https://www.gov.scot/publications/results-scottish-agricultural-census-june-2023/documents/">Source: Scottish Agricultural Census: June 2023</a></div>',
      x_col = "Year",
      y_col = "Value"
    )
    
    # Map - Use the new map module
    mapServer(
      id = "map",
      data = regions_data,
      variable = reactive(input$variable),
      title = "Occupiers by Region"
    )
    
    # Data Table - Output
    output$data_table <- renderDT({
      req(input$data_source)
      if (input$data_source == "Chart Data") {
        datatable(chart_data())
      } else if (input$data_source == "Map Data") {
        datatable(regions_data())
      } else {
        datatable(filtered_timeseries_data())
      }
    })
    
    # Data Table - Download Handler
    output$downloadData <- downloadHandler(
      filename = function() {
        paste(input$data_source, Sys.Date(), ".csv", sep = "")
      },
      content = function(file) {
        if (input$data_source == "Chart Data") {
          write.csv(chart_data(), file, row.names = FALSE)
        } else if (input$data_source == "Map Data") {
          write.csv(regions_data(), file, row.names = FALSE)
        } else {
          write.csv(filtered_timeseries_data(), file, row.names = FALSE)
        }
      }
    )
    
    # Select/Deselect all for bar chart
    observeEvent(input$select_all_button, {
      updateCheckboxGroupInput(session, ns("variables_bar"), selected = unique(chart_data()$Age))
    })
    
    observeEvent(input$deselect_all_button, {
      updateCheckboxGroupInput(session, ns("variables_bar"), selected = character(0))
    })
  })
}

# Testing module
content_demo <- function() {
  ui <- fluidPage(occupiersUI("occupiers_map_test"))
  server <- function(input, output, session) {
    occupiersServer("occupiers_map_test")
  }
  shinyApp(ui, server)
}

content_demo()

## File: module_owned_land.R 
 ## File: module_owned_land.R

library(shiny)
library(highcharter)
library(dplyr)
library(tidyr)
library(DT)

# Load the required module
source("module_line_chart.R")

ownedLandUI <- function(id) {
  ns <- NS(id)
  sidebarLayout(
    sidebarPanel(
      width = 3,
      checkboxGroupInput(
        ns("variables"), 
        "Choose variables to add to chart", 
        choices = unique(owned_rented_land$`Area owned or rented`[-4]), 
        selected = unique(owned_rented_land$`Area owned or rented`[-4])
      )
    ),
    mainPanel(
      width = 9,
      tabsetPanel(
        id = ns("tabs"),
        tabPanel("Timeseries", 
                 lineChartUI(ns("line_chart")), 
                 value = "timeseries"),
        tabPanel("Data Table", 
                 DTOutput(ns("data_table")), 
                 downloadButton(ns("downloadData"), "Download Data"), 
                 value = "data_table")
      )
    )
  )
}

ownedLandServer <- function(id) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    
    # Data Processing for Timeseries
    owned_rented_land_filtered <- owned_rented_land %>% 
      filter(`Area owned or rented` != "Percentage of area rented")
    
    owned_rented_land_long <- owned_rented_land_filtered %>%
      pivot_longer(cols = -`Area owned or rented`, names_to = "Year", values_to = "Value") %>%
      mutate(Year = as.numeric(Year))
    
    filtered_owned_rented_land <- reactive({
      req(input$variables)
      data <- owned_rented_land_long %>%
        filter(`Area owned or rented` %in% input$variables)
      data
    })
    
    # Line Chart
    lineChartServer(
      id = "line_chart",
      chart_data = filtered_owned_rented_land,
      title = "Owned and Rented Land Timeseries",
      yAxisTitle = "Area (1,000 hectares)",
      xAxisTitle = "Year",
      footer = '<div style="font-size: 16px; font-weight: bold;"><a href="https://www.gov.scot/publications/results-scottish-agricultural-census-june-2023/documents/">Source: Scottish Agricultural Census: June 2023</a></div>',
      x_col = "Year",
      y_col = "Value"
    )
    
    # Data Table
    output$data_table <- renderDT({
      datatable(filtered_owned_rented_land())
    })
    
    # Download Handler
    output$downloadData <- downloadHandler(
      filename = function() {
        paste("owned_rented_land", Sys.Date(), ".csv", sep = "")
      },
      content = function(file) {
        write.csv(filtered_owned_rented_land(), file, row.names = FALSE)
      }
    )
  })
}

# Testing module
content_demo <- function() {
  ui <- fluidPage(ownedLandUI("owned_land_test"))
  server <- function(input, output, session) {
    ownedLandServer("owned_land_test")
  }
  shinyApp(ui, server)
}

content_demo()

## File: module_land_use_summary.R 
 # File: module_land_use_summary.R

landUseSummaryUI <- function(id) {
  ns <- NS(id)
  tagList(
    sidebarLayout(
      sidebarPanel(
        width = 3,
        checkboxGroupInput(ns("variables"), "Choose variables to add to chart", 
                           choices = c("Total crops, fallow, and set-aside", "Total grass", "Rough grazing"),
                           selected = c("Total crops, fallow, and set-aside", "Total grass", "Rough grazing"))
      ),
      mainPanel(
        id = ns("mainpanel"),
        width = 9,
        tabsetPanel(
          id = ns("tabs"),
          tabPanel("Summary",
                   div(
                     class = "container-fluid",  # Use container-fluid for full-width responsive container
                     tags$div(
                       style = "font-size: 24px; font-weight: bold;",
                       "Most of Scotland's area is used for agriculture"
                     ),
                     tags$div(
                       style = "margin-top: 20px; text-align: left;",  # Align the image container to the left
                       tags$img(src = "land_use_map.svg", alt = "Land Use Map", style = "max-width: 100%; height: auto; max-height: 500px;")
                     ),
                     tags$div(
                       style = "margin-top: 20px; font-size: 16px;",
                       HTML("
                         <p>This map shows the main farming types found in each area. Large areas of Scotland have hilly or rocky land suitable for livestock, but limited growing conditions. These areas are shown in light green on the map. The areas in black have better soil and can support crops usually grown for animal feed. Dark green areas can support vegetables, fruit and cereal farming for human consumption.</p>
                         <p>The total Scottish agricultural area in 2023 was 5.33 million hectares, 69 per cent of Scotland’s total land. However, it should be noted that large areas of agricultural land are only lightly farmed. For example, hilly or mountainous areas are mostly used for rough grazing. The total Scottish agricultural area excludes common grazing land.</p>
                         <p>More information about land use is available in the Scottish Agricultural Census.</p>
                         <p>The twin climate change and environment crises mean considerations as to how we own, use and manage our land have never been as important as they are now. Scotland’s land and the natural capital it supports are some of our most valuable assets. It is vital to our environment, economy and wellbeing as individuals and communities. Information about land use policy is available on <a href='https://www.gov.scot' target='_blank'>gov.scot</a>.</p>
                       ")
                     )
                   )
          ),
          tabPanel("Bar Chart",
                   barChartUI(ns("bar_chart"))
          )
        )
      )
    )
  )
}

landUseSummaryServer <- function(id) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    
    chart_data <- reactive({
      agricultural_area_hectares %>%
        filter(`Crop/Land use` %in% input$variables) %>%
        select(`Crop/Land use`, `2023 Area`) %>%
        rename(Variable = `Crop/Land use`, Value = `2023 Area`)
    })
    
    barChartServer(
      id = "bar_chart",
      chart_data = chart_data,
      title = "Agricultural Area in 2023 by Land Use Type",
      yAxisTitle = "Area (1,000 hectares)",
      xAxisTitle = "Land Use Type",
      footer = '<div style="font-size: 16px; font-weight: bold;"><a href="https://www.gov.scot/publications/results-scottish-agricultural-census-june-2023/documents/">Source: Scottish Agricultural Census: June 2023</a></div>',
      x_col = "Variable",
      y_col = "Value",
      tooltip_format = "Area (hectares): {point.y:.2f}"
    )
  })
}

## File: module_cattle.R 
 library(shiny)
library(highcharter)
library(DT)
library(dplyr)
library(tidyr)
library(geojsonio)

# Load the required module
source("module_map.R")

# Define UI for the cattle module
cattleUI <- function(id) {
  ns <- NS(id)
  tabsetPanel(
    id = ns("tabs"),
    tabPanel(
      "Map",
      sidebarLayout(
        sidebarPanel(
          width = 3,
          radioButtons(
            ns("variable"), 
            "Select Variable", 
            choices = c(
              "Total Female Dairy Cattle" = "Total Female Dairy Cattle",
              "Total Female Beef Cattle" = "Total Female Beef Cattle",
              "Total Male Cattle" = "Total Male Cattle",
              "Total Calves" = "Total Calves",
              "Total Cattle" = "Total Cattle"
            )
          )
        ),
        mainPanel(
          width = 9,
          mapUI(ns("map"))
        )
      )
    ),
    tabPanel(
      "Timeseries",
      sidebarLayout(
        sidebarPanel(
          width = 3,
          selectizeInput(
            ns("timeseries_variable"),
            "Select Variable",
            choices = unique(number_of_cattle$`Cattle by category`),
            selected = c(
              "Total Female Dairy Cattle",
              "Total Female Beef Cattle",
              "Total Male Cattle",
              "Total Calves",
              "Total Cattle"
            ),
            multiple = TRUE
          )
        ),
        mainPanel(
          width = 9,
          highchartOutput(ns("timeseries"), height = "75vh")
        )
      )
    ),
    tabPanel(
      "Data Table",
      sidebarLayout(
        sidebarPanel(
          width = 3,
          radioButtons(
            ns("data_type"), 
            "Select Data Type", 
            choices = c("Map Data", "Timeseries Data")
          )
        ),
        mainPanel(
          width = 9,
          DTOutput(ns("datatable"))
        )
      )
    )
  )
}

# Define server logic for the cattle module
cattleServer <- function(id) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    
    # Filter livestock_subregion dataset for the selected categories
    cattle_data <- livestock_subregion %>%
      filter(`Livestock by category` %in% c(
        "Total Female Dairy Cattle",
        "Total Female Beef Cattle",
        "Total Male Cattle",
        "Total Calves",
        "Total Cattle"
      )) %>%
      select(-Scotland) %>%
      mutate(across(everything(), as.character)) %>%
      pivot_longer(cols = -`Livestock by category`, names_to = "sub_region", values_to = "value") %>%
      mutate(value = safe_as_numeric(value))
    
    mapServer(
      id = "map",
      data = reactive({
        req(input$variable)
        cattle_data %>% filter(`Livestock by category` == input$variable)
      }),
      variable = reactive(input$variable),
      title = "Cattle Distribution by Region"
    )
    
    # Timeseries data processing
    timeseries_data <- number_of_cattle %>%
      pivot_longer(cols = -`Cattle by category`, names_to = "year", values_to = "value") %>%
      mutate(year = as.numeric(year))
    
    output$timeseries <- renderHighchart({
      req(input$timeseries_variable)
      
      filtered_timeseries <- timeseries_data %>%
        filter(`Cattle by category` %in% input$timeseries_variable)
      
      highchart() %>%
        hc_chart(zoomType = "xy") %>%
        hc_title(text = "Cattle Time Series") %>%
        hc_xAxis(categories = unique(filtered_timeseries$year)) %>%
        hc_add_series_list(
          lapply(input$timeseries_variable, function(variable) {
            data_series <- filtered_timeseries %>% filter(`Cattle by category` == variable)
            list(name = variable, data = data_series$value)
          })
        )
    })
    
    output$datatable <- renderDT({
      req(input$data_type)
      
      if (input$data_type == "Map Data") {
        datatable(cattle_data)
      } else if (input$data_type == "Timeseries Data") {
        datatable(timeseries_data)
      }
    })
  })
}

# Testing module
cattle_demo <- function() {
  ui <- fluidPage(cattleUI("cattle_test"))
  server <- function(input, output, session) {
    cattleServer("cattle_test")
  }
  shinyApp(ui, server)
}

cattle_demo()

## File: module_sheep.R 
 # File: module_sheep.R

library(shiny)
library(highcharter)
library(dplyr)
library(tidyr)
library(geojsonio)
library(DT)

# Load the required module
source("module_map.R")

# Define UI for the sheep module
sheepUI <- function(id) {
  ns <- NS(id)
  sidebarLayout(
    sidebarPanel(
      width = 3,
      conditionalPanel(
        condition = "input.tabsetPanel === 'Map'",
        ns = ns,
        radioButtons(
          ns("variable"), 
          "Select Variable", 
          choices = c(
            "Ewes for breeding" = "Ewes for breeding",
            "Other sheep one year old and over for breeding" = "Other sheep one year old and over for breeding",
            "Rams to be used for service" = "Rams for service",
            "Lambs" = "Lambs",
            "Total sheep" = "Total sheep"
          )
        )
      ),
      conditionalPanel(
        condition = "input.tabsetPanel === 'Time Series'",
        ns = ns,
        checkboxGroupInput(
          ns("timeseries_variables"),
          "Select Time Series Variables",
          choices = c(
            "Ewes used for breeding in previous season",
            "Rams to be used for service",
            "Sheep for breeding aged 1 year and over",
            "Other",
            "Total other sheep 1 year and over",
            "Lambs",
            "Total sheep"
          ),
          selected = c(
            "Ewes used for breeding in previous season",
            "Rams to be used for service",
            "Sheep for breeding aged 1 year and over",
            "Total other sheep 1 year and over",
            "Lambs"
          )
        )
      ),
      conditionalPanel(
        condition = "input.tabsetPanel === 'Data Table'",
        ns = ns,
        radioButtons(
          ns("table_data"),
          "Select Data to Display",
          choices = c("Map Data" = "map", "Time Series Data" = "timeseries"),
          selected = "map"
        )
      )
    ),
    mainPanel(
      width = 9,
      tabsetPanel(
        id = ns("tabsetPanel"),
        tabPanel("Map", mapUI(ns("map"))),
        tabPanel("Time Series", highchartOutput(ns("timeseries"))),
        tabPanel("Data Table", DTOutput(ns("table")))
      )
    )
  )
}

# Define server logic for the sheep module
sheepServer <- function(id) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    
    # Filter livestock_subregion dataset for the selected categories
    sheep_data <- livestock_subregion %>%
      filter(`Livestock by category` %in% c(
        "Ewes for breeding",
        "Other sheep one year old and over for breeding",
        "Rams for service",
        "Lambs",
        "Total sheep"
      )) %>%
      select(-Scotland) %>%
      mutate(across(everything(), as.character)) %>%
      pivot_longer(cols = -`Livestock by category`, names_to = "sub_region", values_to = "value") %>%
      mutate(value = safe_as_numeric(value))
    
    mapServer(
      id = "map",
      data = reactive({
        req(input$variable)
        sheep_data %>% filter(`Livestock by category` == input$variable)
      }),
      variable = reactive(input$variable),
      title = "Sheep Distribution by Region"
    )
    
    output$timeseries <- renderHighchart({
      req(input$timeseries_variables)
      filtered_data <- number_of_sheep %>%
        filter(`Sheep by category` %in% input$timeseries_variables) %>%
        pivot_longer(cols = -`Sheep by category`, names_to = "year", values_to = "value")
      
      highchart() %>%
        hc_add_series(data = filtered_data, hcaes(x = year, y = value, group = `Sheep by category`), type = "line") %>%
        hc_title(text = "Sheep Time Series Data") %>%
        hc_xAxis(title = list(text = "Year")) %>%
        hc_yAxis(title = list(text = "Number of Sheep")) %>%
        hc_chart(zoomType = "xy")
    })
    
    output$table <- renderDT({
      req(input$tabsetPanel == "Data Table")
      if (input$table_data == "map") {
        req(input$variable)
        sheep_data %>%
          filter(`Livestock by category` == input$variable) %>%
          datatable()
      } else {
        req(input$timeseries_variables)
        number_of_sheep %>%
          filter(`Sheep by category` %in% input$timeseries_variables) %>%
          pivot_longer(cols = -`Sheep by category`, names_to = "year", values_to = "value") %>%
          datatable()
      }
    })
  })
}

# Testing module
sheep_demo <- function() {
  ui <- fluidPage(sheepUI("sheep_test"))
  server <- function(input, output, session) {
    sheepServer("sheep_test")
  }
  shinyApp(ui, server)
}

sheep_demo()

## File: module_pigs.R 
 # File: module_pigs.R

library(shiny)
library(highcharter)
library(dplyr)
library(tidyr)
library(geojsonio)
library(DT)

# Load the required module
source("module_map.R")

# Define UI for the pigs module
pigsUI <- function(id) {
  ns <- NS(id)
  tabsetPanel(
    id = ns("tabs"),
    tabPanel(
      "Map",
      sidebarLayout(
        sidebarPanel(
          width = 3,
          radioButtons(
            ns("variable"), 
            "Select Variable", 
            choices = c(
              "Female pigs breeding herd" = "Female pigs breeding herd",
              "All other non-breeding pigs" = "All other non-breeding pigs",
              "Total pigs" = "Total pigs"
            )
          )
        ),
        mainPanel(
          width = 9,
          mapUI(ns("map"))
        )
      )
    ),
    tabPanel(
      "Timeseries",
      sidebarLayout(
        sidebarPanel(
          width = 3,
          selectizeInput(
            ns("timeseries_variable"),
            "Select Variable",
            choices = unique(number_of_pigs$`Pigs by category`),
            selected = c(
              "Total breeding herd",
              "80 kg liveweight and over",
              "50 kg and under 80 kg liveweight",
              "Under 50 kg liveweight"
            ),
            multiple = TRUE
          )
        ),
        mainPanel(
          width = 9,
          highchartOutput(ns("timeseries"), height = "75vh")
        )
      )
    ),
    tabPanel(
      "Data Table",
      sidebarLayout(
        sidebarPanel(
          width = 3,
          radioButtons(
            ns("data_type"), 
            "Select Data Type", 
            choices = c("Map Data", "Timeseries Data")
          )
        ),
        mainPanel(
          width = 9,
          DTOutput(ns("datatable"))
        )
      )
    )
  )
}

# Define server logic for the pigs module
pigsServer <- function(id) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    
    # Filter livestock_subregion dataset for the selected categories
    pigs_data <- livestock_subregion %>%
      filter(`Livestock by category` %in% c(
        "Female pigs breeding herd",
        "All other non-breeding pigs",
        "Total pigs"
      )) %>%
      select(-Scotland) %>%
      mutate(across(everything(), as.character)) %>%
      pivot_longer(cols = -`Livestock by category`, names_to = "sub_region", values_to = "value") %>%
      mutate(value = as.numeric(value))
    
    mapServer(
      id = "map",
      data = reactive({
        req(input$variable)
        pigs_data %>% filter(`Livestock by category` == input$variable)
      }),
      variable = reactive(input$variable),
      title = "Pigs Distribution by Region"
    )
    
    # Timeseries data processing
    timeseries_data <- number_of_pigs %>%
      pivot_longer(cols = -`Pigs by category`, names_to = "year", values_to = "value") %>%
      mutate(year = as.numeric(year))
    
    output$timeseries <- renderHighchart({
      req(input$timeseries_variable)
      
      filtered_timeseries <- timeseries_data %>%
        filter(`Pigs by category` %in% input$timeseries_variable)
      
      highchart() %>%
        hc_chart(zoomType = "xy") %>%
        hc_title(text = "Pigs Time Series") %>%
        hc_xAxis(categories = unique(filtered_timeseries$year)) %>%
        hc_add_series_list(
          lapply(input$timeseries_variable, function(variable) {
            data_series <- filtered_timeseries %>% filter(`Pigs by category` == variable)
            list(name = variable, data = data_series$value)
          })
        )
    })
   
 
    output$datatable <- renderDT({
      req(input$data_type)
      
      if (input$data_type == "Map Data") {
        datatable(pigs_data)
      } else if (input$data_type == "Timeseries Data") {
        datatable(timeseries_data)
      }
    })
  })
}

# Testing module
pigs_demo <- function() {
  ui <- fluidPage(pigsUI("pigs_test"))
  server <- function(input, output, session) {
    pigsServer("pigs_test")
  }
  shinyApp(ui, server)
}

pigs_demo()

## File: module_poultry.R 
 # File: module_poultry.R

library(shiny)
library(highcharter)
library(dplyr)
library(tidyr)
library(geojsonio)
library(DT)

# Load the required module
source("module_map.R")

# Define UI for the poultry module
poultryUI <- function(id) {
  ns <- NS(id)
  tabsetPanel(
    id = ns("tabs"),
    tabPanel(
      "Map",
      sidebarLayout(
        sidebarPanel(
          width = 3,
          radioButtons(
            ns("variable"), 
            "Select Variable", 
            choices = c(
              "Fowls for producing eggs" = "Fowls for producing eggs",
              "Fowls for breeding" = "Fowls for breeding",
              "Broilers for other table fowls and other poultry" = "Broilers for other table fowls and other poultry",
              "Total poultry" = "Total poultry"
            )
          )
        ),
        mainPanel(
          width = 9,
          mapUI(ns("map"))
        )
      )
    ),
    tabPanel(
      "Timeseries",
      sidebarLayout(
        sidebarPanel(
          width = 3,
          selectizeInput(
            ns("timeseries_variable"),
            "Select Variable",
            choices = unique(number_of_poultry$`Poultry by category`),
            selected = c(
              "Total fowls for producing eggs",
              "Total fowls for breeding",
              "Broilers and other table birds",
              "Total Poultry"
            ),
            multiple = TRUE
          )
        ),
        mainPanel(
          width = 9,
          highchartOutput(ns("timeseries"), height = "75vh")
        )
      )
    ),
    tabPanel(
      "Data Table",
      sidebarLayout(
        sidebarPanel(
          width = 3,
          radioButtons(
            ns("data_type"), 
            "Select Data Type", 
            choices = c("Map Data", "Timeseries Data")
          )
        ),
        mainPanel(
          width = 9,
          DTOutput(ns("datatable"))
        )
      )
    )
  )
}

# Define server logic for the poultry module
poultryServer <- function(id) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    
    # Filter livestock_subregion dataset for the selected categories
    poultry_data <- livestock_subregion %>%
      filter(`Livestock by category` %in% c(
        "Fowls for producing eggs",
        "Fowls for breeding",
        "Broilers for other table fowls and other poultry",
        "Total poultry"
      )) %>%
      select(-Scotland) %>%
      mutate(across(everything(), as.character)) %>%
      pivot_longer(cols = -`Livestock by category`, names_to = "sub_region", values_to = "value") %>%
      mutate(value = safe_as_numeric(value))
    
    mapServer(
      id = "map",
      data = reactive({
        req(input$variable)
        poultry_data %>% filter(`Livestock by category` == input$variable)
      }),
      variable = reactive(input$variable),
      title = "Poultry Distribution by Region"
    )
    
    # Timeseries data processing
    timeseries_data <- number_of_poultry %>%
      pivot_longer(cols = -`Poultry by category`, names_to = "year", values_to = "value") %>%
      mutate(year = as.numeric(year))
    
    output$timeseries <- renderHighchart({
      req(input$timeseries_variable)
      
      filtered_timeseries <- timeseries_data %>%
        filter(`Poultry by category` %in% input$timeseries_variable)
      
      highchart() %>%
        hc_chart(zoomType = "xy") %>%
        hc_title(text = "Poultry Time Series") %>%
        hc_xAxis(categories = unique(filtered_timeseries$year)) %>%
        hc_add_series_list(
          lapply(input$timeseries_variable, function(variable) {
            data_series <- filtered_timeseries %>% filter(`Poultry by category` == variable)
            list(name = variable, data = data_series$value)
          })
        )
    })
    
    output$datatable <- renderDT({
      req(input$data_type)
      
      if (input$data_type == "Map Data") {
        datatable(poultry_data)
      } else if (input$data_type == "Timeseries Data") {
        datatable(timeseries_data)
      }
    })
  })
}

# Testing module
poultry_demo <- function() {
  ui <- fluidPage(poultryUI("poultry_test"))
  server <- function(input, output, session) {
    poultryServer("poultry_test")
  }
  shinyApp(ui, server)
}

poultry_demo()

## File: module_other_animals.R 
 # File: module_other_animals.R

library(shiny)
library(highcharter)
library(dplyr)
library(tidyr)
library(geojsonio)
library(DT)

# Load the required module
source("module_map.R")

# Define UI for the other animals module
otherAnimalsUI <- function(id) {
  ns <- NS(id)
  sidebarLayout(
    sidebarPanel(
      width = 3,
      conditionalPanel(
        condition = "input.tabsetPanel === 'Map'",
        ns = ns,
        radioButtons(
          ns("variable"), 
          "Select Variable", 
          choices = c(
            "Goats and kids" = "Goats and kids",
            "Deer" = "Deer",
            "Horses" = "Horses",
            "Donkeys" = "Donkeys",
            "Camelids" = "Camelids",
            "Beehives" = "Beehives"
          )
        )
      ),
      conditionalPanel(
        condition = "input.tabsetPanel === 'Time Series'",
        ns = ns,
        checkboxGroupInput(
          ns("timeseries_variables"),
          "Select Time Series Variables",
          choices = c(
            "Goats",
            "Deer",
            "Horses",
            "Donkeys",
            "Camelids",
            "Beehives"
          ),
          selected = c(
            "Goats",
            "Deer",
            "Horses",
            "Donkeys",
            "Camelids",
            "Beehives"
          )
        )
      ),
      conditionalPanel(
        condition = "input.tabsetPanel === 'Data Table'",
        ns = ns,
        radioButtons(
          ns("table_data"),
          "Select Data to Display",
          choices = c("Map Data" = "map", "Time Series Data" = "timeseries"),
          selected = "map"
        )
      )
    ),
    mainPanel(
      width = 9,
      tabsetPanel(
        id = ns("tabsetPanel"),
        tabPanel("Map", mapUI(ns("map"))),
        tabPanel("Time Series", highchartOutput(ns("timeseries"))),
        tabPanel("Data Table", DTOutput(ns("table")))
      )
    )
  )
}

# Define server logic for the other animals module
otherAnimalsServer <- function(id) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    
    # Filter livestock_subregion dataset for the selected categories
    other_animals_data <- livestock_subregion %>%
      filter(`Livestock by category` %in% c(
        "Goats and kids",
        "Deer",
        "Horses",
        "Donkeys",
        "Camelids",
        "Beehives"
      )) %>%
      select(-Scotland) %>%
      mutate(across(everything(), as.character)) %>%
      pivot_longer(cols = -`Livestock by category`, names_to = "sub_region", values_to = "value") %>%
      mutate(value = safe_as_numeric(value))
    
    
    
    mapServer(
      id = "map",
      data = reactive({
        req(input$variable)
        other_animals_data %>% filter(`Livestock by category` == input$variable)
      }),
      variable = reactive(input$variable),
      title = "Other Animals Distribution by Region"
    )
    
    output$timeseries <- renderHighchart({
      req(input$timeseries_variables)
      filtered_data <- number_of_other_livestock %>%
        mutate(across(-`Livestock by category`, as.numeric)) %>%
        pivot_longer(cols = -`Livestock by category`, names_to = "year", values_to = "value")
      
      highchart() %>%
        hc_add_series(data = filtered_data, hcaes(x = year, y = value, group = `Livestock by category`), type = "line") %>%
        hc_title(text = "Other Animals Time Series Data") %>%
        hc_xAxis(title = list(text = "Year")) %>%
        hc_yAxis(title = list(text = "Number of Animals")) %>%
        hc_chart(zoomType = "xy")
    })
    
    output$table <- renderDT({
      req(input$tabsetPanel == "Data Table")
      if (input$table_data == "map") {
        datatable(other_animals_data)
      } else {
        req(input$timeseries_variables)
        number_of_other_livestock %>%
          filter(`Livestock by category` %in% input$timeseries_variables) %>%
          mutate(across(-`Livestock by category`, as.numeric)) %>%
          pivot_longer(cols = -`Livestock by category`, names_to = "year", values_to = "value") %>%
          datatable()
      }
    })
  })
}

# Testing module
other_animals_demo <- function() {
  ui <- fluidPage(otherAnimalsUI("other_animals_test"))
  server <- function(input, output, session) {
    otherAnimalsServer("other_animals_test")
  }
  shinyApp(ui, server)
}

other_animals_demo()
