## File: app.R 
 # app.R

# Source other elements
source("module_line_chart.R")
source("module_area_chart.R")
source("module_data_table.R")
source("options.R")
source("module_summary.R")
source("module_map.R")
source("module_occupiers_region.R")  # Added new module

# Source the UI and server components
source("ui.R")
source("server.R")

# Run the app
shinyApp(ui = ui, server = server)

## File: data.R 
 ## data.R

library(readxl)
library(openxlsx)
library(dplyr)
library(tidyr)



# Load  data from the Excel file
file_path <- "ghg_data.xlsx"
agri_gas <- read_excel(file_path, sheet = "agri_gas")
national_total <- read_excel(file_path, sheet = "national_total")
subsector_total <- read_excel(file_path, sheet = "subsector_total")
subsector_source <- read_excel(file_path, sheet = "subsector_source")

agri_gas <- agri_gas %>% 
  rename(Gas = ...1)

# Reshape the data to long format
agri_gas <- agri_gas %>% pivot_longer(cols = -Gas, names_to = "Year", values_to = "Value")
national_total <- national_total %>% pivot_longer(cols = -Industry, names_to = "Year", values_to = "Value")
subsector_total <- subsector_total %>% pivot_longer(cols = -Subsector, names_to = "Year", values_to = "Value")

# Convert Year to numeric
agri_gas$Year <- as.numeric(agri_gas$Year)
national_total$Year <- as.numeric(national_total$Year)
subsector_total$Year <- as.numeric(subsector_total$Year)


save(subsector_total, agri_gas, national_total, subsector_source, file = "ghg_data.RData")

# load data
load("ghg_data.RData")



# File: load_tables.R

library(readxl)
library(dplyr)
library(stringr)


# Could do with being more automated
# Manually removed first x rows of metadata from each table
# Define file path
file_path <- "June+Agricultural+Census+2023+Tables.xlsx"

# Define the simplified table names and corresponding sheet names
table_names <- c(
  "agricultural_area_hectares" = "Table_1",
  "vegetables_bulbs_fruit_area" = "Table_2",
  "number_of_cattle" = "Table_3 ",
  "number_of_sheep" = "Table_4 ",
  "number_of_pigs" = "Table_5",
  "number_of_poultry" = "Table_6",
  "number_of_other_livestock" = "Table_7",
  "occupiers_employees" = "Table_8",
  "occupiers_age_gender" = "Table_9",
  "businesses_land_area" = "Table_10",
  "owned_rented_land" = "Table_11",
  "holdings_main_farm_type" = "Table_12",
  "agricultural_area_lfa" = "Table_13",
  "holdings_crops_grass_subregion" = "Table_14",
  "crops_grass_area_subregion" = "Table_15",
  "holdings_livestock_region_subregion" = "Table_16",
  "livestock_subregion" = "Table_17",
  "holdings_occupiers_employees_subregion" = "Table_18",
  "occupiers_employees_subregion" = "Table_19",
  "holdings_arable_land_crop_rotation" = "Table_20",
  "manure_fertiliser" = "Table_21"
)

# Function to remove columns and rows that are all NAs
clean_data <- function(data) {
  data <- data[, colSums(is.na(data)) < nrow(data)]  # Remove columns with all NAs
  data <- data[rowSums(is.na(data)) < ncol(data), ]  # Remove rows with all NAs
  return(data)
}

# Function to clean header names by removing text within brackets, any '\r\n', extra spaces, and specific region names
clean_headers <- function(headers) {
  headers <- str_replace_all(headers, "\\s*\\([^\\)]+\\)", "")  # Remove text within brackets
  headers <- str_replace_all(headers, "\r\n", " ")  # Remove \r\n
  headers <- str_replace_all(headers, "\\s+", " ")  # Replace multiple spaces with a single space
  headers <- str_replace_all(headers, "\\b(North West|North East|South East|South West)\\b", "")  # Remove specific region names
  headers <- str_trim(headers)  # Trim again to remove any resulting leading or trailing spaces
  return(headers)
}

# Read each table, clean it, and assign to a variable
for (table in names(table_names)) {
  sheet_name <- table_names[table]
  data <- read_excel(file_path, sheet = sheet_name)
  
  # Clean headers
  headers <- names(data)
  cleaned_headers <- clean_headers(headers)
  
  # Remove columns with '5 year' in the header (case insensitive)
  columns_to_remove <- grep("5 year", cleaned_headers, ignore.case = TRUE)
  if (length(columns_to_remove) > 0) {
    data <- data[, -columns_to_remove]
    cleaned_headers <- cleaned_headers[-columns_to_remove]
  }
  
  # Assign cleaned headers to the data
  names(data) <- cleaned_headers
  
  # Remove '\r\n' from all character columns
  data <- data %>% mutate(across(where(is.character), ~str_replace_all(.x, "\r\n", " ")))
  
  # Clean data
  cleaned_data <- clean_data(data)
  
  assign(table, cleaned_data)
}

# Save all tables to an RData file
save(list = names(table_names), file = "census_data.RData")

load("census_data.RData")


library(sf)
library(dplyr)
library(highcharter)
library(geojsonio)

# Load the shapefile
local_authorities <- st_read("pub_las.shp")

mapping_data <- data.frame(
  region = c("North West", "North West", "North West", "North West", 
             "North East", "North East", "North East", 
             "South East", "South East", "South East", "South East", "South East", 
             "South East", "South East", "South East", "South East",
             "South West", "South West", "South West", "South West", "South West", 
             "South West", "South West", "South West", "South West", "South West", 
             "South West", "South West", "South West", "South West", "South West", "South West"
             ),
  sub_region = c("Shetland", "Orkney", "Na h-Eileanan Siar", "Highland", 
                 "Grampian", "Grampian", "Grampian", 
                 "Tayside", "Tayside", "Tayside", "Fife", "Lothian", "Lothian", "Lothian", "Lothian", 
                 "Scottish Borders", "East Central", "East Central", "East Central", 
                 "Argyll & Bute", "Clyde Valley", "Clyde Valley", "Clyde Valley", "Clyde Valley", 
                 "Clyde Valley", "Clyde Valley", "Clyde Valley", "Clyde Valley", "Ayrshire", "Ayrshire", "Ayrshire", 
                 "Dumfries & Galloway"),
  local_authority = c("Shetland Islands", "Orkney Islands", "Na h-Eileanan an Iar", "Highland", 
                      "Aberdeen City", "Aberdeenshire", "Moray", 
                      "Angus", "Dundee City", "Perth and Kinross", "Fife", "East Lothian", "City of Edinburgh", 
                      "Midlothian", "West Lothian", "Scottish Borders", 
                      "Clackmannanshire", "Falkirk", "Stirling", 
                      "Argyll and Bute", "East Dunbartonshire", "East Renfrewshire", "Glasgow City", 
                      "Inverclyde", "North Lanarkshire", "Renfrewshire", "South Lanarkshire", 
                      "West Dunbartonshire", "East Ayrshire", "North Ayrshire", "South Ayrshire", 
                      "Dumfries and Galloway")
)

# Merge the shapefile with the mapping data
local_authorities <- local_authorities %>%
  left_join(mapping_data, by = c("local_auth" = "local_authority"))

# Ensure geometries are valid
local_authorities <- st_make_valid(local_authorities)

sub_regions <- local_authorities %>%
  group_by(sub_region) %>%
  summarise(geometry = st_union(geometry))

st_write(sub_regions, "sub_regions.geojson", driver = "GeoJSON")

# Load the GeoJSON file
geojson_data <- geojson_read("sub_regions.geojson", what = "sp")

geojson_data <- ms_simplify(geojson_data, keep = 0.01)

geojson_write(geojson_data, file = "subregions_simplified.geojson")


## File: hc_theme.R 
 # hc_theme.R

library(highcharter)

# Define the Highcharts theme
thm <- hc_theme(
  chart = list(
    style = list(
      fontFamily = "Arial, sans-serif",
      fontSize = "16px",
      color = "black"
    )
  ),
  title = list(
    style = list(
      fontFamily = "Arial, sans-serif",
      fontSize = "16px",
      color = "black"
    )
  ),
  subtitle = list(
    style = list(
      fontFamily = "Arial, sans-serif",
      fontSize = "16px",
      color = "black"
    )
  ),
  xAxis = list(
    labels = list(
      style = list(
        fontFamily = "Arial, sans-serif",
        fontSize = "16px",
        color = "black"
      )
    ),
    title = list(
      style = list(
        fontFamily = "Arial, sans-serif",
        fontSize = "16px",
        color = "black"
      )
    )
  ),
  yAxis = list(
    labels = list(
      style = list(
        fontFamily = "Arial, sans-serif",
        fontSize = "16px",
        color = "black"
      )
    ),
    title = list(
      style = list(
        fontFamily = "Arial, sans-serif",
        fontSize = "16px",
        color = "black"
      )
    )
  ),
  tooltip = list(
    style = list(
      fontFamily = "Arial, sans-serif",
      fontSize = "16px",
      color = "black"
    ),
    headerFormat = "<b>{point.key}</b><br/>",  
    pointFormat = "{series.name}: {point.y:.2f} MtCOâ‚‚e"
  ),
  legend = list(
    itemStyle = list(
      fontFamily = "Arial, sans-serif",
      fontSize = "16px",
      color = "black"
    )
  ),
  plotOptions = list(
    series = list(
      stickyTracking = FALSE,
      itemStyle = list(
        fontFamily = "Arial, sans-serif",
        fontSize = "16px",
        color = "black"
      ),
      dataLabels = list(
        style = list(
          fontFamily = "Arial, sans-serif",
          fontSize = "16px",  # Increase the font size for data labels
          color = "black"
        )
      ),
      marker = list(
        enabled = TRUE,
        states = list(
          hover = list(
            enabled = TRUE
          )
        )
      )
    )
  ),
  colors = c("#ca72a2", "#592c20", "#5d9f3c", "#0b4c0b", "#e5682a", "#6a2063", "#2b9c93", "#002d54")
)

# Apply the Highcharts theme globally
options(highcharter.theme = thm)

## File: module_area_chart.R 
 areaChartUI <- function(id) {
  ns <- NS(id)
  tagList(
    htmlOutput(ns("title")),
    highchartOutput(ns("area_chart")),
    htmlOutput(ns("footer")),
    div(
      class = "note",
      style = "margin-top: 20px; padding: 10px; border-top: 1px solid #ddd;",
      HTML(
        "<strong>Note:</strong><ul>
          <li>To remove a series from the chart, deselect the variable from the sidebar menu.</li>
          <li>Select a year range by adjusting the slider on the sidebar or by zooming into the graph by clicking and dragging over an area you wish to see.</li>
          <li>You can see data values for a specific year by hovering your mouse over the area.</li>
        </ul>"
      )
    )
  )
}

areaChartServer <- function(id, chart_data, title, yAxisTitle, xAxisTitle, footer, x_col, y_col) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    reactive_colors <- reactive({ assign_colors(chart_data(), preset_colors) })
    
    output$title <- renderUI({
      year_min <- min(chart_data()[[x_col]], na.rm = TRUE)
      year_max <- max(chart_data()[[x_col]], na.rm = TRUE)
      HTML(paste0("<div style='font-size: 20px; font-weight: bold;'>", title, ", ", year_min, " to ", year_max, "</div>"))
    })
    
    output$footer <- renderUI({
      HTML(footer)
    })
    
    output$area_chart <- renderHighchart({
      data <- chart_data()
      colors <- reactive_colors()
      group_column <- setdiff(names(data), c(x_col, y_col))[1] # Assuming only one group column
      hc <- highchart() %>%
        hc_chart(type = "area", zoomType = "xy") %>%
        hc_yAxis(title = list(text = yAxisTitle)) %>%
        hc_xAxis(title = list(text = xAxisTitle), type = "category", tickInterval = 5) %>%
        hc_plotOptions(area = list(stacking = "normal")) %>%
        hc_legend(align = "left", alignColumns = FALSE, layout = "horizontal") %>%
        hc_plotOptions(area = list(stickyTracking = TRUE)) %>%
        hc_add_theme(thm)
      
      unique_groups <- unique(data[[group_column]])
      lapply(unique_groups, function(g) {
        hc <<- hc %>%
          hc_add_series(name = g, data = data[data[[group_column]] == g, ] %>% select(x = !!sym(x_col), y = !!sym(y_col)), color = colors[[g]])
      })
      
      hc
    })
  })
}

## File: module_bar_chart.R 
 # File: module_bar_chart_combined.R

barChartUI <- function(id) {
  ns <- NS(id)
  tagList(
    htmlOutput(ns("title")),
    highchartOutput(ns("bar_chart")),
    htmlOutput(ns("footer")),
    div(
      class = "note",
      style = "margin-top: 20px; padding: 10px; border-top: 1px solid #ddd;",
      HTML(
        "<strong>Note:</strong><ul>
          <li>You can see data values for a specific variable by hovering your mouse over the bars.</li>
        </ul>"
      )
    )
  )
}

barChartServer <- function(id, chart_data, title, yAxisTitle, xAxisTitle, footer, x_col, y_col, tooltip_format) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    reactive_colors <- reactive({ assign_colors(chart_data(), preset_colors) })
    
    output$title <- renderUI({
      HTML(paste0("<div style='font-size: 20px; font-weight: bold;'>", title, "</div>"))
    })
    
    output$footer <- renderUI({
      HTML(footer)
    })
    
    output$bar_chart <- renderHighchart({
      data <- chart_data()
      if (nrow(data) == 0) return(NULL)
      colors <- reactive_colors()
      group_column <- setdiff(names(data), c(x_col, if (is.reactive(y_col)) y_col() else y_col))[1]
      
      if (is.reactive(y_col)) {
        data <- data %>%
          arrange(desc(!!sym(y_col())))  # Sort data by value in descending order
        y_col_value <- y_col()
      } else {
        data <- data %>%
          arrange(desc(!!sym(y_col)))  # Sort data by value in descending order
        y_col_value <- y_col
      }
      
      highchart() %>%
        hc_chart(type = "bar", inverted = TRUE, zoomType = "xy") %>%
        hc_xAxis(categories = data[[x_col]], title = list(text = xAxisTitle)) %>%
        hc_yAxis(title = list(text = if (is.reactive(yAxisTitle)) yAxisTitle() else yAxisTitle), allowDecimals = FALSE) %>%
        hc_plotOptions(bar = list(
          dataLabels = list(enabled = FALSE),
          colorByPoint = TRUE,
          groupPadding = 0,
          pointPadding = 0.1,
          borderWidth = 0
        )) %>%
        hc_add_series(
          name = "",
          data = data %>% mutate(y = !!sym(y_col_value), color = colors[!!sym(x_col)]) %>% 
            select(name = !!sym(x_col), y, color),
          colorByPoint = TRUE,
          showInLegend = FALSE
        ) %>%
        hc_tooltip(
          style = list(
            fontFamily = "Arial, sans-serif",
            fontSize = "16px",
            color = "black"
          ),
          headerFormat = "<b>{point.key}</b><br/>",  
          pointFormat = if (is.reactive(tooltip_format)) tooltip_format() else tooltip_format
        ) %>%
        hc_add_theme(thm)
    })
  })
}

## File: module_timelapse_bar_chart.R 
 #module_timelapse_bar_chart.R

timelapseBarChartUI <- function(id) {
  ns <- NS(id)
  tagList(
    tags$style(HTML("
      .chart-container {
        position: relative;
      }
      .chart-controls {
        display: flex;
        align-items: center;
      }
      .chart-controls .form-group {
        margin-bottom: 0;
        margin-left: 10px;
      }
      .chart-controls .btn {
        margin-left: 10px;
      }
      .year-label {
        margin-right: 10px;
        font-weight: bold;
      }
    ")),
    div(class = "chart-container",
        fluidRow(
          column(8, htmlOutput(ns("title"))),
          column(4, div(class = "chart-controls",
                        div(class = "year-label", "Year:"),
                        sliderInput(ns("year"), NULL, min = 1998, max = 2022, value = 1998, step = 1, sep = "", ticks = TRUE, animate = animationOptions(interval = 1000, loop = FALSE), width = '200px'),
                        actionButton(ns("playPause"), "", icon = icon("play"), class = "btn btn-primary")
          ))
        ),
        highchartOutput(ns("chart"), height = "500px")
    ),
    htmlOutput(ns("footer")),
    div(
      class = "note",
      style = "margin-top: 20px; padding: 10px; border-top: 1px solid #ddd;",
      HTML(
        "<strong>Note:</strong><ul>
          <li>Press the play button at the top right of the screen to see the timelapse of the data. You can manually adjust the year by adjusting the slider.</li>
          <li>To remove a series from the chart, deselect the variable from the sidebar menu.</li>
          <li>You can see data values for a specific year by hovering your mouse over the line.</li>
        </ul>"
      )
    )
  )
}

timelapseBarChartServer <- function(id, chart_data, title, yAxisTitle, xAxisTitle, footer, x_col, y_col) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    
    max_value <- reactive({
      all_data <- chart_data()
      if (is.null(all_data) || nrow(all_data) == 0) return(0)
      max_val <- max(all_data[[y_col]], na.rm = TRUE)
      return(max_val)
    })
    
    getData <- function(year, nbr) {
      data <- chart_data()
      if (is.null(data) || nrow(data) == 0) return(data.frame())
      data %>%
        filter(!!sym(x_col) == year) %>%
        arrange(desc(!!sym(y_col))) %>%
        slice(1:nbr) %>%
        mutate(!!sym(y_col) := as.numeric(!!sym(y_col)))
    }
    
    getSubtitle <- function(year, data) {
      if (nrow(data) == 0) return("")
      total_value <- sum(data[[y_col]], na.rm = TRUE)
      paste0("<span style='font-size: 80px'>", year, "</span><br><span style='font-size: 22px'>Total: <b>", round(total_value, 2), "</b> MtCOâ‚‚e</span>")
    }
    
    getDataList <- function(data, colors) {
      if (nrow(data) == 0) return(list())
      first_col_name <- names(data)[1]
      lapply(1:nrow(data), function(i) {
        list(
          name = data[[first_col_name]][i],
          y = data[[y_col]][i],
          color = colors[[data[[first_col_name]][i]]]
        )
      })
    }
    
    current_year <- reactiveVal(1998)
    nbr <- 20
    
    current_data <- reactive({
      getData(current_year(), nbr)
    })
    
    current_subtitle <- reactive({
      getSubtitle(current_year(), current_data())
    })
    
    current_colors <- reactive({
      assign_colors(chart_data(), preset_colors)
    })
    
    current_data_list <- reactive({
      getDataList(current_data(), current_colors())
    })
    
    updateYear <- function() {
      year <- current_year()
      if (year < 2022) {
        current_year(year + 1)
      } else {
        current_year(1998)
        session$sendCustomMessage(type = 'resetPlayButton', message = NULL)
      }
    }
    
    observe({
      if (!is.null(input$playPause) && input$playPause %% 2 == 1) {
        isolate({
          updateYear()
        })
        invalidateLater(1000, session)
      }
    })
    
    observe({
      updateSliderInput(session, "year", value = current_year())
    })
    
    output$title <- renderUI({
      HTML(paste0("<div style='font-size: 20px; font-weight: bold;'>", title, "</div>"))
    })
    
    output$footer <- renderUI({
      HTML(footer)
    })
    
    output$chart <- renderHighchart({
      data <- current_data()
      if (nrow(data) == 0) return(NULL)
      first_col_name <- names(data)[1]
      highchart() %>%
        hc_chart(type = "bar", zoomType = "xy", animation = list(duration = 1000)) %>%
        hc_xAxis(type = "category", categories = data[[first_col_name]]) %>%
        hc_yAxis(opposite = TRUE, tickPixelInterval = 150, title = list(text = yAxisTitle), max = max_value() + 1) %>%
        hc_plotOptions(series = list(
          animation = FALSE,
          groupPadding = 0,
          pointPadding = 0.1,
          borderWidth = 0,
          colorByPoint = FALSE,
          dataSorting = list(enabled = TRUE, matchByName = TRUE),
          dataLabels = list(enabled = TRUE, format = '{point.y:.2f}')
        )) %>%
        hc_series(list(
          name = as.character(current_year()),
          data = current_data_list()
        )) %>%
        hc_legend(enabled = FALSE) %>%
        hc_responsive(rules = list(
          list(
            condition = list(maxWidth = 550),
            chartOptions = list(
              xAxis = list(visible = FALSE),
              plotOptions = list(
                series = list(
                  dataLabels = list(
                    list(enabled = TRUE, y = 8),
                    list(enabled = TRUE, format = '{point.name}', y = -8, style = list(fontWeight = 'normal', opacity = 0.7))
                  )
                )
              )
            )
          )
        ))
    })
    
    observeEvent(input$year, {
      current_year(input$year)
    })
  })
}

## File: module_data_table.R 
 library(DT)
library(dplyr)
library(tidyr)

# Function to render data tables using DT::renderDT
render_data_table <- function(table_id, chart_data, output) {
  output[[table_id]] <- DT::renderDT({
    data <- chart_data()
    if ("Year" %in% colnames(data)) {
      data$Year <- as.character(data$Year)
      first_column_name <- names(data)[1]
      data <- pivot_wider(data, names_from = !!sym(first_column_name), values_from = Value)
    }
    data <- data %>% mutate(across(where(is.numeric), ~ formatC(.x, format = "f", digits = 2)))
    datatable(as_tibble(data), options = list(paging = FALSE, scrollX = TRUE, dom = 'Bfrtip', buttons = c('copy', 'csv', 'excel', 'pdf', 'print')), rownames = FALSE)
  })
}

# Function to handle data download
handle_data_download <- function(download_id, chart_type, chart_data, input, output, year_input = NULL) {
  output[[download_id]] <- downloadHandler(
    filename = function() {
      if (!is.null(year_input)) {
        paste("Agricultural Emissions Data -", chart_type, min(input[[year_input]]), "to", max(input[[year_input]]), ".csv")
      } else {
        paste("Agricultural Emissions Data -", chart_type, ".csv")
      }
    },
    content = function(file) { 
      data <- chart_data()
      if ("Year" %in% colnames(data)) {
        first_column_name <- names(data)[1]
        data <- pivot_wider(data, names_from = !!sym(first_column_name), values_from = Value)
      }
      data <- data %>% mutate(across(where(is.numeric), ~ formatC(.x, format = "f", digits = 5)))
      write.csv(data, file, row.names = FALSE)
    }
  )
}

## File: module_information.R 
 # module_information.R

informationUI <- function(id) {
  ns <- NS(id)
  tagList(
    div(
      class = "container",
      tags$div(style = "font-size: 24px; font-weight: bold;", "Publications:"),  # Bigger and bold title
      tags$div(
        style = "margin-top: 20px;",
        tags$div(style = "font-size: 18px; font-weight: bold;", "Scottish Greenhouse Gas Statistics"),
        p(HTML('Official estimates of greenhouse gas emissions are available in the <a href="https://www.gov.scot/publications/scottish-greenhouse-gas-statistics-2022/documents/" target="_blank">Scottish Greenhouse Gas Statistics 2022</a> publication.')),
        tags$div(style = "font-size: 18px; font-weight: bold;", "Greenhouse Gas Inventory Reports"),
        p(a(href = "https://www.gov.scot/publications/estimated-dairy-emissions-mitigation-smart-inventory/", "Greenhouse gas inventory: estimated dairy emissions and their mitigation", target = "_blank")),
        tags$div(style = "font-size: 18px; font-weight: bold;", "Climate change evidence reports"),
        p(a(href = "https://www.gov.scot/publications/resas-climate-change-evidence-dairy-farmer-led-group/", "Dairy Farmer-led Group: climate change evidence", target = "_blank")),
        p(a(href = "https://www.gov.scot/publications/resas-climate-change-evidence-arable-farmer-led-group/", "Arable Farmer-led Group: climate change evidence", target = "_blank")),
        p(a(href = "https://www.gov.scot/publications/resas-climate-change-evidence-huc-farmer-led-group/", "Hill, Upland and Crofting Farmer-led Group: climate change evidence", target = "_blank")),
        p(a(href = "https://www.gov.scot/publications/pig-sector-flg-climate-change-greenhouse-gas-evidence/", "Pig Sector Farmer-Led Climate Change Group: climate change and greenhouse gas evidence", target = "_blank")),
        tags$div(style = "font-size: 18px; font-weight: bold;", "Greenhouse Gas Inventory Reports"),
        p(a(href = "https://www.gov.scot/publications/estimated-dairy-emissions-mitigation-smart-inventory/", "Greenhouse gas inventory: estimated dairy emissions and their mitigation", target = "_blank")),
        p(a(href = "https://www.gov.scot/publications/estimated-arable-emissions-mitigation-smart-inventory/", "Greenhouse gas inventory: estimated arable emissions and their mitigation", target = "_blank")),
        p(a(href = "https://www.gov.scot/publications/disaggregating-headline-smart-inventory-figures/", "Greenhouse gas emissions - agricultural: disaggregating headline figures", target = "_blank"))
      ),
      tags$div(style = "font-size: 24px; font-weight: bold; margin-top: 40px;", "Glossary:"),  # Bigger and bold title
      tags$div(
        style = "margin-top: 20px;",
        tags$div(style = "font-size: 18px; font-weight: bold;", "Carbon dioxide (CO2):"),
        p("Carbon dioxide is one of the main gases responsible for climate change. It is mostly emitted through the oxidation of carbon in fossil fuels, e.g. burning coal."),
        tags$div(style = "font-size: 18px; font-weight: bold;", "Greenhouse gas:"),
        p("A greenhouse gas is a gas which absorbs infrared radiation emitted from the surface of the Earth, helping to retain a portion of that energy in the atmosphere as heat."),
        tags$div(style = "font-size: 18px; font-weight: bold;", "LULUCF:"),
        p("Estimates of emissions and removals from land use, land use change and forestry (LULUCF) depend critically on assumptions made on the rate of loss or gain of carbon in Scotlandâ€™s carbon rich soils. In Scotland, LULUCF activities, taken as a whole, acts as a slight source in recent years although acted as a net sink between 2009-2017, absorbing more greenhouse gas emissions than it releases."),
        tags$div(style = "font-size: 18px; font-weight: bold;", "Methane (CH4):"),
        p("Methane is a greenhouse gas that is around 28 times more potent in the atmosphere than CO2 over a 100-year time horizon. Main sources include agriculture and landfill."),
        tags$div(style = "font-size: 18px; font-weight: bold;", "Metric tonne of carbon dioxide equivalent (MtCOâ‚‚e):"),
        p("Provides an estimate of total GHG emissions taking into account the different effects that different gases have on climate change, known as their global warming potential (GWP)."),
        tags$div(style = "font-size: 18px; font-weight: bold;", "Nitrous oxide (N2O):"),
        p("Nitrous oxide is a greenhouse gas that is around 265 times more potent in the atmosphere than CO2 over a 100-year time horizon. The main source is agricultural soil.")
      )
    )
  )
}

## File: module_line_chart.R 
 lineChartUI <- function(id) {
  ns <- NS(id)
  tagList(
    htmlOutput(ns("title")),
    highchartOutput(ns("line_chart")),
    htmlOutput(ns("footer")),
    div(
      class = "note",
      style = "margin-top: 20px; padding: 10px; border-top: 1px solid #ddd;",
      HTML(
        "<strong>Note:</strong><ul>
          <li>To remove a series from the chart, deselect the variable from the sidebar menu.</li>
          <li>Select a year range by adjusting the slider on the sidebar or by zooming into the graph by clicking and dragging over an area you wish to see.</li>
          <li>You can see data values for a specific year by hovering your mouse over the line.</li>
        </ul>"
      )
    )
  )
}

lineChartServer <- function(id, chart_data, title, yAxisTitle, xAxisTitle, footer, x_col, y_col) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    reactive_colors <- reactive({ assign_colors(chart_data(), preset_colors) })
    
    output$title <- renderUI({
      year_min <- min(chart_data()[[x_col]], na.rm = TRUE)
      year_max <- max(chart_data()[[x_col]], na.rm = TRUE)
      HTML(paste0("<div style='font-size: 20px; font-weight: bold;'>", title, ", ", year_min, " to ", year_max, "</div>"))
    })
    
    output$footer <- renderUI({
      HTML(footer)
    })
    
    output$line_chart <- renderHighchart({
      data <- chart_data()
      colors <- reactive_colors()
      group_column <- setdiff(names(data), c(x_col, y_col))[1] # Assuming only one group column
      hc <- highchart() %>%
        hc_chart(type = "line", zoomType = "xy") %>%
        hc_yAxis(title = list(text = yAxisTitle)) %>%
        hc_xAxis(title = list(text = xAxisTitle), type = "category", tickInterval = 5) %>%
        hc_legend(align = "left", alignColumns = FALSE, layout = "horizontal") %>%
        hc_plotOptions(line = list(colorByPoint = FALSE)) %>%
        hc_add_theme(thm)
      
      unique_groups <- unique(data[[group_column]])
      lapply(unique_groups, function(g) {
        hc <<- hc %>%
          hc_add_series(name = g, data = data[data[[group_column]] == g, ] %>% select(x = !!sym(x_col), y = !!sym(y_col)), color = colors[[g]])
      })
      
      hc
    })
  })
}

## File: module_summary.R 
 #module_summary.R

library(shiny)
library(shinydashboard)
library(ggplot2)
library(dplyr)
library(highcharter)



# Function to create a small line plot for the value boxes
small_line_plot <- function(data, color) {
  ggplot(data, aes(x = Year, y = Value)) +
    geom_line(color = "#002d54") +
    theme_void() +
    theme(plot.background = element_rect(fill = "transparent", color = NA))
}

# Function to create an arrow for Year on Year change
create_yoy_arrow <- function(change) {
  if (is.na(change) || is.nan(change)) {
    icon("minus", style = "color: grey;")
  } else if (change > 0) {
    icon("arrow-up", style = "color: #2b9c93;")
  } else {
    icon("arrow-down", style = "color: #002d54;")
  }
}

# UI Module for Value Box
valueBoxUI <- function(id) {
  ns <- NS(id)
  uiOutput(ns("valueBox"))
}

# Server Module for Value Box
valueBoxServer <- function(id, data, category, industry, current_year, comparison_year) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    reactive_data <- reactive({ data() %>% filter(!!sym(category()) == !!industry(), Year %in% c(current_year(), comparison_year())) })
    
    output$valueBox <- renderUI({
      data_filtered <- reactive_data()
      current_value <- data_filtered %>% filter(Year == current_year()) %>% summarise(Value = sum(Value, na.rm = TRUE)) %>% pull(Value)
      comparison_value <- data_filtered %>% filter(Year == comparison_year()) %>% summarise(Value = sum(Value, na.rm = TRUE)) %>% pull(Value)
      yoy_change <- if (comparison_value == 0 || is.na(comparison_value)) NA else ((current_value - comparison_value) / comparison_value) * 100
      
      box(
        class = "value-box",
        title = NULL,
        width = 12,
        solidHeader = TRUE,
        div(
          style = "display: flex; flex-direction: column; justify-content: space-between; height: 100%; padding: 5px;", # Adjusted padding
          div(
            style = "flex: 1; margin-bottom: 5px;", # Reduced margin-bottom
            h5(class = "value-box-title", industry()),
            div(
              style = "display: flex; align-items: baseline; margin-bottom: 5px;", # Adjusted margin-bottom
              h3(sprintf("%.2f", current_value), style = "margin: 0;"), # Removed margin
              span("MtCOâ‚‚e", class = "value-box-units")
            ),
            div(
              style = "display: flex; align-items: center; margin-bottom: -10px;", # Negative margin to move closer
              create_yoy_arrow(yoy_change),
              span(class = "value-box-yoy", ifelse(is.na(yoy_change), "NA", sprintf("%.2f%%", yoy_change)), style = ifelse(yoy_change > 0, "color: #2b9c93; margin-left: 5px;", "color: #002d54; margin-left: 5px;"))
            )
          ),
          div(
            style = "margin-top: -30px;", # Apply the margin here to move the sparkline up
            plotOutput(ns("sparkline"), height = "30px", width = "100%")
          )
        )
      )
    })
    
    output$sparkline <- renderPlot({
      small_line_plot(data() %>% filter(!!sym(category()) == !!industry()), "#28a745")
    })
  })
}


# UI Module for Chart
chartUI <- function(id, title) {
  ns <- NS(id)
  box(
    title = span(class = "box-title", title),
    width = 12,
    solidHeader = TRUE,
    div(class = "box-content", highchartOutput(ns("chartOutput"), height = "300px"))
  )
}

# Server Module for Line Chart on Summary Page
summaryLineChartServer <- function(id, data) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    
    output$chartOutput <- renderHighchart({
      summary_line_data <- data()
      variable_col <- names(summary_line_data)[1]  # Get the first column name, which is the variable name
      
      series_list <- lapply(unique(summary_line_data[[variable_col]]), function(variable) {
        df <- summary_line_data %>% filter(!!sym(variable_col) == variable)
        list(
          name = variable,
          data = df %>% select(Year, Value) %>% list_parse2()
        )
      })
      
      highchart() %>%
        hc_chart(type = "line", zoomType = "xy") %>%
        hc_xAxis(categories = unique(summary_line_data$Year)) %>%
        hc_yAxis(title = list(text = "MtCOâ‚‚e")) %>%
        hc_legend(align = "left", alignColumns = FALSE, layout = "horizontal") %>%
        hc_plotOptions(line = list(marker = list(enabled = FALSE))) %>%  # Disable markers
        hc_add_theme(thm) %>%
        hc_add_series_list(series_list)
    })
  })
}

# Server Module for Pie Chart
summaryPieChartServer <- function(id, data, current_year, category) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    output$chartOutput <- renderHighchart({
      pie_data <- data() %>% filter(Year == current_year() & !!sym(category()) != "Total") %>% 
        group_by(!!sym(category())) %>% summarise(Value = sum(Value, na.rm = TRUE))
      highchart() %>%
        hc_chart(type = "pie") %>%
        hc_series(list(data = list_parse(pie_data %>% transmute(name = !!sym(category()), y = Value)))) %>%
        hc_plotOptions(pie = list(dataLabels = list(enabled = FALSE),
                                  tooltip = list(pointFormat = '{point.y:.2f} MtCOâ‚‚e ({point.percentage:.2f}%)')))
    })
  })
}

# Helper function to render the appropriate summary chart
render_summary_chart <- function(chart_type, id, data, current_year, category) {
  if (chart_type == "Total Emissions") {
    summaryLineChartServer(id, data)
  } else {
    summaryPieChartServer(id, data, current_year, category)
  }
}

# Server Module for Bar Chart
summaryBarChartServer <- function(id, data, current_year, comparison_year, category) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    output$chartOutput <- renderHighchart({
      bar_data <- data() %>% filter(Year == current_year() & !!sym(category()) != "Total") %>% group_by(!!sym(category())) %>% summarise(Value = sum(Value, na.rm = TRUE))
      line_data <- data() %>% filter(Year == comparison_year() & !!sym(category()) != "Total") %>% group_by(!!sym(category())) %>% summarise(Value = sum(Value, na.rm = TRUE))
      
      colors <- c("#002d54", "#2b9c93", "#6a2063", "#e5682a", "#0b4c0b", "#5d9f3c", "#592c20", "#ca72a2")
      
      highchart() %>%
        hc_chart(type = "bar") %>%
        hc_xAxis(categories = bar_data[[category()]]) %>%
        hc_yAxis(title = list(text = "MtCOâ‚‚e")) %>%
        hc_add_series(
          name = as.character(current_year()), 
          data = bar_data$Value, 
          type = "bar", 
          colorByPoint = TRUE, 
          colors = colors
        ) %>%
        hc_add_series(
          name = as.character(comparison_year()), 
          data = line_data$Value, 
          type = "scatter", 
          color = "#ff0000", 
          marker = list(enabled = TRUE, symbol = "circle", lineWidth = 2, radius = 3)
        ) %>%
        hc_plotOptions(series = list(groupPadding = 0, pointPadding = 0.1, borderWidth = 0)) %>%
        hc_tooltip(shared = TRUE, pointFormat = '{series.name}: {point.y:.2f} MtCOâ‚‚e<br/>') %>%
        hc_add_theme(thm)
    })
  })
}

# Function to generate the value boxes for the top 3 industries
generate_top_industries <- function(id_prefix) {
  fluidRow(
    column(width = 4, valueBoxUI(paste0("totalIndustry1_", id_prefix)), style = "padding-right: 0; padding-left: 0;"),
    column(width = 4, valueBoxUI(paste0("totalIndustry2_", id_prefix)), style = "padding-right: 0; padding-left: 0;"),
    column(width = 4, valueBoxUI(paste0("totalIndustry3_", id_prefix)), style = "padding-right: 0; padding-left: 0;")
  )
}

# Function to generate the bottom row of the summary page
generate_summary_bottom_row <- function(id_prefix, chart_type) {
  tagList(
    fluidRow(
      column(width = 4, 
             valueBoxUI(paste0("totalValue_", id_prefix)), 
             
             style = "padding-right: 0; padding-left: 0;"
      ),
      column(width = 4,
             if (chart_type == "Total Emissions") {
               chartUI(paste0("industryLineChart_", id_prefix), "Industry Emissions Over Time")
             } else {
               chartUI(paste0("industryPieChart_", id_prefix), "Category Breakdown")
             },
             style = "padding-right: 0; padding-left: 0;"
      ),
      column(width = 4, 
             chartUI(paste0("industryBarChart_", id_prefix), "Emissions by Category"), 
             style = "padding-right: 0; padding-left: 0;"
      )
    )
  )
}

## File: options.R 
 ##options.R

library(shiny)
library(highcharter)
library(tidyverse)
library(shinyWidgets)
library(shinythemes)
library(rsconnect)
library(png)
library(htmltools)
library(DT)
library(shinyjs)
library(RColorBrewer)
library(shinyjs)


# Highchart options
hcoptslang <- getOption("highcharter.lang")
hcoptslang$thousandsSep <- ","
hcoptslang$numericSymbols <- " "
options(highcharter.lang = hcoptslang)

# Load the theme
thm <- source("hc_theme.R")$value

# Load the .RData file containing the datasets
load("ghg_data.RData")
load("census_data.RData")


# Preset list of colors
preset_colors <- c("#002d54", "#2b9c93", "#6a2063", "#e5682a", "#0b4c0b", "#5d9f3c", "#592c20", "#ca72a2")

# Function to assign colors to variables
assign_colors <- function(data, colors) {
  first_col_name <- names(data)[1]
  variables <- unique(data[[first_col_name]])
  setNames(colors[1:length(variables)], variables)
}

## File: server.R 
 # File: server.R

# Source the necessary modules for server logic
source("module_subsector_emissions.R")
source("module_total_emissions.R")
source("module_gas_emissions.R")
source("module_manure_usage.R")
source("module_map.R")
source("module_occupiers_region.R")
source("module_land_use_summary.R")  # Added new module

server <- function(input, output, session) {
  subsectorEmissionsServer("subsector")
  totalEmissionsServer("total")
  gasEmissionsServer("gas")
  manureUsageServer("manure")
  mapServer("occupiers")
  landUseSummaryServer("land_use")  # Added new module server
}

## File: ui.R 
 # File: ui.R

# Source UI modules
source("options.R")
source("module_line_chart.R")
source("module_area_chart.R")
source("module_bar_chart.R")
source("module_timelapse_bar_chart.R")
source("module_data_table.R")
source("module_total_emissions.R")
source("module_subsector_emissions.R")
source("module_gas_emissions.R")
source("module_summary.R")
source("module_information.R")
source("module_manure_usage.R")
source("module_map.R")
source("module_occupiers_region.R")
source("module_land_use_summary.R")  # Added new module
source("hc_theme.R")
library(shinyjs)

create_footer <- function() {
  div(
    class = "footer",
    span("Last Updated: ", format(Sys.Date(), "%d/%m/%Y")),
    img(src = "sg.png", alt = "SG Logo", style = "height: 30px; margin-left: 10px;")
  )
}

# Generate the UI
ui <- fluidPage(
  useShinyjs(),  # Initialize shinyjs
  theme = shinytheme("flatly"),
  tags$head(
    tags$link(rel = "stylesheet", type = "text/css", href = "styles.css"),
    includeHTML("google-analytics.html")
  ),
  div(class = "container-fluid full-height",
      div(class = "content",
          navbarPage(
            title = div(
              div("Home", style = "display: inline-block; margin-right: 20px;"),
              actionLink("toggleSidebar", icon("bars"), class = "nav-link", style = "display: inline-block; vertical-align: middle;"),
              tags$li(class = "nav-item", img(src = "RESAS Logo.png", class = "header-logo"))
            ),
            id = "navbar",
            navbarMenu("Emissions",
                       tabPanel("Agriculture Emissions", value = "subsector", subsectorEmissionsUI("subsector")),
                       tabPanel("Industry Emissions", value = "total", totalEmissionsUI("total")),
                       tabPanel("Gas Emissions", value = "gas", gasEmissionsUI("gas")),
                       tabPanel("Manure Usage", value = "manure", manureUsageUI("manure")),
                       tabPanel("Further Information", value = "info", informationUI("info"))
            ),
            navbarMenu("Structure",
                       tabPanel("Occupiers by Region", value = "occupiers", mapUI("occupiers")),
                       tabPanel("Land Use", value = "land_use", landUseSummaryUI("land_use"))  # Added new page
            )
          ),
          create_footer()
      )
  ))

## File: www/styles.css 
 /* styles.css */

.chart-title {
  font-size: 30px !important;
  font-weight: bold !important;
  margin-bottom: 10px !important;
  font-family: 'Arial', sans-serif !important;
}

/* General styles */
.full-width {
  width: 100% !important;
}
.full-height {
  height: 100vh !important;
}
.navbar {
  margin-bottom: 5px !important;
}
.sidebar {
  width: 250px !important;
  padding: 10px !important;
  border-right: 1px solid #ddd !important;
  float: left !important;  /* Float to the left */
  height: calc(100vh - 65px) !important;  /* Adjust for header and reduced margin */
}
.main-panel {
  margin-left: 270px !important;
  padding: 10px !important;
  overflow: auto !important;  /* Enable scrolling for main content */
  height: calc(100vh - 65px) !important;  /* Adjust for header and reduced margin */
}
.header-logo {
  position: absolute !important;
  top: 0px !important;
  right: 0px !important;
  height: 60px !important;
}

.box {
  border: 1px solid #e3e3e3;
  background-color: white;
  margin: 0;
  padding: 10px;
}
.value-box {
  height: 160px !important;
  text-align: left;
  box-shadow: 0 1px 2px rgba(0,0,0,0.1);
  margin: 0;
  padding: 0;
}
.value-box .inner {
  padding: 5px;
}
.value-box h3, .value-box h5 {
  margin: 0;
  color: #333;
}
.value-box h3 {
  font-size: 36px;
  font-weight: bold;
}
.value-box-units {
  font-size: 18px;
  margin-left: 5px;
  display: inline-block;
}
.value-box-title {
  font-size: 20px;
  margin-bottom: 5px;
  font-weight: bold;
}
.value-box-yoy {
  font-size: 24px;
  font-weight: bold;
}
.sparkline {
  width: 100%;
  height: 30px;
}
.header-text {
  font-size: 24px;
  font-weight: bold;
  margin-bottom: 10px;
}
.box-title {
  font-size: 20px;
  font-weight: bold;
  margin-bottom: 0px;
}
.box-content {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  height: 100%;
}
.content, .row, .col {
  margin: 0;
  padding: 0;
}
.body {
  background-color: #f9f9f9;
  font-family: 'Arial', sans-serif;
  font-size: 16px;
  color: black; /* Set text color to black */
  line-height: 1.5;
}

html, body {
  height: 100%;
  margin: 0;
  padding: 0;
}

.container-fluid.full-height {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
}

.content {
  flex: 1 0 auto;
}

.footer {
  flex-shrink: 0;
  background-color: #ffffff;
  padding: 10px;
  text-align: center;
  border-top: 1px solid #dee2e6;
}

/* Apply default font size, family, and color to all common elements */
h1, h2, h3, h4, h5, p, div, span, a, li, table, th, td, input, button, select, textarea {
  font-family: Arial, sans-serif;
  font-size: 16px;
}

/* Set default font size, family, and color for Highcharts */
.highcharts-title,
.highcharts-subtitle,
.highcharts-axis-title,
.highcharts-axis-labels,
.highcharts-tooltip,
.highcharts-legend-item,
.highcharts-data-label {
  font-family: Arial, sans-serif !important;
  font-size: 16px !important;
  color: black !important; /* Set text color to black */
}

/* Slider colours */

/* Apply custom styles to all sliders */
.irs-single, .irs-bar-edge, .irs-bar {
  background: #002d54 !important;
  border-top: 1px solid #002d54 !important;
  border-bottom: 1px solid #002d54 !important;
}

/* Change the color of the number tags */
.irs-from, .irs-to, .irs-single {
  background: #002d54 !important;
  color: white !important;
  font-weight: bold !important;
}

/* Ensure grid text and min/max labels are also styled */
.irs-grid-text, .irs-min, .irs-max {
  color: #002d54 !important;
}

/* Remove bullet point from nav-item */
.navbar-nav > li.nav-item,
.navbar-nav > li {
  list-style-type: none;
  margin: 0;
  padding: 0;
}

/* Specific rule to remove bullet point */
.nav-item {
  list-style: none !important;
}

## File: module_subsector_emissions.R 
 # File: module_subsector_emissions.R

subsectorEmissionsUI <- function(id) {
  ns <- NS(id)
  tagList(
    sidebarLayout(
      sidebarPanel(
        width = 3,
        uiOutput(ns("variable_select")),
        actionButton(ns("select_all_button"), "Select All"),
        actionButton(ns("deselect_all_button"), "Deselect All"),
        sliderInput(ns("year"), "Select year range", value = c(1990, 2022), min = 1990, max = 2022, step = 1, sep = "", ticks = TRUE)
      ),
      mainPanel(
        id = ns("mainpanel"),
        width = 9,
        tabsetPanel(
          id = ns("tabs"),
          tabPanel("Summary Page",
                   value = ns("summary"),
                   fluidRow(
                     column(width = 4, sliderInput(ns("summary_current_year"), "Current Year", min = 1990, max = 2022, value = 2022, step = 1)),
                     column(width = 4, sliderInput(ns("summary_comparison_year"), "Comparison Year", min = 1990, max = 2022, value = 2021, step = 1)),
                     column(width = 4,
                            div(
                              style = "margin-top: 25px; text-align: center; border: 4px solid #e3e3e3",
                              h5("Adjust the sliders to compare data from different years.", style = "padding: 0px; font-weight: bold;")
                            )
                     )
                   ),
                   fluidRow(
                     column(width = 12, div(class = "header-text", "Top 3 Categories:"))
                   ),
                   generate_top_industries("subsector"),
                   fluidRow(
                     column(width = 12, div(class = "header-text", "Summary Analysis:"))
                   ),
                   generate_summary_bottom_row("subsector", "Subsector Emissions")
          ),
          tabPanel("Timelapse", timelapseBarChartUI(ns("timelapse_bar")), value = ns("timelapse")),
          tabPanel("Line Chart", lineChartUI(ns("line")), value = ns("line")),
          tabPanel("Area Chart", areaChartUI(ns("area")), value = ns("area")),
         # tabPanel("Bar Chart", barChartUI(ns("normal_bar")), value = ns("bar")),
          tabPanel("Data Table",
                   DTOutput(ns("data_table")),
                   downloadButton(ns("downloadData"), "Download Data"),
                   value = ns("data"))
        )
      )
    )
  )
}

subsectorEmissionsServer <- function(id) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    chart_data <- reactive({
      data <- subsector_total
      data <- data %>% filter(Year >= min(input$year) & Year <= max(input$year))
      if (!is.null(input$variables)) {
        data <- data %>%
          filter(Subsector %in% input$variables)
      }
      data
    })
    
    output$variable_select <- renderUI({
      choices <- unique(subsector_total$Subsector)
      selected <- setdiff(choices, "Total")
      checkboxGroupInput(ns("variables"), "Choose variables to add to chart", choices = choices, selected = selected)
    })
    
    observeEvent(input$select_all_button, {
      updateCheckboxGroupInput(session, ns("variables"), selected = setdiff(unique(subsector_total$Subsector), "Total"))
    })
    
    observeEvent(input$deselect_all_button, {
      updateCheckboxGroupInput(session, ns("variables"), selected = character(0))
    })
    
    areaChartServer(
      id = "area",
      chart_data = chart_data,
      title = "Agricultural Emissions by Subsector in Scotland",
      yAxisTitle = "Emissions (MtCOâ‚‚e)",
      xAxisTitle = "Year",
      footer = '<div style="font-size: 16px; font-weight: bold;">Source: Scottish agriculture greenhouse gas emissions and nitrogen use 2022-23.</div>',
      x_col = "Year",
      y_col = "Value"
    )
    
    timelapseBarChartServer(
      id = "timelapse_bar",
      chart_data = chart_data,
      title = "Agricultural Greenhouse Gas Emissions Timelapse",
      yAxisTitle = "Emissions (MtCOâ‚‚e)",
      xAxisTitle = "Year",
      footer = '<div style="font-size: 16px; font-weight: bold;">Source: Scottish agriculture greenhouse gas emissions and nitrogen use 2022-23.</div>',
      x_col = "Year",
      y_col = "Value"
    )
    
    lineChartServer(
      id = "line",
      chart_data = chart_data,
      title = "Agricultural Greenhouse Gas Emissions by Subsector in Scotland",
      yAxisTitle = "Emissions (MtCOâ‚‚e)",
      xAxisTitle = "Year",
      footer = '<div style="font-size: 16px; font-weight: bold;">Source: Scottish agriculture greenhouse gas emissions and nitrogen use 2022-23.</div>',
      x_col = "Year",
      y_col = "Value"
    )
    
   # barChartServer(
    #  id = "normal_bar",
     # chart_data = chart_data,
      #title = "Agricultural Greenhouse Gas Emissions by Subsector in Scotland",
      #yAxisTitle = "MtCOâ‚‚e",
      #xAxisTitle = "Subsector",
      #footer = '<div style="font-size: 16px; font-weight: bold;">Source: Scottish agriculture greenhouse gas emissions and nitrogen use 2022-23.</div>',
      #x_col = "Year",
      #y_col = "Value",
      #year = 2022
    #)
    
    render_data_table(
      table_id = "data_table",
      chart_data = chart_data,
      output = output
    )
    
    handle_data_download(
      download_id = "downloadData",
      chart_type = "Subsector",
      chart_data = chart_data,
      input = input,
      output = output,
      year_input = "year"
    )
    
    # Summary Module
    current_year <- reactive({ input$summary_current_year })
    comparison_year <- reactive({ input$summary_comparison_year })
    
    valueBoxServer(ns("totalIndustry1"), chart_data, "Subsector", get_industry(1, chart_data, current_year, "Subsector"), current_year, comparison_year)
    valueBoxServer(ns("totalIndustry2"), chart_data, "Subsector", get_industry(2, chart_data, current_year, "Subsector"), current_year, comparison_year)
    valueBoxServer(ns("totalIndustry3"), chart_data, "Subsector", get_industry(3, chart_data, current_year, "Subsector"), current_year, comparison_year)
    valueBoxServer(ns("totalValue"), chart_data, "Subsector", reactive("Total"), current_year, comparison_year)
    
    summaryBarChartServer(ns("industryBarChart"), chart_data, current_year, comparison_year, "Subsector")
  })
}

## File: module_total_emissions.R 
 totalEmissionsUI <- function(id) {
  ns <- NS(id)
  tagList(
    sidebarLayout(
      sidebarPanel(
        width = 3,
        uiOutput(ns("variable_select")),
        actionButton(ns("select_all_button"), "Select All"),
        actionButton(ns("deselect_all_button"), "Deselect All"),
        sliderInput(ns("year"), "Select year range", value = c(1990, 2022), min = 1990, max = 2022, step = 1, sep = "", ticks = TRUE)
      ),
      mainPanel(
        id = ns("mainpanel"),
        width = 9,
        tabsetPanel(
          id = ns("tabs"),
          tabPanel("Summary Page",
                   value = ns("summary"),
                   fluidRow(
                     column(width = 4, sliderInput(ns("summary_current_year"), "Current Year", min = 1990, max = 2022, value = 2022, step = 1)),
                     column(width = 4, sliderInput(ns("summary_comparison_year"), "Comparison Year", min = 1990, max = 2022, value = 2021, step = 1)),
                     column(width = 4,
                            div(
                              style = "margin-top: 25px; text-align: center; border: 4px solid #e3e3e3",
                              h5("Adjust the sliders to compare data from different years.", style = "padding: 0px; font-weight: bold;")
                            )
                     )
                   ),
                   fluidRow(
                     column(width = 12, div(class = "header-text", "Top 3 Categories:"))
                   ),
                   generate_top_industries("total"),
                   fluidRow(
                     column(width = 12, div(class = "header-text", "Summary Analysis:"))
                   ),
                   generate_summary_bottom_row("total", "Total Emissions")
          ),
          tabPanel("Timelapse", timelapseBarChartUI(ns("bar")), value = ns("bar")),
          tabPanel("Line Chart", lineChartUI(ns("line")), value = ns("line")),
          tabPanel("Area Chart", areaChartUI(ns("area")), value = ns("area")),
          tabPanel("Data Table",
                   DTOutput(ns("data_table")),
                   downloadButton(ns("downloadData"), "Download Data"),
                   value = ns("data"))
        )
      )
    )
  )
}

totalEmissionsServer <- function(id) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    chart_data <- reactive({
      data <- national_total
      data <- data %>% filter(Year >= min(input$year) & Year <= max(input$year))
      if (!is.null(input$variables)) {
        data <- data %>%
          filter(Industry %in% input$variables)
      }
      data
    })
    
    output$variable_select <- renderUI({
      choices <- unique(national_total$Industry)
      selected <- setdiff(choices, "Total")
      checkboxGroupInput(ns("variables"), "Choose variables to add to chart", choices = choices, selected = selected)
    })
    
    observeEvent(input$select_all_button, {
      updateCheckboxGroupInput(session, ns("variables"), selected = setdiff(unique(national_total$Industry), "Total"))
    })
    
    observeEvent(input$deselect_all_button, {
      updateCheckboxGroupInput(session, ns("variables"), selected = character(0))
    })
    
    areaChartServer(
      id = "area",
      chart_data = chart_data,
      title = "National Greenhouse Gas Emissions by Source in Scotland",
      yAxisTitle = "Emissions (MtCOâ‚‚e)",
      xAxisTitle = "Year",
      footer = '<div style="font-size: 16px;"><a href="https://www.gov.scot/publications/scottish-greenhouse-gas-statistics-2022/documents/">Source: Scottish Greenhouse Gas Statistics 2022</a></div>',
      x_col = "Year",
      y_col = "Value"
    )
    
    timelapseBarChartServer(
      id = "bar",
      chart_data = chart_data,
      title = "National Greenhouse Gas Emissions Timelapse",
      yAxisTitle = "Emissions (MtCOâ‚‚e)",
      xAxisTitle = "Year",
      footer = '<div style="font-size: 16px;"><a href="https://www.gov.scot/publications/scottish-greenhouse-gas-statistics-2022/documents/">Source: Scottish Greenhouse Gas Statistics 2022</a></div>',
      x_col = "Year",
      y_col = "Value"
    )
    
    lineChartServer(
      id = "line",
      chart_data = chart_data,
      title = "National Greenhouse Gas Emissions by Source in Scotland",
      yAxisTitle = "Emissions (MtCOâ‚‚e)",
      xAxisTitle = "Year",
      footer = '<div style="font-size: 16px;"><a href="https://www.gov.scot/publications/scottish-greenhouse-gas-statistics-2022/documents/">Source: Scottish Greenhouse Gas Statistics 2022</a></div>',
      x_col = "Year",
      y_col = "Value"
    )
    
    render_data_table(
      table_id = "data_table",
      chart_data = chart_data,
      output = output
    )
    
    handle_data_download(
      download_id = "downloadData",
      chart_type = "National",
      chart_data = chart_data,
      input = input,
      output = output,
      year_input = "year"
    )
    
    # Summary Module
    current_year <- reactive({ input$summary_current_year })
    comparison_year <- reactive({ input$summary_comparison_year })
    
    valueBoxServer(ns("totalIndustry1"), chart_data, "Industry", get_industry(1, chart_data, current_year, "Industry"), current_year, comparison_year)
    valueBoxServer(ns("totalIndustry2"), chart_data, "Industry", get_industry(2, chart_data, current_year, "Industry"), current_year, comparison_year)
    valueBoxServer(ns("totalIndustry3"), chart_data, "Industry", get_industry(3, chart_data, current_year, "Industry"), current_year, comparison_year)
    valueBoxServer(ns("totalValue"), chart_data, "Industry", reactive("Total"), current_year, comparison_year)
    
    summaryBarChartServer(ns("industryBarChart"), chart_data, current_year, comparison_year, "Industry")
  })
}

## File: module_gas_emissions.R 
 gasEmissionsUI <- function(id) {
  ns <- NS(id)
  tagList(
    sidebarLayout(
      sidebarPanel(
        width = 3,
        uiOutput(ns("variable_select")),
        actionButton(ns("select_all_button"), "Select All"),
        actionButton(ns("deselect_all_button"), "Deselect All"),
        sliderInput(ns("year"), "Select year range", value = c(1990, 2022), min = 1990, max = 2022, step = 1, sep = "", ticks = TRUE)
      ),
      mainPanel(
        id = ns("mainpanel"),
        width = 9,
        tabsetPanel(
          id = ns("tabs"),
          tabPanel("Summary Page",
                   value = ns("summary"),
                   fluidRow(
                     column(width = 4, sliderInput(ns("summary_current_year"), "Current Year", min = 1990, max = 2022, value = 2022, step = 1)),
                     column(width = 4, sliderInput(ns("summary_comparison_year"), "Comparison Year", min = 1990, max = 2022, value = 2021, step = 1)),
                     column(width = 4,
                            div(
                              style = "margin-top: 25px; text-align: center; border: 4px solid #e3e3e3",
                              h5("Adjust the sliders to compare data from different years.", style = "padding: 0px; font-weight: bold;")
                            )
                     )
                   ),
                   fluidRow(
                     column(width = 12, div(class = "header-text", "Top 3 Categories:"))
                   ),
                   generate_top_industries("gas"),
                   fluidRow(
                     column(width = 12, div(class = "header-text", "Summary Analysis:"))
                   ),
                   generate_summary_bottom_row("gas", "Gas Emissions")
          ),
          tabPanel("Timelapse", timelapseBarChartUI(ns("bar")), value = ns("bar")),
          tabPanel("Line Chart", lineChartUI(ns("line")), value = ns("line")),
          tabPanel("Area Chart", areaChartUI(ns("area")), value = ns("area")),
          tabPanel("Data Table",
                   DTOutput(ns("data_table")),
                   downloadButton(ns("downloadData"), "Download Data"),
                   value = ns("data"))
        )
      )
    )
  )
}

gasEmissionsServer <- function(id) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    chart_data <- reactive({
      data <- agri_gas
      data <- data %>% filter(Year >= min(input$year) & Year <= max(input$year))
      if (!is.null(input$variables)) {
        data <- data %>%
          filter(Gas %in% input$variables)
      }
      data
    })
    
    output$variable_select <- renderUI({
      choices <- unique(agri_gas$Gas)
      selected <- setdiff(choices, "Total")
      checkboxGroupInput(ns("variables"), "Choose variables to add to chart", choices = choices, selected = selected)
    })
    
    observeEvent(input$select_all_button, {
      updateCheckboxGroupInput(session, ns("variables"), selected = setdiff(unique(agri_gas$Gas), "Total"))
    })
    
    observeEvent(input$deselect_all_button, {
      updateCheckboxGroupInput(session, ns("variables"), selected = character(0))
    })
    
    areaChartServer(
      id = "area",
      chart_data = chart_data,
      title = "Agricultural Greenhouse Gas Emissions Breakdown in Scotland",
      yAxisTitle = "Emissions (MtCOâ‚‚e)",
      xAxisTitle = "Year",
      footer = '<div style="font-size: 16px; font-weight: bold;">Source: Scottish agriculture greenhouse gas emissions and nitrogen use 2022-23.</div>',
      x_col = "Year",
      y_col = "Value"
    )
    
    timelapseBarChartServer(
      id = "bar",
      chart_data = chart_data,
      title = "Agricultural Greenhouse Gas Emissions Breakdown Timelapse",
      yAxisTitle = "Emissions (MtCOâ‚‚e)",
      xAxisTitle = "Year",
      footer = '<div style="font-size: 16px; font-weight: bold;">Source: Scottish agriculture greenhouse gas emissions and nitrogen use 2022-23.</div>',
      x_col = "Year",
      y_col = "Value"
    )
    
    lineChartServer(
      id = "line",
      chart_data = chart_data,
      title = "Agricultural Greenhouse Gas Emissions Breakdown in Scotland",
      yAxisTitle = "Emissions (MtCOâ‚‚e)",
      xAxisTitle = "Year",
      footer = '<div style="font-size: 16px; font-weight: bold;">Source: Scottish agriculture greenhouse gas emissions and nitrogen use 2022-23.</div>',
      x_col = "Year",
      y_col = "Value"
    )
    
    render_data_table(
      table_id = "data_table",
      chart_data = chart_data,
      output = output
    )
    
    handle_data_download(
      download_id = "downloadData",
      chart_type = "Gas",
      chart_data = chart_data,
      input = input,
      output = output,
      year_input = "year"
    )
    
    # Summary Module
    current_year <- reactive({ input$summary_current_year })
    comparison_year <- reactive({ input$summary_comparison_year })
    
    valueBoxServer(ns("totalIndustry1"), chart_data, "Gas", get_industry(1, chart_data, current_year, "Gas"), current_year, comparison_year)
    valueBoxServer(ns("totalIndustry2"), chart_data, "Gas", get_industry(2, chart_data, current_year, "Gas"), current_year, comparison_year)
    valueBoxServer(ns("totalIndustry3"), chart_data, "Gas", get_industry(3, chart_data, current_year, "Gas"), current_year, comparison_year)
    valueBoxServer(ns("totalValue"), chart_data, "Gas", reactive("Total"), current_year, comparison_year)
    
    summaryBarChartServer(ns("industryBarChart"), chart_data, current_year, comparison_year, "Gas")
  })
}

## File: module_manure_usage.R 
 # File: module_manure_usage.R

manureUsageUI <- function(id) {
  ns <- NS(id)
  tagList(
    sidebarLayout(
      sidebarPanel(
        width = 3,
        uiOutput(ns("variable_select")),
        actionButton(ns("select_all_button"), "Select All"),
        actionButton(ns("deselect_all_button"), "Deselect All"),
        radioButtons(ns("data_type"), "Data Type", choices = c("Area" = "area", "Holdings" = "holdings"), selected = "area")
      ),
      mainPanel(
        id = ns("mainpanel"),
        width = 9,
        tabsetPanel(
          id = ns("tabs"),
          tabPanel("Bar Chart", barChartUI(ns("bar_chart")), value = ns("bar")),
          tabPanel("Data Table",
                   DTOutput(ns("data_table")),
                   downloadButton(ns("downloadData"), "Download Data"),
                   value = ns("data"))
        )
      )
    )
  )
}

manureUsageServer <- function(id) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    
    chart_data <- reactive({
      data <- manure_fertiliser
      if (!is.null(input$variables)) {
        data <- data %>%
          filter(`Fertiliser by type` %in% input$variables)
      }
      data
    })
    
    output$variable_select <- renderUI({
      choices <- unique(manure_fertiliser$`Fertiliser by type`)
      selected <- choices
      checkboxGroupInput(ns("variables"), "Choose variables to add to chart", choices = choices, selected = selected)
    })
    
    observeEvent(input$select_all_button, {
      updateCheckboxGroupInput(session, ns("variables"), selected = unique(manure_fertiliser$`Fertiliser by type`))
    })
    
    observeEvent(input$deselect_all_button, {
      updateCheckboxGroupInput(session, ns("variables"), selected = character(0))
    })
    
    y_col <- reactive({
      if (input$data_type == "area") {
        "2023 area"
      } else {
        "2023 holdings"
      }
    })
    
    yAxisTitle <- reactive({
      if (input$data_type == "area") {
        "Area (1,000 hectares)"
      } else {
        "Holdings"
      }
    })
    
    tooltip_format <- reactive({
      if (input$data_type == "area") {
        "Area (hectares): {point.y:.2f}"
      } else {
        "Holdings: {point.y:.0f}"
      }
    })
    
    barChartServer(
      id = "bar_chart",
      chart_data = chart_data,
      title = "Manure Usage by Type in Scotland",
      yAxisTitle = yAxisTitle,
      xAxisTitle = "Fertiliser Type",
      footer = '<div style="font-size: 16px; font-weight: bold;"><a href="https://www.gov.scot/publications/results-scottish-agricultural-census-june-2023/documents/">Source: Scottish Agricultural Census: June 2023</a></div>',
      x_col = "Fertiliser by type",
      y_col = y_col,
      tooltip_format = tooltip_format
    )
    
    render_data_table(
      table_id = "data_table",
      chart_data = chart_data,
      output = output
    )
    
    handle_data_download(
      download_id = ns("downloadData"),
      chart_type = "Manure Usage",
      chart_data = chart_data,
      input = input,
      output = output,
      year_input = NULL
    )
  })
}

## File: module_map.R 
 # module_map.R

library(highcharter)
library(geojsonio)
library(dplyr)
library(shiny)

# Load the GeoJSON file
geojson_data <- geojson_read("subregions_simplified.geojson", what = "sp")

# Convert GeoJSON to a Highcharts-compatible format
geojson_list <- geojson_list(geojson_data)

# Sample data frame for demonstration purposes
regions_data <- data.frame(
  sub_region = c("Shetland", "Orkney", "Na h-Eileanan Siar", "Highland", 
                 "Grampian", "Tayside", "Fife", "Lothian", "Scottish Borders", 
                 "East Central", "Argyll & Bute", "Clyde Valley", "Ayrshire", 
                 "Dumfries & Galloway"),
  value = c(24, 37, 7, 90, 153, 55, 47, 37, 46, 67, 82, 221, 320, 503)
)

mapUI <- function(id) {
  ns <- NS(id)
  tagList(
    highchartOutput(ns("map"))
  )
}

mapServer <- function(id) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    
    output$map <- renderHighchart({
      highchart(type = "map") %>%
        hc_add_series(
          mapData = geojson_list, 
          name = "Regions Data",
          joinBy = c("sub_region", "sub_region"),  # Make sure these properties match
          data = regions_data,
          borderColor = "#FFFFFF",
          borderWidth = 0.5,
          states = list(
            hover = list(
              color = "#BADA55"
            )
          ),
          dataLabels = list(
            enabled = TRUE,
            format = '{point.name}'
          ),
          tooltip = list(
            pointFormat = '{point.name}: {point.value}'
          )
        ) %>%
        hc_mapNavigation(enabled = TRUE) %>%
        hc_colorAxis(
          min = 0,
          max = 600,
          stops = color_stops(5)
        ) %>%
        hc_title(text = "Custom Regions and Sub-regions Map")
    })
  })
}

# Testing module
content_demo <- function() {
  ui <- fluidPage(mapUI("map_test"))
  server <- function(input, output, session) {
    mapServer("map_test")
  }
  shinyApp(ui, server)
}

content_demo()

## File: module_occupiers_region.R 
 library(highcharter)
library(geojsonio)
library(dplyr)
library(shiny)
library(tidyr)

# Load the GeoJSON file
geojson_data <- geojson_read("subregions_simplified.geojson", what = "sp")

# Convert GeoJSON to a Highcharts-compatible format
geojson_list <- geojson_list(geojson_data)

# Coerce all relevant columns to character before pivoting
occupiers_employees_subregion <- occupiers_employees_subregion %>%
  mutate(across(-`Occupiers and employees by category`, as.character))

# Transform the data
regions_data <- occupiers_employees_subregion %>% 
  select(-Scotland) %>% 
  pivot_longer(cols = -`Occupiers and employees by category`, names_to = "sub_region", values_to = "value") %>%
  mutate(value = ifelse(value == "c", NA, as.numeric(value))) # Convert 'c' to NA and the rest to numeric

mapUI <- function(id) {
  ns <- NS(id)
  tagList(
    sidebarPanel(
      selectInput(ns("variable"), "Select Variable", choices = unique(regions_data$`Occupiers and employees by category`))
    ),
    mainPanel(
      highchartOutput(ns("map"), height = "75vh"),  # Set the height to be responsive
      div(
        class = "note",
        style = "margin-top: 20px; padding: 10px; border-top: 1px solid #ddd;",
        HTML(
          "<strong>Note:</strong><ul>
            <li>To change the data shown, select a variable from the dropdown menu within the sidebar.</li>
            <li>You can see data values for each variable by hovering your mouse over the region.</li>
            <li>To change the zoom level, use the + and - to the left of the graph, or scroll using your mouse wheel.</li>

          </ul>"
        )
      )
    )
  )
}

mapServer <- function(id) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    
    filtered_data <- reactive({
      regions_data %>%
        filter(`Occupiers and employees by category` == input$variable)
    })
    
    output$map <- renderHighchart({
      data <- filtered_data()
      hc_data <- data %>% 
        mutate(sub_region = as.character(sub_region)) %>%
        select(sub_region, value) %>%
        list_parse()
      
      variable_name <- input$variable  # Get the selected variable name
      
      highchart(type = "map") %>%
        hc_add_series(
          mapData = geojson_list, 
          joinBy = c("sub_region", "sub_region"),
          data = hc_data,
          borderColor = "#FFFFFF",
          borderWidth = 0.5,
          states = list(
            hover = list(
              color = "#BADA55"
            )
          ),
          dataLabels = list(
            enabled = FALSE  # Disable the overlays
          ),
          tooltip = list(
            useHTML = TRUE,
             headerFormat = "<b>{point.key}</b><br/>", # doesnt work for some reason
            pointFormatter = JS(sprintf("function() {
              return '<b>' + this.sub_region + '</b><br/>' +
                     '%s: ' + this.value;
            }", variable_name))
          ),
          nullColor = '#E0E0E0'  # Color for regions with no data
        ) %>%
        hc_mapNavigation(enabled = TRUE) %>%
        hc_colorAxis(
          min = 0,
          stops = color_stops(5),
          labels = list(
            format = "{value:,.0f}"  # Ensure the labels show the correct values
          )
        ) %>%
        hc_title(text = "Occupiers and Employees by Region") %>%
        hc_chart(reflow = TRUE) %>% # Make chart responsive
        hc_legend(
          layout = "horizontal",
          align = "center",
          verticalAlign = "bottom",
          title = list(text = "Legend", style = list(fontSize = '15px')),
          itemStyle = list(width = '100px')
        )
    })
  })
}

# Testing module
content_demo <- function() {
  ui <- fluidPage(mapUI("map_test"))
  server <- function(input, output, session) {
    mapServer("map_test")
  }
  shinyApp(ui, server)
}

content_demo()
